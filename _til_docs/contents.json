{
  "paths": [
    {
      "type": "file",
      "value": "README.md"
    },
    {
      "type": "file",
      "value": "index.md"
    },
    {
      "type": "file",
      "value": "Authentication.md"
    },
    {
      "type": "file",
      "value": "DNS_Config.md"
    },
    {
      "type": "file",
      "value": "Distributed_Systems.md"
    },
    {
      "type": "file",
      "value": "Django.md"
    },
    {
      "type": "dir",
      "name": "Entrepreneurship",
      "children": [
        {
          "type": "file",
          "value": "Entrepreneurship/Aquired_Episodes.md"
        }
      ]
    },
    {
      "type": "file",
      "value": "Frontend.md"
    },
    {
      "type": "file",
      "value": "JavaScript.md"
    },
    {
      "type": "file",
      "value": "Python.md"
    },
    {
      "type": "dir",
      "name": "TCP-IP",
      "children": [
        {
          "type": "file",
          "value": "TCP-IP/IP_Addresses.md"
        },
        {
          "type": "file",
          "value": "TCP-IP/IP_Subnets.md"
        },
        {
          "type": "file",
          "value": "TCP-IP/Network_Layers.md"
        },
        {
          "type": "file",
          "value": "TCP-IP/TCP-IP.md"
        },
        {
          "type": "file",
          "value": "TCP-IP/Unix_Specific.md"
        }
      ]
    },
    {
      "type": "file",
      "value": "Vue.md"
    },
    {
      "type": "file",
      "value": "docker-compose.md"
    }
  ],
  "contents": [
    {
      "path": "README.md",
      "url": "README.html",
      "content": "# Collection of Today I Learned (TIL)\n\nThis repository serves as a random collection of TIL's over a random period of days. Some of these were review and others were some concepts were new.\n\n- [Authentication](Authentication.md)\n- [Distributed Systems](Distributed_Systems.md)\n- [Django](Django.md)\n- [docker-compose](docker-compose.md)\n- [Frontend](Frontend.md)\n- [JavaScript](JavaScript.md)\n- [Python](Python.md)\n- [Vue](Vue.md)\n",
      "html": "<h1 id=\"collection-of-today-i-learned-(til)\">Collection of Today I Learned (TIL) <a class=\"heading-anchor-permalink\" href=\"#collection-of-today-i-learned-(til)\">#</a></h1>\n<p>This repository serves as a random collection of TIL’s over a random period of days. Some of these were review and others were some concepts were new.</p>\n<ul>\n<li><a href=\"Authentication.html\">Authentication</a></li>\n<li><a href=\"Distributed_Systems.html\">Distributed Systems</a></li>\n<li><a href=\"Django.html\">Django</a></li>\n<li><a href=\"docker-compose.html\">docker-compose</a></li>\n<li><a href=\"Frontend.html\">Frontend</a></li>\n<li><a href=\"JavaScript.html\">JavaScript</a></li>\n<li><a href=\"Python.html\">Python</a></li>\n<li><a href=\"Vue.html\">Vue</a></li>\n</ul>\n",
      "id": 0
    },
    {
      "path": "index.md",
      "url": "index.html",
      "content": "# Collection of Today I Learned (TIL)\n\nThis repository serves as a random collection of TIL's over a random period of days. Some of these were review and others were new concepts.\n\n- [Authentication](Authentication.md)\n- [Distributed Systems](Distributed_Systems.md)\n- [Django](Django.md)\n- [docker-compose](docker-compose.md)\n- [Frontend](Frontend.md)\n- [JavaScript](JavaScript.md)\n- [Python](Python.md)\n- [Vue](Vue.md)\n- [TCP](TCP-IP/TCP-IP.md)\n- [Domain Name Configuration](DNS_Config.md)\n",
      "html": "<h1 id=\"collection-of-today-i-learned-(til)\">Collection of Today I Learned (TIL) <a class=\"heading-anchor-permalink\" href=\"#collection-of-today-i-learned-(til)\">#</a></h1>\n<p>This repository serves as a random collection of TIL’s over a random period of days. Some of these were review and others were new concepts.</p>\n<ul>\n<li><a href=\"Authentication.html\">Authentication</a></li>\n<li><a href=\"Distributed_Systems.html\">Distributed Systems</a></li>\n<li><a href=\"Django.html\">Django</a></li>\n<li><a href=\"docker-compose.html\">docker-compose</a></li>\n<li><a href=\"Frontend.html\">Frontend</a></li>\n<li><a href=\"JavaScript.html\">JavaScript</a></li>\n<li><a href=\"Python.html\">Python</a></li>\n<li><a href=\"Vue.html\">Vue</a></li>\n<li><a href=\"TCP-IP/TCP-IP.html\">TCP</a></li>\n<li><a href=\"DNS_Config.html\">Domain Name Configuration</a></li>\n</ul>\n",
      "id": 1
    },
    {
      "path": "Authentication.md",
      "url": "Authentication.html",
      "content": "# Client Side OAuth Flow\n\nThe `oauth` process is as follows:\n\n1. The client makes a request to the oauth server and the user authorizes permissions.\n2. Upon authorization, the oauth server (e.g. Facebook, Google), redirects to a specified url with a `code` as a query param. I believe you can do this on the frontend with `postmessage` as the redirect url.\n3. The client then exchanges the `code` with the Oauth server for an `access token`.\n4. This access token can then be used to pass to an application backend like `django-rest-framework-social-auth2` for authentication/user creation\n\nSteps 2 and 3 may be blurred together.\n",
      "html": "<h1 id=\"client-side-oauth-flow\">Client Side OAuth Flow <a class=\"heading-anchor-permalink\" href=\"#client-side-oauth-flow\">#</a></h1>\n<p>The <code>oauth</code> process is as follows:</p>\n<ol>\n<li>The client makes a request to the oauth server and the user authorizes permissions.</li>\n<li>Upon authorization, the oauth server (e.g. Facebook, Google), redirects to a specified url with a <code>code</code> as a query param. I believe you can do this on the frontend with <code>postmessage</code> as the redirect url.</li>\n<li>The client then exchanges the <code>code</code> with the Oauth server for an <code>access token</code>.</li>\n<li>This access token can then be used to pass to an application backend like <code>django-rest-framework-social-auth2</code> for authentication/user creation</li>\n</ol>\n<p>Steps 2 and 3 may be blurred together.</p>\n",
      "id": 2
    },
    {
      "path": "DNS_Config.md",
      "url": "DNS_Config.html",
      "content": "# DNS Records\n\n- A `CNAME` record is an alias that points from one domain name alias to the actual domain name. On namecheap this can be done by mapping the `www` subdomain to the actual domain name for example.\n- An `A` record maps the canonical (actual) domain name to the IP address hosting the website\n\nRecall, when you purchase a domain you purchase a top level domain (TLD) which is `<domain>.<TLD>` (e.g. `example.com`). `www` is a subdomain so you must map that alias to the actual canonical domain name, which in this case is `example.com`.\n\n",
      "html": "<h1 id=\"dns-records\">DNS Records <a class=\"heading-anchor-permalink\" href=\"#dns-records\">#</a></h1>\n<ul>\n<li>A <code>CNAME</code> record is an alias that points from one domain name alias to the actual domain name. On namecheap this can be done by mapping the <code>www</code> subdomain to the actual domain name for example.</li>\n<li>An <code>A</code> record maps the canonical (actual) domain name to the IP address hosting the website</li>\n</ul>\n<p>Recall, when you purchase a domain you purchase a top level domain (TLD) which is <code>&lt;domain&gt;.&lt;TLD&gt;</code> (e.g. <code>example.com</code>). <code>www</code> is a subdomain so you must map that alias to the actual canonical domain name, which in this case is <code>example.com</code>.</p>\n",
      "id": 3
    },
    {
      "path": "Distributed_Systems.md",
      "url": "Distributed_Systems.html",
      "content": "# Networking Architecture\n\n### Reverse Proxy\n\nA `reverse proxy` is a proxy that sits in front of the backend/web server and receives incoming requests and then processes those requests routing them to the correct server. In this way you can configure something like `nginx` to be a load balancer as it receives incoming requests and load balances them to different server instances.\n\n### Forward Proxy\n\nFor a `forward proxy` client requests immediately go through a proxy server which then routes those requests to the domain specified in the request. This domain then may point to a `reverse proxy` which routes the requests to different microservices in the application.\n\n### Microservice Architecture\n\nA collection of instances, db, cache, application server, that are isolated (mostly in Docker containers) and can communicate with each other on the network. If you have a microservice application server for example, you can load balance incoming requests (e.g. through an `nginx` configuration) to the different application server instances on the network. This allows you to `horizontally scale` your application as you can easily spin up new instances of whatever layer, application server, db, etc. that needs more computing power.\n\n### Sidecar Paradigm (ngnix)\n\nSidecars are a way of structuring application architectures so that for individual microservices to talk to one another they have to go through a proxy (called a sidecar). This allows you to take all the ssl and policy management out of the application themselves, and instead have something like `nginx` working as a `reverse proxy` applying access policies between services. For more information see the Software Engineering Daily podcast on sidecars.\n\n# Deployments\n\n### Static Files\n\nStatic files are files that change very infrequently from request to request. As such, they can be cached upon retrieval since you know that they won't change on the next request (The browser and something like Cloudfront handle this for you). Thus, the best way to deploy static files is to put them in an s3 bucket (which auto-scales) and have something like Cloudfront in front of it which is a CDN. Cloudfront will cache the static files at its point of access in the network making for faster retrieval time and reducing load on the s3 bucket. If no cache of the files exist, it will go to the s3 bucket and retrieve it. To configure this, all you need to do is point Cloudfront to your s3 bucket, and point your domain name to Cloudfront.\n\n### Load Balancer\n\nAt its core, a load balancer simply accepts incoming traffic and routes it to a number of different application instances. Since it is what is accepting and routing traffic, this acts as a **reverse proxy** and thus can take the role of what nginx does. These incoming requests can then be routed to application instances running with something like `gunicorn` for `Django`. Note that nginx can easily configured as a load balancer too, but if you use an elastic load balancer from AWS you do not need it. This is because when running `nginx` as a reverse proxy something else acts as the web server and serves the responses (e.g. a `Django` app). Were you using `nginx` to serve files like `index.html` and not as a reverse proxy, then you would need to route the load balancer to the `nginx` instance.\n\n# Overall Flow for Decouple Frontend and Backend App\n\n## Frontend\n\nOn push to master, build the frontend distribution files and sync them to an s3 bucket. Put cloudfront in front of the s3 bucket and route all traffic to cloudfront. Then direct any traffic to your domain name to your cloudfront instance. Point your cloudfront instance to your s3 bucket. When a request comes to cloudfront it will either return the cached static file version, or get it from the s3 bucket, cache it, then return that. This reduces load on the s3 bucket and can handle a very very high amount of traffic effectively because s3 scales and accepts requests automatically.\n\n## Backend\n\n### Database\n\nCreate a database instance using one of AWS's database services. It is never a good idea to try to manage your own database instance containerized or whatever as this can potentially lead to serious data loss issues. This database will have a set of credentials for connecting to it that can be passed in as environment variables to the application instances.\n\n### Application servers\n\nCreate a load balancer with a rule/listener to route all traffic to a certain target group. This target group will be comprised of autos-scaled instances running a specified task definition. The task definition will likely be running a specified Dockerfile that is built and pushed to Amazon's ECR with CI/CD. In this task definition you will pass in the database connection environment variables. The target group - a target is an instance - handles the scaling up and down of all the instances and the load balancing of traffic between the auto-scaled instances.\n",
      "html": "<h1 id=\"networking-architecture\">Networking Architecture <a class=\"heading-anchor-permalink\" href=\"#networking-architecture\">#</a></h1>\n<h3 id=\"reverse-proxy\">Reverse Proxy <a class=\"heading-anchor-permalink\" href=\"#reverse-proxy\">#</a></h3>\n<p>A <code>reverse proxy</code> is a proxy that sits in front of the backend/web server and receives incoming requests and then processes those requests routing them to the correct server. In this way you can configure something like <code>nginx</code> to be a load balancer as it receives incoming requests and load balances them to different server instances.</p>\n<h3 id=\"forward-proxy\">Forward Proxy <a class=\"heading-anchor-permalink\" href=\"#forward-proxy\">#</a></h3>\n<p>For a <code>forward proxy</code> client requests immediately go through a proxy server which then routes those requests to the domain specified in the request. This domain then may point to a <code>reverse proxy</code> which routes the requests to different microservices in the application.</p>\n<h3 id=\"microservice-architecture\">Microservice Architecture <a class=\"heading-anchor-permalink\" href=\"#microservice-architecture\">#</a></h3>\n<p>A collection of instances, db, cache, application server, that are isolated (mostly in Docker containers) and can communicate with each other on the network. If you have a microservice application server for example, you can load balance incoming requests (e.g. through an <code>nginx</code> configuration) to the different application server instances on the network. This allows you to <code>horizontally scale</code> your application as you can easily spin up new instances of whatever layer, application server, db, etc. that needs more computing power.</p>\n<h3 id=\"sidecar-paradigm-(ngnix)\">Sidecar Paradigm (ngnix) <a class=\"heading-anchor-permalink\" href=\"#sidecar-paradigm-(ngnix)\">#</a></h3>\n<p>Sidecars are a way of structuring application architectures so that for individual microservices to talk to one another they have to go through a proxy (called a sidecar). This allows you to take all the ssl and policy management out of the application themselves, and instead have something like <code>nginx</code> working as a <code>reverse proxy</code> applying access policies between services. For more information see the Software Engineering Daily podcast on sidecars.</p>\n<h1 id=\"deployments\">Deployments <a class=\"heading-anchor-permalink\" href=\"#deployments\">#</a></h1>\n<h3 id=\"static-files\">Static Files <a class=\"heading-anchor-permalink\" href=\"#static-files\">#</a></h3>\n<p>Static files are files that change very infrequently from request to request. As such, they can be cached upon retrieval since you know that they won’t change on the next request (The browser and something like Cloudfront handle this for you). Thus, the best way to deploy static files is to put them in an s3 bucket (which auto-scales) and have something like Cloudfront in front of it which is a CDN. Cloudfront will cache the static files at its point of access in the network making for faster retrieval time and reducing load on the s3 bucket. If no cache of the files exist, it will go to the s3 bucket and retrieve it. To configure this, all you need to do is point Cloudfront to your s3 bucket, and point your domain name to Cloudfront.</p>\n<h3 id=\"load-balancer\">Load Balancer <a class=\"heading-anchor-permalink\" href=\"#load-balancer\">#</a></h3>\n<p>At its core, a load balancer simply accepts incoming traffic and routes it to a number of different application instances. Since it is what is accepting and routing traffic, this acts as a <strong>reverse proxy</strong> and thus can take the role of what nginx does. These incoming requests can then be routed to application instances running with something like <code>gunicorn</code> for <code>Django</code>. Note that nginx can easily configured as a load balancer too, but if you use an elastic load balancer from AWS you do not need it. This is because when running <code>nginx</code> as a reverse proxy something else acts as the web server and serves the responses (e.g. a <code>Django</code> app). Were you using <code>nginx</code> to serve files like <code>index.html</code> and not as a reverse proxy, then you would need to route the load balancer to the <code>nginx</code> instance.</p>\n<h1 id=\"overall-flow-for-decouple-frontend-and-backend-app\">Overall Flow for Decouple Frontend and Backend App <a class=\"heading-anchor-permalink\" href=\"#overall-flow-for-decouple-frontend-and-backend-app\">#</a></h1>\n<h2 id=\"frontend\">Frontend <a class=\"heading-anchor-permalink\" href=\"#frontend\">#</a></h2>\n<p>On push to master, build the frontend distribution files and sync them to an s3 bucket. Put cloudfront in front of the s3 bucket and route all traffic to cloudfront. Then direct any traffic to your domain name to your cloudfront instance. Point your cloudfront instance to your s3 bucket. When a request comes to cloudfront it will either return the cached static file version, or get it from the s3 bucket, cache it, then return that. This reduces load on the s3 bucket and can handle a very very high amount of traffic effectively because s3 scales and accepts requests automatically.</p>\n<h2 id=\"backend\">Backend <a class=\"heading-anchor-permalink\" href=\"#backend\">#</a></h2>\n<h3 id=\"database\">Database <a class=\"heading-anchor-permalink\" href=\"#database\">#</a></h3>\n<p>Create a database instance using one of AWS’s database services. It is never a good idea to try to manage your own database instance containerized or whatever as this can potentially lead to serious data loss issues. This database will have a set of credentials for connecting to it that can be passed in as environment variables to the application instances.</p>\n<h3 id=\"application-servers\">Application servers <a class=\"heading-anchor-permalink\" href=\"#application-servers\">#</a></h3>\n<p>Create a load balancer with a rule/listener to route all traffic to a certain target group. This target group will be comprised of autos-scaled instances running a specified task definition. The task definition will likely be running a specified Dockerfile that is built and pushed to Amazon’s ECR with CI/CD. In this task definition you will pass in the database connection environment variables. The target group - a target is an instance - handles the scaling up and down of all the instances and the load balancing of traffic between the auto-scaled instances.</p>\n",
      "id": 4
    },
    {
      "path": "Django.md",
      "url": "Django.html",
      "content": "# Django Basics\n\n### Queryset API\n\n- `get(pk=<num>)` will return one object of the model instance\n- `filter, exclude` will return querysets\n- Querysets are sliceable like `<ModelName>.objects.all()[:5]`\n- `update` takes keyword args to update a model\n- **All queryset methods,** `update, save`**, etc. except `delete` are also exposed to the model manager to act on all objects**\n- `selected_related()` follows foreign key relationships\n\n### Field Lookups\n\nThese are predefined keyword arguments to queryset filter methods to help filter the data. **They generally take the form `field_name__lookuptype=value` e.g. `Posts.objects.all().filter(pub_date__lte='2016-01-01')` for less than or equal to.**\n\n**Alternatively if you don't have a lookup type you can just do `field_name=value`**. This is just synatactic sugar for the default `field_name__exact=value`.\n\n### Relationship spanning\n\nFiltering can also span relationships. For example, consider an Entry model with a foreign key to a Blog model with a name field. You can filter with `Entry.objects.all().filter(blog__name=value)`\n\n### Related Name\n\nRelated names are set on the model defining a foreign key field with `related_name=<related_name>`. This can be then used to essentially reverse query from the original model all the model instances with foreign keys references to it. Take this example:\n\n```python\nclass Department(models.model):\n    description = models.TextField()\n\n\nclass Employee(models.model):\n    name = models.charField()\n    department = models.ForeignKey(\n        'Department',\n        on_delete=models.CASCADE,\n        related_name=\"employees\"\n    )\n```\n\n\n### select_related\n\nSelect related is a way to pre-populate foreign key relationship data in one query instead of grabbing the initial model, then getting the foreign key representation of it. This accomplishes the same thing as normal indexing but in one less database hit. While that does not make a ton of sense, an example will clear it up\n\n```python\npost = Post.objects.get(id=2) # Hits database to get post\nuser = post.user # Hits database again to get user\n```\n\n```python\npost = Post.objects.select_related('users').get(id=2) #\nuser = post.user # Doesn't hit the database because the post model is already populated with user because of select_related\n```\n\nFrom a department instance you can get all employees with a foreign key reference to that department with `<department_model>.employees.all()`. Without setting the related field you would have to do `<department_model>.employee_set.all()`.\n\n### Authentication Backends\n\nAuthentication backends in Django are simply classes that implement `get_user` and `authenticate` methods given a primary key and credentials respectively. If multiple authentication backends are specified in the configuration, Django will try all available backends until a successful authentication is found\n\n### Custom User Models\n\nIt is recommended to create a custom user model whenever you are starting a new Django project. To maintain all the built in functionality of password hashing, etc you can inherit from `BaseUser` and point `AUTH_USER_MODEL` to the custom user\n\n### Automatic Primary Keys\n\nBy default Django gives every table the field `id = models.AutoField(primary_key=True)` which is an auto updating primary key\n\n### Random Tidbits\n\n- For an app that doesn't have a migrations directory yet, e.g. and app that is just created, you have to run `python manage.py makemigrations <app_name>`\n\n### Meta Classes\n\n##### Models\n\nMeta classes in models represent anything that is not a field, e.g. ordering, column names, etc.\n\n### Model Managers\n\nModel Managers are the most important part of the model as they retrieve instances from the database and provide the database queries. The default model manager is called `objects` and can be referenced by `<model_name>.objects` if not overriden\n\n### Model Logic\n\nIt is best practice to include necessary simple custom model functions in the models. These can go with other model functions such as `__str__` and can be referenced by `<model_Instance>.<method_name>;`\n\n### Pre-defined model methods\n\nDjango provides pre-defined model methods such as `save()` and `delete()` than can be overridden in the model class by simply redefining `save(*args, **kwargs)` and `save(*args, **kwargs)`. Calling `super(*args, **kwargs)` in this methods will ensure the data still gets saved.\n\nTheses pre-defined methods are why, given an example model `Post`\n\n```\nb = Post(text)\nb.save()\n```\n\nsaves a new Post to the database. `save` will update a model if it already exists.\n\nI believe `Post(text)` provides a constructor that can also be accessed by `Post.objects.create(text)`\n\n## Querysets\n\nA query set is essentially a `select` SQL statement with as many filters as desired which act as the `where` statement. Querysets come from the model's manager and thus NOT a model instance.\n\n**A queryset does not actually hit the database until it is iterated through or another form of evaluation.** `<Model></Model>.objects.all()` **will not evaluate the queryset and thus will not hit the database**\n\nYou can easily chain queryset filters together. This chaining is immutable and returns a new queryset every time\n",
      "html": "<h1 id=\"django-basics\">Django Basics <a class=\"heading-anchor-permalink\" href=\"#django-basics\">#</a></h1>\n<h3 id=\"queryset-api\">Queryset API <a class=\"heading-anchor-permalink\" href=\"#queryset-api\">#</a></h3>\n<ul>\n<li><code>get(pk=&lt;num&gt;)</code> will return one object of the model instance</li>\n<li><code>filter, exclude</code> will return querysets</li>\n<li>Querysets are sliceable like <code>&lt;ModelName&gt;.objects.all()[:5]</code></li>\n<li><code>update</code> takes keyword args to update a model</li>\n<li><strong>All queryset methods,</strong> <code>update, save</code><strong>, etc. except <code>delete</code> are also exposed to the model manager to act on all objects</strong></li>\n<li><code>selected_related()</code> follows foreign key relationships</li>\n</ul>\n<h3 id=\"field-lookups\">Field Lookups <a class=\"heading-anchor-permalink\" href=\"#field-lookups\">#</a></h3>\n<p>These are predefined keyword arguments to queryset filter methods to help filter the data. <strong>They generally take the form <code>field_name__lookuptype=value</code> e.g. <code>Posts.objects.all().filter(pub_date__lte='2016-01-01')</code> for less than or equal to.</strong></p>\n<p><strong>Alternatively if you don’t have a lookup type you can just do <code>field_name=value</code></strong>. This is just synatactic sugar for the default <code>field_name__exact=value</code>.</p>\n<h3 id=\"relationship-spanning\">Relationship spanning <a class=\"heading-anchor-permalink\" href=\"#relationship-spanning\">#</a></h3>\n<p>Filtering can also span relationships. For example, consider an Entry model with a foreign key to a Blog model with a name field. You can filter with <code>Entry.objects.all().filter(blog__name=value)</code></p>\n<h3 id=\"related-name\">Related Name <a class=\"heading-anchor-permalink\" href=\"#related-name\">#</a></h3>\n<p>Related names are set on the model defining a foreign key field with <code>related_name=&lt;related_name&gt;</code>. This can be then used to essentially reverse query from the original model all the model instances with foreign keys references to it. Take this example:</p>\n<pre><code class=\"language-python\">class Department(models.model):\n    description = models.TextField()\n\n\nclass Employee(models.model):\n    name = models.charField()\n    department = models.ForeignKey(\n        'Department',\n        on_delete=models.CASCADE,\n        related_name=&quot;employees&quot;\n    )\n</code></pre>\n<h3 id=\"select_related\">select_related <a class=\"heading-anchor-permalink\" href=\"#select_related\">#</a></h3>\n<p>Select related is a way to pre-populate foreign key relationship data in one query instead of grabbing the initial model, then getting the foreign key representation of it. This accomplishes the same thing as normal indexing but in one less database hit. While that does not make a ton of sense, an example will clear it up</p>\n<pre><code class=\"language-python\">post = Post.objects.get(id=2) # Hits database to get post\nuser = post.user # Hits database again to get user\n</code></pre>\n<pre><code class=\"language-python\">post = Post.objects.select_related('users').get(id=2) #\nuser = post.user # Doesn't hit the database because the post model is already populated with user because of select_related\n</code></pre>\n<p>From a department instance you can get all employees with a foreign key reference to that department with <code>&lt;department_model&gt;.employees.all()</code>. Without setting the related field you would have to do <code>&lt;department_model&gt;.employee_set.all()</code>.</p>\n<h3 id=\"authentication-backends\">Authentication Backends <a class=\"heading-anchor-permalink\" href=\"#authentication-backends\">#</a></h3>\n<p>Authentication backends in Django are simply classes that implement <code>get_user</code> and <code>authenticate</code> methods given a primary key and credentials respectively. If multiple authentication backends are specified in the configuration, Django will try all available backends until a successful authentication is found</p>\n<h3 id=\"custom-user-models\">Custom User Models <a class=\"heading-anchor-permalink\" href=\"#custom-user-models\">#</a></h3>\n<p>It is recommended to create a custom user model whenever you are starting a new Django project. To maintain all the built in functionality of password hashing, etc you can inherit from <code>BaseUser</code> and point <code>AUTH_USER_MODEL</code> to the custom user</p>\n<h3 id=\"automatic-primary-keys\">Automatic Primary Keys <a class=\"heading-anchor-permalink\" href=\"#automatic-primary-keys\">#</a></h3>\n<p>By default Django gives every table the field <code>id = models.AutoField(primary_key=True)</code> which is an auto updating primary key</p>\n<h3 id=\"random-tidbits\">Random Tidbits <a class=\"heading-anchor-permalink\" href=\"#random-tidbits\">#</a></h3>\n<ul>\n<li>For an app that doesn’t have a migrations directory yet, e.g. and app that is just created, you have to run <code>python manage.py makemigrations &lt;app_name&gt;</code></li>\n</ul>\n<h3 id=\"meta-classes\">Meta Classes <a class=\"heading-anchor-permalink\" href=\"#meta-classes\">#</a></h3>\n<h5 id=\"models\">Models <a class=\"heading-anchor-permalink\" href=\"#models\">#</a></h5>\n<p>Meta classes in models represent anything that is not a field, e.g. ordering, column names, etc.</p>\n<h3 id=\"model-managers\">Model Managers <a class=\"heading-anchor-permalink\" href=\"#model-managers\">#</a></h3>\n<p>Model Managers are the most important part of the model as they retrieve instances from the database and provide the database queries. The default model manager is called <code>objects</code> and can be referenced by <code>&lt;model_name&gt;.objects</code> if not overriden</p>\n<h3 id=\"model-logic\">Model Logic <a class=\"heading-anchor-permalink\" href=\"#model-logic\">#</a></h3>\n<p>It is best practice to include necessary simple custom model functions in the models. These can go with other model functions such as <code>__str__</code> and can be referenced by <code>&lt;model_Instance&gt;.&lt;method_name&gt;;</code></p>\n<h3 id=\"pre-defined-model-methods\">Pre-defined model methods <a class=\"heading-anchor-permalink\" href=\"#pre-defined-model-methods\">#</a></h3>\n<p>Django provides pre-defined model methods such as <code>save()</code> and <code>delete()</code> than can be overridden in the model class by simply redefining <code>save(*args, **kwargs)</code> and <code>save(*args, **kwargs)</code>. Calling <code>super(*args, **kwargs)</code> in this methods will ensure the data still gets saved.</p>\n<p>Theses pre-defined methods are why, given an example model <code>Post</code></p>\n<pre><code>b = Post(text)\nb.save()\n</code></pre>\n<p>saves a new Post to the database. <code>save</code> will update a model if it already exists.</p>\n<p>I believe <code>Post(text)</code> provides a constructor that can also be accessed by <code>Post.objects.create(text)</code></p>\n<h2 id=\"querysets\">Querysets <a class=\"heading-anchor-permalink\" href=\"#querysets\">#</a></h2>\n<p>A query set is essentially a <code>select</code> SQL statement with as many filters as desired which act as the <code>where</code> statement. Querysets come from the model’s manager and thus NOT a model instance.</p>\n<p><strong>A queryset does not actually hit the database until it is iterated through or another form of evaluation.</strong> <code>&lt;Model&gt;&lt;/Model&gt;.objects.all()</code> <strong>will not evaluate the queryset and thus will not hit the database</strong></p>\n<p>You can easily chain queryset filters together. This chaining is immutable and returns a new queryset every time</p>\n",
      "id": 5
    },
    {
      "path": "Entrepreneurship/Aquired_Episodes.md",
      "url": "Entrepreneurship/Aquired_Episodes.html",
      "content": "# Table of Contents <!-- omit in toc -->\n\n- [Zoom](#zoom)\n- [SpaceX](#spacex)\n- [Google Maps](#google-maps)\n- [WeWork](#wework)\n- [Sequoia Capital](#sequoia-capital)\n- [WhatsApp](#whatsapp)\n- [The Lean Startup and LTSE](#the-lean-startup-and-ltse)\n- [TikTok](#tiktok)\n- [Disney Plus](#disney-plus)\n- [Venmo](#venmo)\n- [Netflix](#netflix)\n- [Tesla](#tesla)\n\n## Zoom\n\n- Founder/CEO: Eric Yuan\n- Focusing on education allows you to continue to capture that value as students graduate into the workforce and bring your product with it\n- Big markets (e.g. video conferencing) go through cycles where a new way of deliverying content/improving the product can unseat incumbents\n\n[Back to top](#table-of-contents)\n\n## SpaceX\n\n- Cut all the subcontractors to the subcontractors to the subcontractors out of the aerospace market to remove dead weight and accumulating cost-plus pricing (where everyone takes 30%)\n  - Reduced cost by a factor of 10\n  - If you ever see a cost-plus model run: they have an incentive to make something as expensive as possible\n- Green-lighted falcon 9 (9 Merlin engines) before Falcon 1 even succeeded\n  - Engine was brilliantly designed to be modular so this could be possible\n- Investing 10's of billions into Starlink - a consortium of 12,000 LEO satellites to provide low-cost internet all over the globe\n  - Traditionally satellite internet has come from GEO satellites and thus is much slower\n\n[Back to top](#table-of-contents)\n\n## Google Maps\n\n## WeWork\n\n- Founder/CEO: Adam Neumann\n  - Refused to give up any control\n  - Tanked his own company\n- VC's - especially Softbank's vision fund - were willing to dump capital in this because they needed to offload funds and they were securing the assets against office buildings\n- Softbank inflated value so much since they were the only ones willing to invest, IPO got canceled, terrible terrible management story\n\n[Back to top](#table-of-contents)\n\n## Sequoia Capital\n\n- Founder: Don Valentine\n  - Basically helped revolutionize the VC industry\n- Focuses on huge market potential and huge ideas, founders kind of second since they can always supplement help\n- Refer to investments as _partnerships_ to build great companies with\n- In the dot-com crash Sequoia **refused** to let the fund lose money - cutting management fees and devoting a ton of effort to salvaging returns - over a matter of principle\n  - This developed a ton of customer loyalty and a huge respect for the firm\n\n[Back to top](#table-of-contents)\n\n## WhatsApp\n\n- Founder: Jan Koum\n- Nailed product/market fit + value proposition -> send messages to people across the globe for \\$.99 instead of the ridiculous plans telephone providers offered\n  - Text messages were actually limited to 120 characters because that was the extra space available in consistent pings from network towers to cell phones. Therefore text messages offered NO additional cost to the telephone providers\n- \\$22 billion acquisition that has yet to be monetized but was a great takeout play by Facebook\n- Hated advertising on the platform and got in a HUGE fight with Facebook over this, leaving like \\$800 million on the table\n\n[Back to top](#table-of-contents)\n\n## The Lean Startup and LTSE\n\n## TikTok\n\n## Disney Plus\n\n- CEO: Bob Iger\n  - Transformed the way Disney was run and brought them out of their dark days\n  - Acquired Pixar, Lucas Films, Fox, to bring great animation technology and IP into the studio\n- The Disney flywheel - centering around content creation - allows them to draw a significant amount of extra revenue from merchandising, parks, etc. from their IP.\n\n[Back to top](#table-of-contents)\n\n## Venmo\n\n- Founder/CEO: Andrew Kortina\n- There is no business model on peer-to-peer payments since cash is free\n  - The only business model is attracting peer-to-peer customers to incentivize merchants to use your platform as a payments option and take a cut\n    - The PayPal business model\n- Acquired by Braintree (for not that much) then PayPal and would not have survived without acquisitions\n- Did a really weird and random marketing stunt - Brian uses venmo - where people had no idea who Brian was and thus it went viral\n\n[Back to top](#table-of-contents)\n\n## Netflix\n\n- CEO: Reid Hastings\n- Two separate eras: DVD rental and streaming\n- Team mentality - not a family - if you are not performing they will have to let you go because it's not fair to the rest of the team\n- Blockbuster actually had great management but corporate raider Carl Icahn kicked out CEO over comp. dispute and installed new guy who \"didn't believe in internet businesses\" and wanted to bring back the hayday of brick and mortar stores lol\n  - Blockbuster online was going to beat Netflix - Netflix even capitulated and offered to sell to Blockbuster - before this self-inflicted wound happened\n\n[Back to top](#table-of-contents)\n\n## Tesla\n",
      "html": "<h1 id=\"table-of-contents\">Table of Contents <!-- omit in toc --> <a class=\"heading-anchor-permalink\" href=\"#table-of-contents\">#</a></h1>\n<ul>\n<li><a href=\"#zoom\">Zoom</a></li>\n<li><a href=\"#spacex\">SpaceX</a></li>\n<li><a href=\"#google-maps\">Google Maps</a></li>\n<li><a href=\"#wework\">WeWork</a></li>\n<li><a href=\"#sequoia-capital\">Sequoia Capital</a></li>\n<li><a href=\"#whatsapp\">WhatsApp</a></li>\n<li><a href=\"#the-lean-startup-and-ltse\">The Lean Startup and LTSE</a></li>\n<li><a href=\"#tiktok\">TikTok</a></li>\n<li><a href=\"#disney-plus\">Disney Plus</a></li>\n<li><a href=\"#venmo\">Venmo</a></li>\n<li><a href=\"#netflix\">Netflix</a></li>\n<li><a href=\"#tesla\">Tesla</a></li>\n</ul>\n<h2 id=\"zoom\">Zoom <a class=\"heading-anchor-permalink\" href=\"#zoom\">#</a></h2>\n<ul>\n<li>Founder/CEO: Eric Yuan</li>\n<li>Focusing on education allows you to continue to capture that value as students graduate into the workforce and bring your product with it</li>\n<li>Big markets (e.g. video conferencing) go through cycles where a new way of deliverying content/improving the product can unseat incumbents</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"spacex\">SpaceX <a class=\"heading-anchor-permalink\" href=\"#spacex\">#</a></h2>\n<ul>\n<li>Cut all the subcontractors to the subcontractors to the subcontractors out of the aerospace market to remove dead weight and accumulating cost-plus pricing (where everyone takes 30%)\n<ul>\n<li>Reduced cost by a factor of 10</li>\n<li>If you ever see a cost-plus model run: they have an incentive to make something as expensive as possible</li>\n</ul>\n</li>\n<li>Green-lighted falcon 9 (9 Merlin engines) before Falcon 1 even succeeded\n<ul>\n<li>Engine was brilliantly designed to be modular so this could be possible</li>\n</ul>\n</li>\n<li>Investing 10’s of billions into Starlink - a consortium of 12,000 LEO satellites to provide low-cost internet all over the globe\n<ul>\n<li>Traditionally satellite internet has come from GEO satellites and thus is much slower</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"google-maps\">Google Maps <a class=\"heading-anchor-permalink\" href=\"#google-maps\">#</a></h2>\n<h2 id=\"wework\">WeWork <a class=\"heading-anchor-permalink\" href=\"#wework\">#</a></h2>\n<ul>\n<li>Founder/CEO: Adam Neumann\n<ul>\n<li>Refused to give up any control</li>\n<li>Tanked his own company</li>\n</ul>\n</li>\n<li>VC’s - especially Softbank’s vision fund - were willing to dump capital in this because they needed to offload funds and they were securing the assets against office buildings</li>\n<li>Softbank inflated value so much since they were the only ones willing to invest, IPO got canceled, terrible terrible management story</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"sequoia-capital\">Sequoia Capital <a class=\"heading-anchor-permalink\" href=\"#sequoia-capital\">#</a></h2>\n<ul>\n<li>Founder: Don Valentine\n<ul>\n<li>Basically helped revolutionize the VC industry</li>\n</ul>\n</li>\n<li>Focuses on huge market potential and huge ideas, founders kind of second since they can always supplement help</li>\n<li>Refer to investments as <em>partnerships</em> to build great companies with</li>\n<li>In the dot-com crash Sequoia <strong>refused</strong> to let the fund lose money - cutting management fees and devoting a ton of effort to salvaging returns - over a matter of principle\n<ul>\n<li>This developed a ton of customer loyalty and a huge respect for the firm</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"whatsapp\">WhatsApp <a class=\"heading-anchor-permalink\" href=\"#whatsapp\">#</a></h2>\n<ul>\n<li>Founder: Jan Koum</li>\n<li>Nailed product/market fit + value proposition -&gt; send messages to people across the globe for $.99 instead of the ridiculous plans telephone providers offered\n<ul>\n<li>Text messages were actually limited to 120 characters because that was the extra space available in consistent pings from network towers to cell phones. Therefore text messages offered NO additional cost to the telephone providers</li>\n</ul>\n</li>\n<li>$22 billion acquisition that has yet to be monetized but was a great takeout play by Facebook</li>\n<li>Hated advertising on the platform and got in a HUGE fight with Facebook over this, leaving like $800 million on the table</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"the-lean-startup-and-ltse\">The Lean Startup and LTSE <a class=\"heading-anchor-permalink\" href=\"#the-lean-startup-and-ltse\">#</a></h2>\n<h2 id=\"tiktok\">TikTok <a class=\"heading-anchor-permalink\" href=\"#tiktok\">#</a></h2>\n<h2 id=\"disney-plus\">Disney Plus <a class=\"heading-anchor-permalink\" href=\"#disney-plus\">#</a></h2>\n<ul>\n<li>CEO: Bob Iger\n<ul>\n<li>Transformed the way Disney was run and brought them out of their dark days</li>\n<li>Acquired Pixar, Lucas Films, Fox, to bring great animation technology and IP into the studio</li>\n</ul>\n</li>\n<li>The Disney flywheel - centering around content creation - allows them to draw a significant amount of extra revenue from merchandising, parks, etc. from their IP.</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"venmo\">Venmo <a class=\"heading-anchor-permalink\" href=\"#venmo\">#</a></h2>\n<ul>\n<li>Founder/CEO: Andrew Kortina</li>\n<li>There is no business model on peer-to-peer payments since cash is free\n<ul>\n<li>The only business model is attracting peer-to-peer customers to incentivize merchants to use your platform as a payments option and take a cut\n<ul>\n<li>The PayPal business model</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Acquired by Braintree (for not that much) then PayPal and would not have survived without acquisitions</li>\n<li>Did a really weird and random marketing stunt - Brian uses venmo - where people had no idea who Brian was and thus it went viral</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"netflix\">Netflix <a class=\"heading-anchor-permalink\" href=\"#netflix\">#</a></h2>\n<ul>\n<li>CEO: Reid Hastings</li>\n<li>Two separate eras: DVD rental and streaming</li>\n<li>Team mentality - not a family - if you are not performing they will have to let you go because it’s not fair to the rest of the team</li>\n<li>Blockbuster actually had great management but corporate raider Carl Icahn kicked out CEO over comp. dispute and installed new guy who “didn’t believe in internet businesses” and wanted to bring back the hayday of brick and mortar stores lol\n<ul>\n<li>Blockbuster online was going to beat Netflix - Netflix even capitulated and offered to sell to Blockbuster - before this self-inflicted wound happened</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"tesla\">Tesla <a class=\"heading-anchor-permalink\" href=\"#tesla\">#</a></h2>\n",
      "id": 6
    },
    {
      "path": "Frontend.md",
      "url": "Frontend.html",
      "content": "#### Color changes\n\nProper design frameworks have a standard color set. To theme your app you can easily darken and lighten each of the colors with darken or lighten classes. This produces colors that go together well.\n\n### Icons\n\nIcons always act weird in Vue, you cannot toggle their classes dynamically and they weren't appearing when accessing by `wrapper.find` in just\n",
      "html": "<h4 id=\"color-changes\">Color changes <a class=\"heading-anchor-permalink\" href=\"#color-changes\">#</a></h4>\n<p>Proper design frameworks have a standard color set. To theme your app you can easily darken and lighten each of the colors with darken or lighten classes. This produces colors that go together well.</p>\n<h3 id=\"icons\">Icons <a class=\"heading-anchor-permalink\" href=\"#icons\">#</a></h3>\n<p>Icons always act weird in Vue, you cannot toggle their classes dynamically and they weren’t appearing when accessing by <code>wrapper.find</code> in just</p>\n",
      "id": 7
    },
    {
      "path": "JavaScript.md",
      "url": "JavaScript.html",
      "content": "### Rendering Engines vs. Javascript Engine\n\nA Javascript engine, like `v8` is the engine that processes and runs the webpage JavaScript. \"Hot\" code paths are optimized for quicker execution (e.g. looking up a property in an object directly). The browser JavaScript engine queries the rendering engine for displaying things.\n\nA browser rendering engine, e.g. `Gecko` and `Webkit` displays the webpages written in the markup language. This interprets `HTML`, `CSS`, `XML`, images, etc. and produces the final webpage for the browser.\n",
      "html": "<h3 id=\"rendering-engines-vs.-javascript-engine\">Rendering Engines vs. Javascript Engine <a class=\"heading-anchor-permalink\" href=\"#rendering-engines-vs.-javascript-engine\">#</a></h3>\n<p>A Javascript engine, like <code>v8</code> is the engine that processes and runs the webpage JavaScript. “Hot” code paths are optimized for quicker execution (e.g. looking up a property in an object directly). The browser JavaScript engine queries the rendering engine for displaying things.</p>\n<p>A browser rendering engine, e.g. <code>Gecko</code> and <code>Webkit</code> displays the webpages written in the markup language. This interprets <code>HTML</code>, <code>CSS</code>, <code>XML</code>, images, etc. and produces the final webpage for the browser.</p>\n",
      "id": 8
    },
    {
      "path": "Python.md",
      "url": "Python.html",
      "content": "# Python Basics\n\n### Meta Classes\n\nMeta Classes are classes where instances are of a class, rather than an instance of a class. Instances of meta classes can be used to define class behavior. Not a ton of languages support meta classes and the implementations differ (Python does).\n\n### Keyword Arguments\n\nPython3 (and 2) supports keyword arguments e.g. `myFunc(b=2, a=1)` where the order of the parameters passed doesn't matter. The above is equivalent to `myFunc(a=1, b=2)`. You can mandate arguments be passed as keywords\n\n### Python \\* Operator\n\n\\*args unpacks an iteratable object into its individual items. For example, if args = [ 1, 2, 3, 4 ], \\*args will become 1,2,3,4. This is the same as the spread operator `...` in Javascript. This is argument `unpacking` it unpacks an iterable object into its individual components\n\n### Python \\*\\* Operator\n\nSimilar to the \\* operator \\*\\* unpacks a dictionary into keyword arguments. If `dict = {a: 1, b: 2}` then `**dict` turns into a=1, b=2. Thus in a function myFunc(\\*\\*dict) this is transformed into named keyword arguments with `myFunc(a=1, b=2)`\n\n### Decorators\n\n### Function Basics\n\nFunctions are first class objects in python. This means they can be passed around as arguments, etc. In general, a first class object is an object that has all the rights and abilities as other variables in the programming languages. Things that can't be passed as arguments, e.g. functions in `C` are called second-class arguments.\n\nYou can define functions inside other functions - these are called `inner functions`. Inner functions are not defined until their parent function is called. They are locally scoped to the parent function.\n\nYou can also return functions from other functions. Just like in JavaScript, the function name refers to the function itself where invoking it returns the value\n\nDecorators just wrap a function and modify its behavior. What this does is calls a function by passing in a function which then returns a new modified function. The `@` symbol is syntactic sugar for this entire thing. So `@<decorator_function>` above another function will pass the function that is below it into `<decorator_function>` and the function below it will then have the modified behavior when called.\n\nThis may not have been worded the best so here is an example:\n\n```python\ndef do_twice(func):\n    def wrapper_do_twice(*args, **kwargs):\n        func(*args, **kwargs)\n        func(*args, **kwargs)\n    return wrapper_do_twice\n\n@do_twice\ndef printWord(word):\n    print(word)\n```\n\nCalling `printWord` will now print the word twice. You always want to include `*args, **kwargs` in decorators so you can pass in an arbitrary number of arguments.\n\n### Introspection vs Reflection\n\n`Introspection` is the ability for an object to know about itself at runtime. `Reflection` is one step further: the ability to modify itself at runtime.\n",
      "html": "<h1 id=\"python-basics\">Python Basics <a class=\"heading-anchor-permalink\" href=\"#python-basics\">#</a></h1>\n<h3 id=\"meta-classes\">Meta Classes <a class=\"heading-anchor-permalink\" href=\"#meta-classes\">#</a></h3>\n<p>Meta Classes are classes where instances are of a class, rather than an instance of a class. Instances of meta classes can be used to define class behavior. Not a ton of languages support meta classes and the implementations differ (Python does).</p>\n<h3 id=\"keyword-arguments\">Keyword Arguments <a class=\"heading-anchor-permalink\" href=\"#keyword-arguments\">#</a></h3>\n<p>Python3 (and 2) supports keyword arguments e.g. <code>myFunc(b=2, a=1)</code> where the order of the parameters passed doesn’t matter. The above is equivalent to <code>myFunc(a=1, b=2)</code>. You can mandate arguments be passed as keywords</p>\n<h3 id=\"python-*-operator\">Python * Operator <a class=\"heading-anchor-permalink\" href=\"#python-*-operator\">#</a></h3>\n<p>*args unpacks an iteratable object into its individual items. For example, if args = [ 1, 2, 3, 4 ], *args will become 1,2,3,4. This is the same as the spread operator <code>...</code> in Javascript. This is argument <code>unpacking</code> it unpacks an iterable object into its individual components</p>\n<h3 id=\"python-**-operator\">Python ** Operator <a class=\"heading-anchor-permalink\" href=\"#python-**-operator\">#</a></h3>\n<p>Similar to the * operator ** unpacks a dictionary into keyword arguments. If <code>dict = {a: 1, b: 2}</code> then <code>**dict</code> turns into a=1, b=2. Thus in a function myFunc(**dict) this is transformed into named keyword arguments with <code>myFunc(a=1, b=2)</code></p>\n<h3 id=\"decorators\">Decorators <a class=\"heading-anchor-permalink\" href=\"#decorators\">#</a></h3>\n<h3 id=\"function-basics\">Function Basics <a class=\"heading-anchor-permalink\" href=\"#function-basics\">#</a></h3>\n<p>Functions are first class objects in python. This means they can be passed around as arguments, etc. In general, a first class object is an object that has all the rights and abilities as other variables in the programming languages. Things that can’t be passed as arguments, e.g. functions in <code>C</code> are called second-class arguments.</p>\n<p>You can define functions inside other functions - these are called <code>inner functions</code>. Inner functions are not defined until their parent function is called. They are locally scoped to the parent function.</p>\n<p>You can also return functions from other functions. Just like in JavaScript, the function name refers to the function itself where invoking it returns the value</p>\n<p>Decorators just wrap a function and modify its behavior. What this does is calls a function by passing in a function which then returns a new modified function. The <code>@</code> symbol is syntactic sugar for this entire thing. So <code>@&lt;decorator_function&gt;</code> above another function will pass the function that is below it into <code>&lt;decorator_function&gt;</code> and the function below it will then have the modified behavior when called.</p>\n<p>This may not have been worded the best so here is an example:</p>\n<pre><code class=\"language-python\">def do_twice(func):\n    def wrapper_do_twice(*args, **kwargs):\n        func(*args, **kwargs)\n        func(*args, **kwargs)\n    return wrapper_do_twice\n\n@do_twice\ndef printWord(word):\n    print(word)\n</code></pre>\n<p>Calling <code>printWord</code> will now print the word twice. You always want to include <code>*args, **kwargs</code> in decorators so you can pass in an arbitrary number of arguments.</p>\n<h3 id=\"introspection-vs-reflection\">Introspection vs Reflection <a class=\"heading-anchor-permalink\" href=\"#introspection-vs-reflection\">#</a></h3>\n<p><code>Introspection</code> is the ability for an object to know about itself at runtime. <code>Reflection</code> is one step further: the ability to modify itself at runtime.</p>\n",
      "id": 9
    },
    {
      "path": "TCP-IP/IP_Addresses.md",
      "url": "TCP-IP/IP_Addresses.html",
      "content": "### IP Addresses\n\nIPv4 addresses are 4 byte (32 bit) values that describe a host machine. The four bytes are written in dotted notation, e.g. `140.2.1.12`. Each set of 8 bits can range from 0 to 255: `0.0.0.0` to `255.255.255.255`. \n\nThere are different classes of IP addresses which detail how many of the 32 bits correspond to the `Network ID` and how many of the 32 bits correspond to the `Host ID`. Class B IP addresses which are probably the most common have 16 bits for the `Network ID` (the first 2 dotted stanzas) and `16 bits` for the `Host ID`. E.g. `140.2.1.12` has a `Network ID` of `140.2` and a `Host ID` of `1.12` if divided up this way.",
      "html": "<h3 id=\"ip-addresses\">IP Addresses <a class=\"heading-anchor-permalink\" href=\"#ip-addresses\">#</a></h3>\n<p>IPv4 addresses are 4 byte (32 bit) values that describe a host machine. The four bytes are written in dotted notation, e.g. <code>140.2.1.12</code>. Each set of 8 bits can range from 0 to 255: <code>0.0.0.0</code> to <code>255.255.255.255</code>.</p>\n<p>There are different classes of IP addresses which detail how many of the 32 bits correspond to the <code>Network ID</code> and how many of the 32 bits correspond to the <code>Host ID</code>. Class B IP addresses which are probably the most common have 16 bits for the <code>Network ID</code> (the first 2 dotted stanzas) and <code>16 bits</code> for the <code>Host ID</code>. E.g. <code>140.2.1.12</code> has a <code>Network ID</code> of <code>140.2</code> and a <code>Host ID</code> of <code>1.12</code> if divided up this way.</p>\n",
      "id": 10
    },
    {
      "path": "TCP-IP/IP_Subnets.md",
      "url": "TCP-IP/IP_Subnets.html",
      "content": "\n[[IP_Addresses]]\t]]\n\n### Subnets\n\nSubnets allow you to divide the 16 bits of `Host ID` even further into a `Subnet ID` and a smaller `Host ID`. For example, 8 of these 16 bits can then become a `Subnet ID` with the last 8 being the `Host ID`. This allows network administrators to divide up the IP address (`Network ID`) they are assigned into 254 subnets with a maximum of 254 subnets per host. In this case `140.2.1.12` would be broken up as follows: `140.2` for the `Network ID`, `1` for the `Subnet ID` and `12` for the `Host ID`.\n\n### Subnet Masks\n\nWhile in the previous examles the `Subnet ID` only occupied 8 bits and the `Host ID` occupied the last 8 bits, this is not always true. The `Subnet Mask` determines which bits correspond to the `Network ID` and `Subnet ID` and which bits corresond for the `Host ID`. It is represented as follows: for each bit NOT corresponding to a `Host ID` it is set to one. For each bit corresponding to the `Host ID` it is set to 0. In the above example, the `Subnet Mask` would be 24 1's followed by 8 0's. \n\nThis case would be represented in dotted notation as `255.255.255.0` or in Hex as `0xffffff00`. Different breaks between `Subnet ID` and `Host ID` can be described by different subnet masks. Subnets and Subnet Masks allow IP routing tables to be much smaller as only one entry is needed for the router to each subnet instead of a list of all machines on the network. ",
      "html": "<p>[[IP_Addresses]]\t]]</p>\n<h3 id=\"subnets\">Subnets <a class=\"heading-anchor-permalink\" href=\"#subnets\">#</a></h3>\n<p>Subnets allow you to divide the 16 bits of <code>Host ID</code> even further into a <code>Subnet ID</code> and a smaller <code>Host ID</code>. For example, 8 of these 16 bits can then become a <code>Subnet ID</code> with the last 8 being the <code>Host ID</code>. This allows network administrators to divide up the IP address (<code>Network ID</code>) they are assigned into 254 subnets with a maximum of 254 subnets per host. In this case <code>140.2.1.12</code> would be broken up as follows: <code>140.2</code> for the <code>Network ID</code>, <code>1</code> for the <code>Subnet ID</code> and <code>12</code> for the <code>Host ID</code>.</p>\n<h3 id=\"subnet-masks\">Subnet Masks <a class=\"heading-anchor-permalink\" href=\"#subnet-masks\">#</a></h3>\n<p>While in the previous examles the <code>Subnet ID</code> only occupied 8 bits and the <code>Host ID</code> occupied the last 8 bits, this is not always true. The <code>Subnet Mask</code> determines which bits correspond to the <code>Network ID</code> and <code>Subnet ID</code> and which bits corresond for the <code>Host ID</code>. It is represented as follows: for each bit NOT corresponding to a <code>Host ID</code> it is set to one. For each bit corresponding to the <code>Host ID</code> it is set to 0. In the above example, the <code>Subnet Mask</code> would be 24 1’s followed by 8 0’s.</p>\n<p>This case would be represented in dotted notation as <code>255.255.255.0</code> or in Hex as <code>0xffffff00</code>. Different breaks between <code>Subnet ID</code> and <code>Host ID</code> can be described by different subnet masks. Subnets and Subnet Masks allow IP routing tables to be much smaller as only one entry is needed for the router to each subnet instead of a list of all machines on the network.</p>\n",
      "id": 11
    },
    {
      "path": "TCP-IP/Network_Layers.md",
      "url": "TCP-IP/Network_Layers.html",
      "content": "# Layers\n\nThere are four main layers working for these protocols. In order of decreasing abstraction:\n\n- application\n- Transport (TCP/UDP)\n- Network (IP)\n- Link (Device Drivers)\n\nThe application is typically a user process while the other three layers are typically kernel functions. \n\n**As data is passed down throughout the layers, each layer adds information to the data by prepending headers or adding trailing information until the packet gets to the link layer and is sent**\n\n",
      "html": "<h1 id=\"layers\">Layers <a class=\"heading-anchor-permalink\" href=\"#layers\">#</a></h1>\n<p>There are four main layers working for these protocols. In order of decreasing abstraction:</p>\n<ul>\n<li>application</li>\n<li>Transport (TCP/UDP)</li>\n<li>Network (IP)</li>\n<li>Link (Device Drivers)</li>\n</ul>\n<p>The application is typically a user process while the other three layers are typically kernel functions.</p>\n<p><strong>As data is passed down throughout the layers, each layer adds information to the data by prepending headers or adding trailing information until the packet gets to the link layer and is sent</strong></p>\n",
      "id": 12
    },
    {
      "path": "TCP-IP/TCP-IP.md",
      "url": "TCP-IP/TCP-IP.html",
      "content": "[[Network_Layers]]\n[[Unix_Specific]]\n[[IP_Subnets]]",
      "html": "<p>[[Network_Layers]]\n[[Unix_Specific]]\n[[IP_Subnets]]</p>\n",
      "id": 13
    },
    {
      "path": "TCP-IP/Unix_Specific.md",
      "url": "TCP-IP/Unix_Specific.html",
      "content": "- `/etc/services`\n\t- This file lists all well-known port numbers for applications (e.g. ssh on port 22, etc.)\n\n- network `bridge`\n\t- A `bridge` is a connection between two network interfaces in the link layer. Thus the two interfaces will appear as one to the network layer. Docker uses this",
      "html": "<ul>\n<li>\n<p><code>/etc/services</code></p>\n<ul>\n<li>This file lists all well-known port numbers for applications (e.g. ssh on port 22, etc.)</li>\n</ul>\n</li>\n<li>\n<p>network <code>bridge</code></p>\n<ul>\n<li>A <code>bridge</code> is a connection between two network interfaces in the link layer. Thus the two interfaces will appear as one to the network layer. Docker uses this</li>\n</ul>\n</li>\n</ul>\n",
      "id": 14
    },
    {
      "path": "Vue.md",
      "url": "Vue.html",
      "content": "### Vue Tidbits\n\nVue supports passing invoked methods into event handlers like `@click=myFunc(myVal)` because `myFunc` is not actually being executed until the click event is registered.\n\n- Vue does not bubble up events through multiple layers of parent components. For native events you can listen to the native browser event (which will bubble) with `@<event>.native`\n\n## Vue Material Design Frameworks\n\nAfter much chagrin messing around with `flexbox` and UI/UX design over the past however many months I have finally decided to use a design framework - it is vastly superior to anything I could come up with.\n\n### Vuetify\n\nMore complex, great documentation, and more of a sacrifice in control over your app. E.g. using `<v-col col=8 lg=12>` instead of `<div class=\"col col-lg-8\">`. However, much of the bootstrap API is implemented. Beautiful UI components available. Probably going to use `Vuetify` in the future.\n\n#### Vue Material\n\nRelatively simple component framework for `google material design`. Implements much of the `boostrap` display, margin, and padding classes. Easy to use but lacks somewhat in configuration.\n\n### Testing with Vuetify\n\nYou can access `Vuetify` components specifically with `wrapper.find({name: <ComponentName>})` but this seems to not work sometimes. It may be a much better practice to just put a `.v-<component>-test` class on the `Vuetify component` for matching\n\nAfter trying it out this is a **much** better approach\n\nTest for CI/CD!\n",
      "html": "<h3 id=\"vue-tidbits\">Vue Tidbits <a class=\"heading-anchor-permalink\" href=\"#vue-tidbits\">#</a></h3>\n<p>Vue supports passing invoked methods into event handlers like <code>@click=myFunc(myVal)</code> because <code>myFunc</code> is not actually being executed until the click event is registered.</p>\n<ul>\n<li>Vue does not bubble up events through multiple layers of parent components. For native events you can listen to the native browser event (which will bubble) with <code>@&lt;event&gt;.native</code></li>\n</ul>\n<h2 id=\"vue-material-design-frameworks\">Vue Material Design Frameworks <a class=\"heading-anchor-permalink\" href=\"#vue-material-design-frameworks\">#</a></h2>\n<p>After much chagrin messing around with <code>flexbox</code> and UI/UX design over the past however many months I have finally decided to use a design framework - it is vastly superior to anything I could come up with.</p>\n<h3 id=\"vuetify\">Vuetify <a class=\"heading-anchor-permalink\" href=\"#vuetify\">#</a></h3>\n<p>More complex, great documentation, and more of a sacrifice in control over your app. E.g. using <code>&lt;v-col col=8 lg=12&gt;</code> instead of <code>&lt;div class=&quot;col col-lg-8&quot;&gt;</code>. However, much of the bootstrap API is implemented. Beautiful UI components available. Probably going to use <code>Vuetify</code> in the future.</p>\n<h4 id=\"vue-material\">Vue Material <a class=\"heading-anchor-permalink\" href=\"#vue-material\">#</a></h4>\n<p>Relatively simple component framework for <code>google material design</code>. Implements much of the <code>boostrap</code> display, margin, and padding classes. Easy to use but lacks somewhat in configuration.</p>\n<h3 id=\"testing-with-vuetify\">Testing with Vuetify <a class=\"heading-anchor-permalink\" href=\"#testing-with-vuetify\">#</a></h3>\n<p>You can access <code>Vuetify</code> components specifically with <code>wrapper.find({name: &lt;ComponentName&gt;})</code> but this seems to not work sometimes. It may be a much better practice to just put a <code>.v-&lt;component&gt;-test</code> class on the <code>Vuetify component</code> for matching</p>\n<p>After trying it out this is a <strong>much</strong> better approach</p>\n<p>Test for CI/CD!</p>\n",
      "id": 15
    },
    {
      "path": "docker-compose.md",
      "url": "docker-compose.html",
      "content": "### docker-compose Quick Tips\n\n- run `docker-compose run <service> <command>` to run a service with a one-time command. E.g. `docker-compose run backend bash` to run `backend` interactively without actually starting Django\n",
      "html": "<h3 id=\"docker-compose-quick-tips\">docker-compose Quick Tips <a class=\"heading-anchor-permalink\" href=\"#docker-compose-quick-tips\">#</a></h3>\n<ul>\n<li>run <code>docker-compose run &lt;service&gt; &lt;command&gt;</code> to run a service with a one-time command. E.g. <code>docker-compose run backend bash</code> to run <code>backend</code> interactively without actually starting Django</li>\n</ul>\n",
      "id": 16
    }
  ]
}