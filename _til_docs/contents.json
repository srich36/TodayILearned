{
  "paths": [
    {
      "type": "file",
      "value": "index.md"
    },
    {
      "type": "file",
      "value": "Authentication.md"
    },
    {
      "type": "file",
      "value": "DNS_Config.md"
    },
    {
      "type": "file",
      "value": "Databases.md"
    },
    {
      "type": "file",
      "value": "Design.md"
    },
    {
      "type": "file",
      "value": "Distributed_Systems.md"
    },
    {
      "type": "dir",
      "name": "Django",
      "children": [
        {
          "type": "file",
          "value": "Django/Django.md"
        },
        {
          "type": "file",
          "value": "Django/Migrations.md"
        },
        {
          "type": "file",
          "value": "Django/Models.md"
        },
        {
          "type": "file",
          "value": "Django/Querysets.md"
        }
      ]
    },
    {
      "type": "file",
      "value": "Encoding.md"
    },
    {
      "type": "dir",
      "name": "Entrepreneurship",
      "children": [
        {
          "type": "file",
          "value": "Entrepreneurship/Acronyms.md"
        },
        {
          "type": "file",
          "value": "Entrepreneurship/Aquired_Episodes.md"
        },
        {
          "type": "file",
          "value": "Entrepreneurship/Business_Analysis.md"
        },
        {
          "type": "file",
          "value": "Entrepreneurship/Terminology.md"
        },
        {
          "type": "file",
          "value": "Entrepreneurship/Venture_Capital.md"
        }
      ]
    },
    {
      "type": "file",
      "value": "File_Sharing.md"
    },
    {
      "type": "file",
      "value": "Frontend.md"
    },
    {
      "type": "file",
      "value": "HTML.md"
    },
    {
      "type": "dir",
      "name": "JavaScript",
      "children": [
        {
          "type": "file",
          "value": "JavaScript/Flux.md"
        },
        {
          "type": "file",
          "value": "JavaScript/JavaScript.md"
        },
        {
          "type": "dir",
          "name": "React",
          "children": [
            {
              "type": "file",
              "value": "JavaScript/React/Hooks.md"
            },
            {
              "type": "file",
              "value": "JavaScript/React/Material-ui.md"
            },
            {
              "type": "file",
              "value": "JavaScript/React/React-router.md"
            },
            {
              "type": "file",
              "value": "JavaScript/React/React.md"
            },
            {
              "type": "file",
              "value": "JavaScript/React/Testing.md"
            }
          ]
        },
        {
          "type": "file",
          "value": "JavaScript/SPAs.md"
        },
        {
          "type": "file",
          "value": "JavaScript/Vue.md"
        }
      ]
    },
    {
      "type": "file",
      "value": "Python.md"
    },
    {
      "type": "file",
      "value": "SCSS.md"
    },
    {
      "type": "file",
      "value": "SoftwareDev_BestPractices.md"
    },
    {
      "type": "dir",
      "name": "TCP-IP",
      "children": [
        {
          "type": "file",
          "value": "TCP-IP/ARP-RARP.md"
        },
        {
          "type": "file",
          "value": "TCP-IP/ICMP.md"
        },
        {
          "type": "file",
          "value": "TCP-IP/IP_Addresses.md"
        },
        {
          "type": "file",
          "value": "TCP-IP/IP_Fragmentation.md"
        },
        {
          "type": "file",
          "value": "TCP-IP/IP_Subnets.md"
        },
        {
          "type": "file",
          "value": "TCP-IP/Network_Layers.md"
        },
        {
          "type": "file",
          "value": "TCP-IP/Routing.md"
        },
        {
          "type": "file",
          "value": "TCP-IP/TCP-IP.md"
        },
        {
          "type": "file",
          "value": "TCP-IP/Unix_Specific.md"
        }
      ]
    },
    {
      "type": "file",
      "value": "docker-compose.md"
    }
  ],
  "contents": [
    {
      "path": "index.md",
      "url": "index.html",
      "content": "# Collection of Today I Learned (TIL)\n\nThis repository serves as a random collection of TIL's over a random period of days. Some of these were review and others were new concepts. Hope you enjoy!\n\nFor any suggestions, corrections, or issues, feel free to file an issue on my today I learned [github repository](https://github.com/srich36/TodayILearned/issues).\n",
      "html": "<h1 id=\"collection-of-today-i-learned-(til)\">Collection of Today I Learned (TIL) <a class=\"heading-anchor-permalink\" href=\"#collection-of-today-i-learned-(til)\">#</a></h1>\n<p>This repository serves as a random collection of TIL’s over a random period of days. Some of these were review and others were new concepts. Hope you enjoy!</p>\n<p>For any suggestions, corrections, or issues, feel free to file an issue on my today I learned <a href=\"https://github.com/srich36/TodayILearned/issues\">github repository</a>.</p>\n",
      "id": 0
    },
    {
      "path": "Authentication.md",
      "url": "Authentication.html",
      "content": "# Client Side OAuth Flow\n\nThe `oauth` process is as follows:\n\n1. The client makes a request to the oauth server and the user authorizes permissions.\n2. Upon authorization, the oauth server (e.g. Facebook, Google), redirects to a specified url with a `code` as a query param. I believe you can do this on the frontend with `postmessage` as the redirect url.\n3. The client then exchanges the `code` with the Oauth server for an `access token`.\n4. This access token can then be used to pass to an application backend like `django-rest-framework-social-auth2` for authentication/user creation\n\nSteps 2 and 3 may be blurred together.\n",
      "html": "<h1 id=\"client-side-oauth-flow\">Client Side OAuth Flow <a class=\"heading-anchor-permalink\" href=\"#client-side-oauth-flow\">#</a></h1>\n<p>The <code>oauth</code> process is as follows:</p>\n<ol>\n<li>The client makes a request to the oauth server and the user authorizes permissions.</li>\n<li>Upon authorization, the oauth server (e.g. Facebook, Google), redirects to a specified url with a <code>code</code> as a query param. I believe you can do this on the frontend with <code>postmessage</code> as the redirect url.</li>\n<li>The client then exchanges the <code>code</code> with the Oauth server for an <code>access token</code>.</li>\n<li>This access token can then be used to pass to an application backend like <code>django-rest-framework-social-auth2</code> for authentication/user creation</li>\n</ol>\n<p>Steps 2 and 3 may be blurred together.</p>\n",
      "id": 1
    },
    {
      "path": "DNS_Config.md",
      "url": "DNS_Config.html",
      "content": "# DNS Records\n\n- A `CNAME` record is an alias that points from one domain name alias to the actual domain name. On namecheap this can be done by mapping the `www` subdomain to the actual domain name for example.\n- An `A` record maps the canonical (actual) domain name to the IP address hosting the website\n\nRecall, when you purchase a domain you purchase a top level domain (TLD) which is `<domain>.<TLD>` (e.g. `example.com`). `www` is a subdomain so you must map that alias to the actual canonical domain name, which in this case is `example.com`.\n\n",
      "html": "<h1 id=\"dns-records\">DNS Records <a class=\"heading-anchor-permalink\" href=\"#dns-records\">#</a></h1>\n<ul>\n<li>A <code>CNAME</code> record is an alias that points from one domain name alias to the actual domain name. On namecheap this can be done by mapping the <code>www</code> subdomain to the actual domain name for example.</li>\n<li>An <code>A</code> record maps the canonical (actual) domain name to the IP address hosting the website</li>\n</ul>\n<p>Recall, when you purchase a domain you purchase a top level domain (TLD) which is <code>&lt;domain&gt;.&lt;TLD&gt;</code> (e.g. <code>example.com</code>). <code>www</code> is a subdomain so you must map that alias to the actual canonical domain name, which in this case is <code>example.com</code>.</p>\n",
      "id": 2
    },
    {
      "path": "Databases.md",
      "url": "Databases.html",
      "content": "## Transactional DDL\n\n- DDL (Database Design Language), e.g. `SQL`\n- Transactional DDL is a paradigm where all database operations occur in a transaction\n  - They are treated as a single, coherent operation\n  - They either all go through or none at all\n  - `Postgres` and `SQLite` supports transactional DDL but `MySQL` does not\n  - This is a super important concept - non-transactional DDL can leave your database in an inconsistent state if not everything goes through\n- Statements that occur in a transaction block can be rolled back",
      "html": "<h2 id=\"transactional-ddl\">Transactional DDL <a class=\"heading-anchor-permalink\" href=\"#transactional-ddl\">#</a></h2>\n<ul>\n<li>DDL (Database Design Language), e.g. <code>SQL</code></li>\n<li>Transactional DDL is a paradigm where all database operations occur in a transaction\n<ul>\n<li>They are treated as a single, coherent operation</li>\n<li>They either all go through or none at all</li>\n<li><code>Postgres</code> and <code>SQLite</code> supports transactional DDL but <code>MySQL</code> does not</li>\n<li>This is a super important concept - non-transactional DDL can leave your database in an inconsistent state if not everything goes through</li>\n</ul>\n</li>\n<li>Statements that occur in a transaction block can be rolled back</li>\n</ul>\n",
      "id": 3
    },
    {
      "path": "Design.md",
      "url": "Design.html",
      "content": "#### Icons\n\n- Font icons are icons from fonts that support ligatures, where svg icons are made out of svg's\n  - svg's load faster\n\n#### Color\n\n- Pallette: A collection of colors, i.e. hues and shades\n\n## General Guidelines\n\n- Links should have specific text (e.g. [learn more](#)), not something like [click here](#)\n- `normalize.css` - A library that provides a standard set of CSS styles for HTML elements\n  - While you don't have to use `normalize.css`, you should set standard sensible styles for DOM elements\n- Use radio buttons only when the user needs to see all the options. Otherwise, consider using something like a dropdown\n",
      "html": "<h4 id=\"icons\">Icons <a class=\"heading-anchor-permalink\" href=\"#icons\">#</a></h4>\n<ul>\n<li>Font icons are icons from fonts that support ligatures, where svg icons are made out of svg’s\n<ul>\n<li>svg’s load faster</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"color\">Color <a class=\"heading-anchor-permalink\" href=\"#color\">#</a></h4>\n<ul>\n<li>Pallette: A collection of colors, i.e. hues and shades</li>\n</ul>\n<h2 id=\"general-guidelines\">General Guidelines <a class=\"heading-anchor-permalink\" href=\"#general-guidelines\">#</a></h2>\n<ul>\n<li>Links should have specific text (e.g. <a href=\"#\">learn more</a>), not something like <a href=\"#\">click here</a></li>\n<li><code>normalize.css</code> - A library that provides a standard set of CSS styles for HTML elements\n<ul>\n<li>While you don’t have to use <code>normalize.css</code>, you should set standard sensible styles for DOM elements</li>\n</ul>\n</li>\n<li>Use radio buttons only when the user needs to see all the options. Otherwise, consider using something like a dropdown</li>\n</ul>\n",
      "id": 4
    },
    {
      "path": "Distributed_Systems.md",
      "url": "Distributed_Systems.html",
      "content": "# Networking Architecture\n\n### Reverse Proxy\n\nA `reverse proxy` is a proxy that sits in front of the backend/web server and receives incoming requests and then processes those requests routing them to the correct server. In this way you can configure something like `nginx` to be a load balancer as it receives incoming requests and load balances them to different server instances.\n\n### Forward Proxy\n\nFor a `forward proxy` client requests immediately go through a proxy server which then routes those requests to the domain specified in the request. This domain then may point to a `reverse proxy` which routes the requests to different microservices in the application.\n\n### Microservice Architecture\n\nA collection of instances, db, cache, application server, that are isolated (mostly in Docker containers) and can communicate with each other on the network. If you have a microservice application server for example, you can load balance incoming requests (e.g. through an `nginx` configuration) to the different application server instances on the network. This allows you to `horizontally scale` your application as you can easily spin up new instances of whatever layer, application server, db, etc. that needs more computing power.\n\n### Sidecar Paradigm (ngnix)\n\nSidecars are a way of structuring application architectures so that for individual microservices to talk to one another they have to go through a proxy (called a sidecar). This allows you to take all the ssl and policy management out of the application themselves, and instead have something like `nginx` working as a `reverse proxy` applying access policies between services. For more information see the Software Engineering Daily podcast on sidecars.\n\n# Deployments\n\n### Static Files\n\nStatic files are files that change very infrequently from request to request. As such, they can be cached upon retrieval since you know that they won't change on the next request (The browser and something like Cloudfront handle this for you). Thus, the best way to deploy static files is to put them in an s3 bucket (which auto-scales) and have something like Cloudfront in front of it which is a CDN. Cloudfront will cache the static files at its point of access in the network making for faster retrieval time and reducing load on the s3 bucket. If no cache of the files exist, it will go to the s3 bucket and retrieve it. To configure this, all you need to do is point Cloudfront to your s3 bucket, and point your domain name to Cloudfront.\n\n### Load Balancer\n\nAt its core, a load balancer simply accepts incoming traffic and routes it to a number of different application instances. Since it is what is accepting and routing traffic, this acts as a **reverse proxy** and thus can take the role of what nginx does. These incoming requests can then be routed to application instances running with something like `gunicorn` for `Django`. Note that nginx can easily configured as a load balancer too, but if you use an elastic load balancer from AWS you do not need it. This is because when running `nginx` as a reverse proxy something else acts as the web server and serves the responses (e.g. a `Django` app). Were you using `nginx` to serve files like `index.html` and not as a reverse proxy, then you would need to route the load balancer to the `nginx` instance.\n\n# Overall Flow for Decouple Frontend and Backend App\n\n## Frontend\n\nOn push to master, build the frontend distribution files and sync them to an s3 bucket. Put cloudfront in front of the s3 bucket and route all traffic to cloudfront. Then direct any traffic to your domain name to your cloudfront instance. Point your cloudfront instance to your s3 bucket. When a request comes to cloudfront it will either return the cached static file version, or get it from the s3 bucket, cache it, then return that. This reduces load on the s3 bucket and can handle a very very high amount of traffic effectively because s3 scales and accepts requests automatically.\n\n## Backend\n\n### Database\n\nCreate a database instance using one of AWS's database services. It is never a good idea to try to manage your own database instance containerized or whatever as this can potentially lead to serious data loss issues. This database will have a set of credentials for connecting to it that can be passed in as environment variables to the application instances.\n\n### Application servers\n\nCreate a load balancer with a rule/listener to route all traffic to a certain target group. This target group will be comprised of autos-scaled instances running a specified task definition. The task definition will likely be running a specified Dockerfile that is built and pushed to Amazon's ECR with CI/CD. In this task definition you will pass in the database connection environment variables. The target group - a target is an instance - handles the scaling up and down of all the instances and the load balancing of traffic between the auto-scaled instances.\n",
      "html": "<h1 id=\"networking-architecture\">Networking Architecture <a class=\"heading-anchor-permalink\" href=\"#networking-architecture\">#</a></h1>\n<h3 id=\"reverse-proxy\">Reverse Proxy <a class=\"heading-anchor-permalink\" href=\"#reverse-proxy\">#</a></h3>\n<p>A <code>reverse proxy</code> is a proxy that sits in front of the backend/web server and receives incoming requests and then processes those requests routing them to the correct server. In this way you can configure something like <code>nginx</code> to be a load balancer as it receives incoming requests and load balances them to different server instances.</p>\n<h3 id=\"forward-proxy\">Forward Proxy <a class=\"heading-anchor-permalink\" href=\"#forward-proxy\">#</a></h3>\n<p>For a <code>forward proxy</code> client requests immediately go through a proxy server which then routes those requests to the domain specified in the request. This domain then may point to a <code>reverse proxy</code> which routes the requests to different microservices in the application.</p>\n<h3 id=\"microservice-architecture\">Microservice Architecture <a class=\"heading-anchor-permalink\" href=\"#microservice-architecture\">#</a></h3>\n<p>A collection of instances, db, cache, application server, that are isolated (mostly in Docker containers) and can communicate with each other on the network. If you have a microservice application server for example, you can load balance incoming requests (e.g. through an <code>nginx</code> configuration) to the different application server instances on the network. This allows you to <code>horizontally scale</code> your application as you can easily spin up new instances of whatever layer, application server, db, etc. that needs more computing power.</p>\n<h3 id=\"sidecar-paradigm-(ngnix)\">Sidecar Paradigm (ngnix) <a class=\"heading-anchor-permalink\" href=\"#sidecar-paradigm-(ngnix)\">#</a></h3>\n<p>Sidecars are a way of structuring application architectures so that for individual microservices to talk to one another they have to go through a proxy (called a sidecar). This allows you to take all the ssl and policy management out of the application themselves, and instead have something like <code>nginx</code> working as a <code>reverse proxy</code> applying access policies between services. For more information see the Software Engineering Daily podcast on sidecars.</p>\n<h1 id=\"deployments\">Deployments <a class=\"heading-anchor-permalink\" href=\"#deployments\">#</a></h1>\n<h3 id=\"static-files\">Static Files <a class=\"heading-anchor-permalink\" href=\"#static-files\">#</a></h3>\n<p>Static files are files that change very infrequently from request to request. As such, they can be cached upon retrieval since you know that they won’t change on the next request (The browser and something like Cloudfront handle this for you). Thus, the best way to deploy static files is to put them in an s3 bucket (which auto-scales) and have something like Cloudfront in front of it which is a CDN. Cloudfront will cache the static files at its point of access in the network making for faster retrieval time and reducing load on the s3 bucket. If no cache of the files exist, it will go to the s3 bucket and retrieve it. To configure this, all you need to do is point Cloudfront to your s3 bucket, and point your domain name to Cloudfront.</p>\n<h3 id=\"load-balancer\">Load Balancer <a class=\"heading-anchor-permalink\" href=\"#load-balancer\">#</a></h3>\n<p>At its core, a load balancer simply accepts incoming traffic and routes it to a number of different application instances. Since it is what is accepting and routing traffic, this acts as a <strong>reverse proxy</strong> and thus can take the role of what nginx does. These incoming requests can then be routed to application instances running with something like <code>gunicorn</code> for <code>Django</code>. Note that nginx can easily configured as a load balancer too, but if you use an elastic load balancer from AWS you do not need it. This is because when running <code>nginx</code> as a reverse proxy something else acts as the web server and serves the responses (e.g. a <code>Django</code> app). Were you using <code>nginx</code> to serve files like <code>index.html</code> and not as a reverse proxy, then you would need to route the load balancer to the <code>nginx</code> instance.</p>\n<h1 id=\"overall-flow-for-decouple-frontend-and-backend-app\">Overall Flow for Decouple Frontend and Backend App <a class=\"heading-anchor-permalink\" href=\"#overall-flow-for-decouple-frontend-and-backend-app\">#</a></h1>\n<h2 id=\"frontend\">Frontend <a class=\"heading-anchor-permalink\" href=\"#frontend\">#</a></h2>\n<p>On push to master, build the frontend distribution files and sync them to an s3 bucket. Put cloudfront in front of the s3 bucket and route all traffic to cloudfront. Then direct any traffic to your domain name to your cloudfront instance. Point your cloudfront instance to your s3 bucket. When a request comes to cloudfront it will either return the cached static file version, or get it from the s3 bucket, cache it, then return that. This reduces load on the s3 bucket and can handle a very very high amount of traffic effectively because s3 scales and accepts requests automatically.</p>\n<h2 id=\"backend\">Backend <a class=\"heading-anchor-permalink\" href=\"#backend\">#</a></h2>\n<h3 id=\"database\">Database <a class=\"heading-anchor-permalink\" href=\"#database\">#</a></h3>\n<p>Create a database instance using one of AWS’s database services. It is never a good idea to try to manage your own database instance containerized or whatever as this can potentially lead to serious data loss issues. This database will have a set of credentials for connecting to it that can be passed in as environment variables to the application instances.</p>\n<h3 id=\"application-servers\">Application servers <a class=\"heading-anchor-permalink\" href=\"#application-servers\">#</a></h3>\n<p>Create a load balancer with a rule/listener to route all traffic to a certain target group. This target group will be comprised of autos-scaled instances running a specified task definition. The task definition will likely be running a specified Dockerfile that is built and pushed to Amazon’s ECR with CI/CD. In this task definition you will pass in the database connection environment variables. The target group - a target is an instance - handles the scaling up and down of all the instances and the load balancing of traffic between the auto-scaled instances.</p>\n",
      "id": 5
    },
    {
      "path": "Django/Django.md",
      "url": "Django/Django.html",
      "content": "# Django Basics\n\n### Authentication Backends\n\nAuthentication backends in Django are simply classes that implement `get_user` and `authenticate` methods given a primary key and credentials respectively. If multiple authentication backends are specified in the configuration, Django will try all available backends until a successful authentication is found\n\n### Custom User Models\n\nIt is recommended to create a custom user model whenever you are starting a new Django project. To maintain all the built in functionality of password hashing, etc you can inherit from `BaseUser` and point `AUTH_USER_MODEL` to the custom user\n\n### Automatic Primary Keys\n\nBy default Django gives every table the field `id = models.AutoField(primary_key=True)` which is an auto updating primary key\n\n### Random Tidbits\n\n- For an app that doesn't have a migrations directory yet, e.g. and app that is just created, you have to run `python manage.py makemigrations <app_name>`\n\n### Meta Classes\n\n##### Models\n\nMeta classes in models represent anything that is not a field, e.g. ordering, column names, etc.\n\n### Model Managers\n\nModel Managers are the most important part of the model as they retrieve instances from the database and provide the database queries. The default model manager is called `objects` and can be referenced by `<model_name>.objects` if not overriden\n\n### Model Logic\n\nIt is best practice to include necessary simple custom model functions in the models. These can go with other model functions such as `__str__` and can be referenced by `<model_Instance>.<method_name>;`\n\n### Pre-defined model methods\n\nDjango provides pre-defined model methods such as `save()` and `delete()` than can be overridden in the model class by simply redefining `save(*args, **kwargs)` and `save(*args, **kwargs)`. Calling `super(*args, **kwargs)` in this methods will ensure the data still gets saved.\n\nTheses pre-defined methods are why, given an example model `Post`\n\n```\nb = Post(text)\nb.save()\n```\n\nsaves a new Post to the database. `save` will update a model if it already exists.\n\nI believe `Post(text)` provides a constructor that can also be accessed by `Post.objects.create(text)`\n\n## Querysets\n\nA query set is essentially a `select` SQL statement with as many filters as desired which act as the `where` statement. Querysets come from the model's manager and thus NOT a model instance.\n\n**A queryset does not actually hit the database until it is iterated through or another form of evaluation.** `<Model></Model>.objects.all()` **will not evaluate the queryset and thus will not hit the database**\n\nYou can easily chain queryset filters together. This chaining is immutable and returns a new queryset every time\n\n## General Tips\n\n- It may be best to avoid signals since they are hard to track down and hard to debug\n- Go \"top to bottom\" with urls\n  - e.g. plans/\\<plan_number\\>/approvals to get all the approvals for a plan\n- To add a `unique=True` field to tables with rows:\n  1. Create migration to add a field without `unique=True`\n  2. Create migration to populate existing fields with UUIDs\n  3. Alter field to include unique option\n  - This is necessary because the initial field value will only be evaluated once when applied to all of the rows, thus it will fail the duplication constraint\n- `safe=False` is required in a `JsonResponse` whenever the object you are trying to serialize is not a dictionary\n  - `DRF` returns a dictionary type called a `ReturnDict`\n- If you are ever getting import errors when you shouldn't be, there might be a circular dependency\n  - You can't have a model depend on an external file, then have that external file depend on the model\n- When you are serializing an array of items with `DRF` you need the flag `many=True`\n- In one to many relationships the foreign key is on the one side\n- For rich text fields (`HTML` editing, bullets, strike-throughs, etc.) you can use `Django-ckeditor`\n",
      "html": "<h1 id=\"django-basics\">Django Basics <a class=\"heading-anchor-permalink\" href=\"#django-basics\">#</a></h1>\n<h3 id=\"authentication-backends\">Authentication Backends <a class=\"heading-anchor-permalink\" href=\"#authentication-backends\">#</a></h3>\n<p>Authentication backends in Django are simply classes that implement <code>get_user</code> and <code>authenticate</code> methods given a primary key and credentials respectively. If multiple authentication backends are specified in the configuration, Django will try all available backends until a successful authentication is found</p>\n<h3 id=\"custom-user-models\">Custom User Models <a class=\"heading-anchor-permalink\" href=\"#custom-user-models\">#</a></h3>\n<p>It is recommended to create a custom user model whenever you are starting a new Django project. To maintain all the built in functionality of password hashing, etc you can inherit from <code>BaseUser</code> and point <code>AUTH_USER_MODEL</code> to the custom user</p>\n<h3 id=\"automatic-primary-keys\">Automatic Primary Keys <a class=\"heading-anchor-permalink\" href=\"#automatic-primary-keys\">#</a></h3>\n<p>By default Django gives every table the field <code>id = models.AutoField(primary_key=True)</code> which is an auto updating primary key</p>\n<h3 id=\"random-tidbits\">Random Tidbits <a class=\"heading-anchor-permalink\" href=\"#random-tidbits\">#</a></h3>\n<ul>\n<li>For an app that doesn’t have a migrations directory yet, e.g. and app that is just created, you have to run <code>python manage.py makemigrations &lt;app_name&gt;</code></li>\n</ul>\n<h3 id=\"meta-classes\">Meta Classes <a class=\"heading-anchor-permalink\" href=\"#meta-classes\">#</a></h3>\n<h5 id=\"models\">Models <a class=\"heading-anchor-permalink\" href=\"#models\">#</a></h5>\n<p>Meta classes in models represent anything that is not a field, e.g. ordering, column names, etc.</p>\n<h3 id=\"model-managers\">Model Managers <a class=\"heading-anchor-permalink\" href=\"#model-managers\">#</a></h3>\n<p>Model Managers are the most important part of the model as they retrieve instances from the database and provide the database queries. The default model manager is called <code>objects</code> and can be referenced by <code>&lt;model_name&gt;.objects</code> if not overriden</p>\n<h3 id=\"model-logic\">Model Logic <a class=\"heading-anchor-permalink\" href=\"#model-logic\">#</a></h3>\n<p>It is best practice to include necessary simple custom model functions in the models. These can go with other model functions such as <code>__str__</code> and can be referenced by <code>&lt;model_Instance&gt;.&lt;method_name&gt;;</code></p>\n<h3 id=\"pre-defined-model-methods\">Pre-defined model methods <a class=\"heading-anchor-permalink\" href=\"#pre-defined-model-methods\">#</a></h3>\n<p>Django provides pre-defined model methods such as <code>save()</code> and <code>delete()</code> than can be overridden in the model class by simply redefining <code>save(*args, **kwargs)</code> and <code>save(*args, **kwargs)</code>. Calling <code>super(*args, **kwargs)</code> in this methods will ensure the data still gets saved.</p>\n<p>Theses pre-defined methods are why, given an example model <code>Post</code></p>\n<pre><code>b = Post(text)\nb.save()\n</code></pre>\n<p>saves a new Post to the database. <code>save</code> will update a model if it already exists.</p>\n<p>I believe <code>Post(text)</code> provides a constructor that can also be accessed by <code>Post.objects.create(text)</code></p>\n<h2 id=\"querysets\">Querysets <a class=\"heading-anchor-permalink\" href=\"#querysets\">#</a></h2>\n<p>A query set is essentially a <code>select</code> SQL statement with as many filters as desired which act as the <code>where</code> statement. Querysets come from the model’s manager and thus NOT a model instance.</p>\n<p><strong>A queryset does not actually hit the database until it is iterated through or another form of evaluation.</strong> <code>&lt;Model&gt;&lt;/Model&gt;.objects.all()</code> <strong>will not evaluate the queryset and thus will not hit the database</strong></p>\n<p>You can easily chain queryset filters together. This chaining is immutable and returns a new queryset every time</p>\n<h2 id=\"general-tips\">General Tips <a class=\"heading-anchor-permalink\" href=\"#general-tips\">#</a></h2>\n<ul>\n<li>It may be best to avoid signals since they are hard to track down and hard to debug</li>\n<li>Go “top to bottom” with urls\n<ul>\n<li>e.g. plans/&lt;plan_number&gt;/approvals to get all the approvals for a plan</li>\n</ul>\n</li>\n<li>To add a <code>unique=True</code> field to tables with rows:\n<ol>\n<li>Create migration to add a field without <code>unique=True</code></li>\n<li>Create migration to populate existing fields with UUIDs</li>\n<li>Alter field to include unique option</li>\n</ol>\n<ul>\n<li>This is necessary because the initial field value will only be evaluated once when applied to all of the rows, thus it will fail the duplication constraint</li>\n</ul>\n</li>\n<li><code>safe=False</code> is required in a <code>JsonResponse</code> whenever the object you are trying to serialize is not a dictionary\n<ul>\n<li><code>DRF</code> returns a dictionary type called a <code>ReturnDict</code></li>\n</ul>\n</li>\n<li>If you are ever getting import errors when you shouldn’t be, there might be a circular dependency\n<ul>\n<li>You can’t have a model depend on an external file, then have that external file depend on the model</li>\n</ul>\n</li>\n<li>When you are serializing an array of items with <code>DRF</code> you need the flag <code>many=True</code></li>\n<li>In one to many relationships the foreign key is on the one side</li>\n<li>For rich text fields (<code>HTML</code> editing, bullets, strike-throughs, etc.) you can use <code>Django-ckeditor</code></li>\n</ul>\n",
      "id": 6
    },
    {
      "path": "Django/Migrations.md",
      "url": "Django/Migrations.html",
      "content": "## Migration Order\n\n- Django determines the proper migration order by building up a dependency graph based on dependencies and `run_before`\n- Migrations are run inside a transaction by default in Postgres\n\n",
      "html": "<h2 id=\"migration-order\">Migration Order <a class=\"heading-anchor-permalink\" href=\"#migration-order\">#</a></h2>\n<ul>\n<li>Django determines the proper migration order by building up a dependency graph based on dependencies and <code>run_before</code></li>\n<li>Migrations are run inside a transaction by default in Postgres</li>\n</ul>\n",
      "id": 7
    },
    {
      "path": "Django/Models.md",
      "url": "Django/Models.html",
      "content": "## contenttype\n\n- The `contenttype` app automatically builds a table that assigns each model type an ID\n- Thus, with the `contenttype` framework you can access any model type by it's model ID\n- Therefore, any instance in an entire app can be accessed by the combination of two things: the model Class' contenttype ID and the instance's primary key\n- This is why for generic relations you need a field to store a foreign key to `ContentType` **and** a positive integer field for the instance ID's you'll be relating to\n- `ContentType` is a model that has fields\n  - `id`\n  - `app_label`\n  - `model`\n\n### Generic relations\n\n- Since with the two keys you can access any instance in any Django table, this enables `generic relations`\n- A generic relation is a foreign key pointing to any generic model\n  - Without generic relations, you must decide what model the foreign key points to initially. With generic relations the foreign key can point to any model\n    - This allows a model to have a foreign key to any model type (e.g. an attachment model pointing to any other model in the database)\n- declaring a `GenericRelation()` is a way to access this in reverse from the model the generic relation points to\n- Generic relations use composite keys, requiring two hits to the database\n  - Thus it is a performance tradeoff, and these should only be used when necessary\n",
      "html": "<h2 id=\"contenttype\">contenttype <a class=\"heading-anchor-permalink\" href=\"#contenttype\">#</a></h2>\n<ul>\n<li>The <code>contenttype</code> app automatically builds a table that assigns each model type an ID</li>\n<li>Thus, with the <code>contenttype</code> framework you can access any model type by it’s model ID</li>\n<li>Therefore, any instance in an entire app can be accessed by the combination of two things: the model Class’ contenttype ID and the instance’s primary key</li>\n<li>This is why for generic relations you need a field to store a foreign key to <code>ContentType</code> <strong>and</strong> a positive integer field for the instance ID’s you’ll be relating to</li>\n<li><code>ContentType</code> is a model that has fields\n<ul>\n<li><code>id</code></li>\n<li><code>app_label</code></li>\n<li><code>model</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"generic-relations\">Generic relations <a class=\"heading-anchor-permalink\" href=\"#generic-relations\">#</a></h3>\n<ul>\n<li>Since with the two keys you can access any instance in any Django table, this enables <code>generic relations</code></li>\n<li>A generic relation is a foreign key pointing to any generic model\n<ul>\n<li>Without generic relations, you must decide what model the foreign key points to initially. With generic relations the foreign key can point to any model\n<ul>\n<li>This allows a model to have a foreign key to any model type (e.g. an attachment model pointing to any other model in the database)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>declaring a <code>GenericRelation()</code> is a way to access this in reverse from the model the generic relation points to</li>\n<li>Generic relations use composite keys, requiring two hits to the database\n<ul>\n<li>Thus it is a performance tradeoff, and these should only be used when necessary</li>\n</ul>\n</li>\n</ul>\n",
      "id": 8
    },
    {
      "path": "Django/Querysets.md",
      "url": "Django/Querysets.html",
      "content": "### Queryset API\n\n- `get(pk=<num>)` will return one object of the model instance\n- `filter, exclude` will return querysets\n- Querysets are sliceable like `<ModelName>.objects.all()[:5]`\n- `update` takes keyword args to update a model\n- **All queryset methods,** `update, save`**, etc. except `delete` are also exposed to the model manager to act on all objects**\n- `selected_related()` follows foreign key relationships\n\n### Field Lookups\n\nThese are predefined keyword arguments to queryset filter methods to help filter the data. **They generally take the form `field_name__lookuptype=value` e.g. `Posts.objects.all().filter(pub_date__lte='2016-01-01')` for less than or equal to.**\n\n**Alternatively if you don't have a lookup type you can just do `field_name=value`**. This is just synatactic sugar for the default `field_name__exact=value`.\n\n### Relationship spanning\n\nFiltering can also span relationships. For example, consider an Entry model with a foreign key to a Blog model with a name field. You can filter with `Entry.objects.all().filter(blog__name=value)`\n\n### Related Name\n\nRelated names are set on the model defining a foreign key field with `related_name=<related_name>`. This can be then used to essentially reverse query from the original model all the model instances with foreign keys references to it. Take this example:\n\n```python\nclass Department(models.model):\n    description = models.TextField()\n\n\nclass Employee(models.model):\n    name = models.charField()\n    department = models.ForeignKey(\n        'Department',\n        on_delete=models.CASCADE,\n        related_name=\"employees\"\n    )\n```\n\n\n### select_related\n\nSelect related is a way to pre-populate foreign key relationship data in one query instead of grabbing the initial model, then getting the foreign key representation of it. This accomplishes the same thing as normal indexing but in one less database hit. While that does not make a ton of sense, an example will clear it up\n\n```python\npost = Post.objects.get(id=2) # Hits database to get post\nuser = post.user # Hits database again to get user\n```\n\n```python\npost = Post.objects.select_related('users').get(id=2) #\nuser = post.user # Doesn't hit the database because the post model is already populated with user because of select_related\n```\n\nFrom a department instance you can get all employees with a foreign key reference to that department with `<department_model>.employees.all()`. Without setting the related field you would have to do `<department_model>.employee_set.all()`.\n\n### Q expressions\n\n- To do more complex filtering (with and or or) you can use Q expressions\n  - | indicats an or, & an and",
      "html": "<h3 id=\"queryset-api\">Queryset API <a class=\"heading-anchor-permalink\" href=\"#queryset-api\">#</a></h3>\n<ul>\n<li><code>get(pk=&lt;num&gt;)</code> will return one object of the model instance</li>\n<li><code>filter, exclude</code> will return querysets</li>\n<li>Querysets are sliceable like <code>&lt;ModelName&gt;.objects.all()[:5]</code></li>\n<li><code>update</code> takes keyword args to update a model</li>\n<li><strong>All queryset methods,</strong> <code>update, save</code><strong>, etc. except <code>delete</code> are also exposed to the model manager to act on all objects</strong></li>\n<li><code>selected_related()</code> follows foreign key relationships</li>\n</ul>\n<h3 id=\"field-lookups\">Field Lookups <a class=\"heading-anchor-permalink\" href=\"#field-lookups\">#</a></h3>\n<p>These are predefined keyword arguments to queryset filter methods to help filter the data. <strong>They generally take the form <code>field_name__lookuptype=value</code> e.g. <code>Posts.objects.all().filter(pub_date__lte='2016-01-01')</code> for less than or equal to.</strong></p>\n<p><strong>Alternatively if you don’t have a lookup type you can just do <code>field_name=value</code></strong>. This is just synatactic sugar for the default <code>field_name__exact=value</code>.</p>\n<h3 id=\"relationship-spanning\">Relationship spanning <a class=\"heading-anchor-permalink\" href=\"#relationship-spanning\">#</a></h3>\n<p>Filtering can also span relationships. For example, consider an Entry model with a foreign key to a Blog model with a name field. You can filter with <code>Entry.objects.all().filter(blog__name=value)</code></p>\n<h3 id=\"related-name\">Related Name <a class=\"heading-anchor-permalink\" href=\"#related-name\">#</a></h3>\n<p>Related names are set on the model defining a foreign key field with <code>related_name=&lt;related_name&gt;</code>. This can be then used to essentially reverse query from the original model all the model instances with foreign keys references to it. Take this example:</p>\n<pre><code class=\"language-python\">class Department(models.model):\n    description = models.TextField()\n\n\nclass Employee(models.model):\n    name = models.charField()\n    department = models.ForeignKey(\n        'Department',\n        on_delete=models.CASCADE,\n        related_name=&quot;employees&quot;\n    )\n</code></pre>\n<h3 id=\"select_related\">select_related <a class=\"heading-anchor-permalink\" href=\"#select_related\">#</a></h3>\n<p>Select related is a way to pre-populate foreign key relationship data in one query instead of grabbing the initial model, then getting the foreign key representation of it. This accomplishes the same thing as normal indexing but in one less database hit. While that does not make a ton of sense, an example will clear it up</p>\n<pre><code class=\"language-python\">post = Post.objects.get(id=2) # Hits database to get post\nuser = post.user # Hits database again to get user\n</code></pre>\n<pre><code class=\"language-python\">post = Post.objects.select_related('users').get(id=2) #\nuser = post.user # Doesn't hit the database because the post model is already populated with user because of select_related\n</code></pre>\n<p>From a department instance you can get all employees with a foreign key reference to that department with <code>&lt;department_model&gt;.employees.all()</code>. Without setting the related field you would have to do <code>&lt;department_model&gt;.employee_set.all()</code>.</p>\n<h3 id=\"q-expressions\">Q expressions <a class=\"heading-anchor-permalink\" href=\"#q-expressions\">#</a></h3>\n<ul>\n<li>To do more complex filtering (with and or or) you can use Q expressions\n<ul>\n<li>| indicats an or, &amp; an and</li>\n</ul>\n</li>\n</ul>\n",
      "id": 9
    },
    {
      "path": "Encoding.md",
      "url": "Encoding.html",
      "content": "## Encoding\n\nEncoding is just a way of representing one thing with something else. Since computers can only store 0's and 1's for example, characters must be _encoded_ to 0's and 1's to be displayed.\n\n## Encoding Types\n\n### ASCII\n\nAn 8-bit encoding scheme which represents 127 distinct characters. These are mostly the English letters/special characters. Cannot support more than 256 different combinations since it only uses 1 byte.\n\n### Unicode\n\nAttempts to build one encoding scheme for _all_ characters. There are over 1 million different characters represented in unicode.\n\nUnicode is not actually an encoding. It is just a map from characters to code points. But encodings such as `utf-8`, `UTF-16`, and `UTF-32`.\n\nFour bits are needed for the proper encoding of all potential unicode values (2^32) but this would waste a lot of space for the most common letters.\n\nThus, `UTF-8` and `UTF-16` were developed as variable-length encodings to address this problem. `UTF-16` is **not** ascii compatible and thus can screw things up when a parser, etc. expects ascii compatible encodings.\n\nCharacters in unicode are referred to by their _unicode code points_ which are represented in hexidecemal prefaced by `U+`.\n\ne.g. `U+1E001`\n\nNote:\n\n- If your text is messed up when reading a document the program you are using is likely using the wrong encoding.\n- The `�` character seen so often is called the _unicode replacement character_ and is used to indicate a program couldn't decode a character correctly when using unicode\n- UTF-8 is binary compatible with ASCII\n  - ASCII characters have the same 1 byte values in UTF-8\n- When something \"natively supports Unicode\" all that means is it does not directly assume that 1 byte = 1 character\n- In general, `UTF-8` is the de-facto standard for everything these days\n\n**Since unicode can represent all characters you should always be using a unicode-based encoding**\n\n#### UTF-16\n\n- All JavaScript supports is `UTF-16` encoded strings. These are input strings, not necessarily the source code. Source code is recommended to be encoded in `UTF-8`.\n\n### Base64\n\n- `Base64` is a binary to binary (or text) encoding -> a way in which to translate arbitrary binary data into printable ascii characters/the binary for them.\n- Generally things are encoded to base64 before being sent over HTTP requests\n- This encodes **any** data to ASCII to be used as printable characters.\n- This is necessary when you are transmitting data over mediums that only can deal with printable characters\n- `Base64` ensures that the data remains intact throughout transport\n- When data is transported, you cannot be sure that it will be interpreted correctly on the other end. `Base64` encoding gives a standard for properly ensuring all data is received and not incorrectly handled since all the transported text is ASCII.\n- Primarily used for systems that can only handle ASCII characters and just ensures it won't get corrupted\n- Sending data as UTF-8 may corrupt it on the target system. That is why `Base64` is used\n\nThe process for safely transporting text is thus as follows:\n\nSender:\n\n1. Encode text string in encoding of choice (e.g. `UTF-8`) to turn the text into bits\n2. `Base64` encode the bit string and send it to the other computer\n\nReceiver:\n\n1. `Base64` decode string into bits.\n2. Knowing which text-encoding was used (e.g. `UTF-8`) you can now process the bit string properly.\n",
      "html": "<h2 id=\"encoding\">Encoding <a class=\"heading-anchor-permalink\" href=\"#encoding\">#</a></h2>\n<p>Encoding is just a way of representing one thing with something else. Since computers can only store 0’s and 1’s for example, characters must be <em>encoded</em> to 0’s and 1’s to be displayed.</p>\n<h2 id=\"encoding-types\">Encoding Types <a class=\"heading-anchor-permalink\" href=\"#encoding-types\">#</a></h2>\n<h3 id=\"ascii\">ASCII <a class=\"heading-anchor-permalink\" href=\"#ascii\">#</a></h3>\n<p>An 8-bit encoding scheme which represents 127 distinct characters. These are mostly the English letters/special characters. Cannot support more than 256 different combinations since it only uses 1 byte.</p>\n<h3 id=\"unicode\">Unicode <a class=\"heading-anchor-permalink\" href=\"#unicode\">#</a></h3>\n<p>Attempts to build one encoding scheme for <em>all</em> characters. There are over 1 million different characters represented in unicode.</p>\n<p>Unicode is not actually an encoding. It is just a map from characters to code points. But encodings such as <code>utf-8</code>, <code>UTF-16</code>, and <code>UTF-32</code>.</p>\n<p>Four bits are needed for the proper encoding of all potential unicode values (2^32) but this would waste a lot of space for the most common letters.</p>\n<p>Thus, <code>UTF-8</code> and <code>UTF-16</code> were developed as variable-length encodings to address this problem. <code>UTF-16</code> is <strong>not</strong> ascii compatible and thus can screw things up when a parser, etc. expects ascii compatible encodings.</p>\n<p>Characters in unicode are referred to by their <em>unicode code points</em> which are represented in hexidecemal prefaced by <code>U+</code>.</p>\n<p>e.g. <code>U+1E001</code></p>\n<p>Note:</p>\n<ul>\n<li>If your text is messed up when reading a document the program you are using is likely using the wrong encoding.</li>\n<li>The <code>�</code> character seen so often is called the <em>unicode replacement character</em> and is used to indicate a program couldn’t decode a character correctly when using unicode</li>\n<li>UTF-8 is binary compatible with ASCII\n<ul>\n<li>ASCII characters have the same 1 byte values in UTF-8</li>\n</ul>\n</li>\n<li>When something “natively supports Unicode” all that means is it does not directly assume that 1 byte = 1 character</li>\n<li>In general, <code>UTF-8</code> is the de-facto standard for everything these days</li>\n</ul>\n<p><strong>Since unicode can represent all characters you should always be using a unicode-based encoding</strong></p>\n<h4 id=\"utf-16\">UTF-16 <a class=\"heading-anchor-permalink\" href=\"#utf-16\">#</a></h4>\n<ul>\n<li>All JavaScript supports is <code>UTF-16</code> encoded strings. These are input strings, not necessarily the source code. Source code is recommended to be encoded in <code>UTF-8</code>.</li>\n</ul>\n<h3 id=\"base64\">Base64 <a class=\"heading-anchor-permalink\" href=\"#base64\">#</a></h3>\n<ul>\n<li><code>Base64</code> is a binary to binary (or text) encoding -&gt; a way in which to translate arbitrary binary data into printable ascii characters/the binary for them.</li>\n<li>Generally things are encoded to base64 before being sent over HTTP requests</li>\n<li>This encodes <strong>any</strong> data to ASCII to be used as printable characters.</li>\n<li>This is necessary when you are transmitting data over mediums that only can deal with printable characters</li>\n<li><code>Base64</code> ensures that the data remains intact throughout transport</li>\n<li>When data is transported, you cannot be sure that it will be interpreted correctly on the other end. <code>Base64</code> encoding gives a standard for properly ensuring all data is received and not incorrectly handled since all the transported text is ASCII.</li>\n<li>Primarily used for systems that can only handle ASCII characters and just ensures it won’t get corrupted</li>\n<li>Sending data as UTF-8 may corrupt it on the target system. That is why <code>Base64</code> is used</li>\n</ul>\n<p>The process for safely transporting text is thus as follows:</p>\n<p>Sender:</p>\n<ol>\n<li>Encode text string in encoding of choice (e.g. <code>UTF-8</code>) to turn the text into bits</li>\n<li><code>Base64</code> encode the bit string and send it to the other computer</li>\n</ol>\n<p>Receiver:</p>\n<ol>\n<li><code>Base64</code> decode string into bits.</li>\n<li>Knowing which text-encoding was used (e.g. <code>UTF-8</code>) you can now process the bit string properly.</li>\n</ol>\n",
      "id": 10
    },
    {
      "path": "Entrepreneurship/Acronyms.md",
      "url": "Entrepreneurship/Acronyms.html",
      "content": "# Acronyms\n\n- TAM (Total Available Market)\n",
      "html": "<h1 id=\"acronyms\">Acronyms <a class=\"heading-anchor-permalink\" href=\"#acronyms\">#</a></h1>\n<ul>\n<li>TAM (Total Available Market)</li>\n</ul>\n",
      "id": 11
    },
    {
      "path": "Entrepreneurship/Aquired_Episodes.md",
      "url": "Entrepreneurship/Aquired_Episodes.html",
      "content": "# Table of Contents <!-- omit in toc -->\n\n- [Zoom](#zoom)\n- [SpaceX](#spacex)\n- [Google Maps](#google-maps)\n- [WeWork](#wework)\n- [Sequoia Capital](#sequoia-capital)\n- [WhatsApp](#whatsapp)\n- [The Lean Startup and LTSE](#the-lean-startup-and-ltse)\n- [TikTok](#tiktok)\n- [Disney Plus](#disney-plus)\n- [Venmo](#venmo)\n- [Netflix](#netflix)\n- [Tesla](#tesla)\n- [Uber](#uber)\n- [Pinterest](#pinterest)\n- [ESPN](#espn)\n- [Snap](#snap)\n- [Softbank](#softbank)\n- [Github](#github)\n- [Lyft](#lyft)\n- [Slack](#slack)\n- [Google Docs](#google-docs)\n- [Spotify](#spotify)\n- [Nest](#nest)\n- [Lucas Film](#lucas-film)\n- [Alibaba](#alibaba)\n- [ARM](#arm)\n- [T-mobile](#t-mobile)\n- [Dropbox](#dropbox)\n- [Twitch](#twitch)\n- [Siri](#siri)\n- [Waze](#waze)\n- [PayPal](#paypal)\n- [Virgin Airlines](#virgin-airlines)\n- [Next](#next)\n- [Skype](#skype)\n- [BAMTech](#bamtech)\n- [Square](#square)\n- [AOL + Time Warner](#aol--time-warner)\n- [HP Acquiring Opsware](#hp-acquiring-opsware)\n- [Atlassian](#atlassian)\n- [Stitch Fix](#stitch-fix)\n- [Beats By Dre](#beats-by-dre)\n- [Booking.com](#bookingcom)\n- [Superhuman](#superhuman)\n- [Against Gravity](#against-gravity)\n- [Jason Calacalanis](#jason-calacalanis)\n\n## Zoom\n\n- Founder/CEO: Eric Yuan\n- Focusing on education allows you to continue to capture that value as students graduate into the workforce and bring your product with it\n- Big markets (e.g. video conferencing) go through cycles where a new way of deliverying content/improving the product can unseat incumbents\n\n[Back to top](#table-of-contents)\n\n## SpaceX\n\n- Cut all the subcontractors to the subcontractors to the subcontractors out of the aerospace market to remove dead weight and accumulating cost-plus pricing (where everyone takes 30%)\n  - Reduced cost by a factor of 10\n  - If you ever see a cost-plus model run: they have an incentive to make something as expensive as possible\n- Green-lighted falcon 9 (9 Merlin engines) before Falcon 1 even succeeded\n  - Engine was brilliantly designed to be modular so this could be possible\n- Investing 10's of billions into Starlink - a consortium of 12,000 LEO satellites to provide low-cost internet all over the globe\n  - Traditionally satellite internet has come from GEO satellites and thus is much slower\n\n[Back to top](#table-of-contents)\n\n## Google Maps\n\n## WeWork\n\n- Founder/CEO: Adam Neumann\n  - Refused to give up any control\n  - Tanked his own company\n- VC's - especially Softbank's vision fund - were willing to dump capital in this because they needed to offload funds and they were securing the assets against office buildings\n- Softbank inflated value so much since they were the only ones willing to invest, IPO got canceled, terrible terrible management story\n\n[Back to top](#table-of-contents)\n\n## Sequoia Capital\n\n- Founder: Don Valentine\n  - Basically helped revolutionize the VC industry\n- Focuses on huge market potential and huge ideas, founders kind of second since they can always supplement help\n- Refer to investments as _partnerships_ to build great companies with\n- In the dot-com crash Sequoia **refused** to let the fund lose money - cutting management fees and devoting a ton of effort to salvaging returns - over a matter of principle\n  - This developed a ton of customer loyalty and a huge respect for the firm\n\n[Back to top](#table-of-contents)\n\n## WhatsApp\n\n- Founder: Jan Koum\n- Nailed product/market fit + value proposition -> send messages to people across the globe for \\$.99 instead of the ridiculous plans telephone providers offered\n  - Text messages were actually limited to 120 characters because that was the extra space available in consistent pings from network towers to cell phones. Therefore text messages offered NO additional cost to the telephone providers\n- \\$22 billion acquisition that has yet to be monetized but was a great takeout play by Facebook\n- Hated advertising on the platform and got in a HUGE fight with Facebook over this, leaving like \\$800 million on the table\n\n[Back to top](#table-of-contents)\n\n## The Lean Startup and LTSE\n\n## TikTok\n\n## Disney Plus\n\n- CEO: Bob Iger\n  - Transformed the way Disney was run and brought them out of their dark days\n  - Acquired Pixar, Lucas Films, Fox, to bring great animation technology and IP into the studio\n- The Disney flywheel - centering around content creation - allows them to draw a significant amount of extra revenue from merchandising, parks, etc. from their IP.\n\n[Back to top](#table-of-contents)\n\n## Venmo\n\n- Founder/CEO: Andrew Kortina\n- There is no business model on peer-to-peer payments since cash is free\n  - The only business model is attracting peer-to-peer customers to incentivize merchants to use your platform as a payments option and take a cut\n    - The PayPal business model\n- Acquired by Braintree (for not that much) then PayPal and would not have survived without acquisitions\n- Did a really weird and random marketing stunt - Brian uses venmo - where people had no idea who Brian was and thus it went viral\n\n[Back to top](#table-of-contents)\n\n## Netflix\n\n- CEO: Reid Hastings\n- Two separate eras: DVD rental and streaming\n- Team mentality - not a family - if you are not performing they will have to let you go because it's not fair to the rest of the team\n- Blockbuster actually had great management but corporate raider Carl Icahn kicked out CEO over comp. dispute and installed new guy who \"didn't believe in internet businesses\" and wanted to bring back the hayday of brick and mortar stores lol\n  - Blockbuster online was going to beat Netflix - Netflix even capitulated and offered to sell to Blockbuster - before this self-inflicted wound happened\n\n[Back to top](#table-of-contents)\n\n## Tesla\n\n## Uber\n\n- Theme of companies IPO'ing in the A+ era (2018-2019 ish) is because companies were staying private longer. Where previously it was 3-4 years post-founding until going public, now it is closer to 10-12 years. Thus companies founded post-2008 recession were all IPO'ing around the same time\n- Co-founder/CEO: Travis Kalanick, Co-founder: Garret Camp\n  - Travis got scorched on lawsuits before Uber thus leading to his personality\n- Uber for the first couple years was in the black-car market, Lyft came in and did borderline-illegal peer-to-peer ridesharing which blew up the unit economics\n  - Thus it was a race to outlast each other and raise as much capital as possible so the unit economics could return to profitability\n- Uber had a massive culture problem in 2017 and Dara Khosrowshahi became CEO and helped fix the culture\n- Uber's A+ possibility is having drivers be 100% occupied between Eats/Rideshare, etc. so then they only use Uber and not a competitor ;like Lyft. This will turn the unit economics in their favor.\n\n[Back to top](#table-of-contents)\n\n## Pinterest\n\n- Founder/Eventual CEO: Ben Silverman\n- Key theme: Pinterest did a great job investing in their growth _before_ they actually grew\n  - Invested in HR, Ops, executives, culture, etc.\n- Women drove a lot of the success at the company throughout all stages of its life\n  - They had a ton of women engineers which matched the demographics of their user base and really pushed the product forward\n- There is a lot of value in keeping a team together\n  - You begin to learn everyone's strengths and weaknesses and get quicker at building things together\n\n[Back to top](#table-of-contents)\n\n## ESPN\n\n- Theme: constantly be analyzing your business model: paying cable providers vs them paying you\n- Be the thing that provides value not the commodity\n- Capital cities buys ABC worth more than their entire company “minnow swallows whale” -> capital cities then becomes ABC\n- ESPN created value then captured it (March Madness, Sunday Night Football, Monday Night Football are all things they essentially created) then captured it with their network\n- They didn’t ride the wave, they created it\n  - Business model innovation coupled with riding/creating a wave is key to creating a massive\n\n[Back to top](#table-of-contents)\n\n## Snap\n\n- Theme: don't be afraid of a large incumbent launching your feature - it will bring you publicity (like when Facebook launching a Snap competitor)\n- Founders originally stopped working on Snapchat until one of Evan Spiegel's cousins schools started using it to get around high-school messaging restrictions\n\n[Back to top](#table-of-contents)\n\n## Softbank\n\n- Founder: Masayoshi Son (Masa)\n  - He has an incredible story and has done amazingly well in business - even surpassing Bill Gates in wealth at one point during the tech bubble\n  - Once the tech bubble burst he lost more money than anyone in history - \\$70 billion\n- Huge on getting in-person meetings: meeting with McDonald's businessman, meeting with Steve Jobs for phone idea/becoming the exclusive provider in Japan\n- Masa made a $20 million investment in Alibaba which turned into $60 billion\n  - Could be the most successful investment of all time\n- Softbank went into broadband, telecommunications, investments, etc. because after the tech bubble burst Masa realized that stable cash flow is **really** important in building sustainable businesses\n- Softbank is well-known for its Vision Fund, a \\$100 billion fund for growth capital\n  - This is by far the biggest fund ever raised\n  - Regardless of how successful it ends up being, this will generate \\$15 billion in management fees by the end of the 12-15 year lockup period -> stable cash flow\n  - One of the reasons they were so successful in raising this capital is because it is one of the only avenues for massive wealth funds like the Saudi Arabia sovereign wealth fund to generate returns\n    - You can't deploy that much capital anywhere else\n\n[Back to top](#table-of-contents)\n\n## Github\n\n- The original version of Git came after the main distributed version control company revoked its free licenses for the open-source community\n  - Linus built the first prototype of git in like a week\n- Theme: the wax and wane of technologies - centralized/decentralized, client-server/local, these go through cycles\n- Theme: It is **really** important to nail the line for freemium models at the right point where it benefits the overall product\n  - Github: free public repos but paid private repos\n    - The free version which benefits the open-source community and the Github product as a whole. For companies protecting their IP they have to pay. This is a perfect freemium model.\n  - Zoom: free calls up to 40 mins\n    - Free customers can just start another call\n    - The ideal business meeting, however, is 45 minutes thus the 40 minute freemium model, encouraging enterprise users to pay\n\n[Back to top](#table-of-contents)\n\n## Lyft\n\n- Pioneered the peer-to-peer ridesharing\n  - It was basically illegal when they started and laws changed to accommodate it\n    - Uber tried to get Lyft shut down\n- Was founded on the mission to reduces emissions by carpooling\n  - The environmental consciousness is a core tenet of Lyft\n\n[Back to top](#table-of-contents)\n\n## Slack\n\n- When Stewart Butterfield had to lay people off of his game company he made sure they all got jobs\n  - Built up trust for them to come to work at Slack\n- Great companies are built at the intersection of cultural, technological, and business model shift\n- Slack basically wrapped IRC (internet relay control)\n- They used Twitter to amplify the messages of people evanelizing Slack\n- Nailed their freemium model\n  - number of searchable and archivable messages instead of number of users\n    - This encourages people to show the functionality to coworkers\n- DL (Direct Listing) vs. IPO\n  - No additional shares issued so there is no dilution\n  - Great for companies who are profitable and don't need money\n  - No lockup period for DPO's. Employees/people can liquidate stock\n- There are two ways to make money: \"bundling and unbundling\"\n- They understand the customer funnel really well\n  - They find triggers where customers won't churn (2000 messages per team for Slack)\n  - Therefore they designed the product around having teams reach 2000 messages since they know once they hit that point they won't churn\n- They were their own first customer\n  - This way they learned what the customers wanted\n- Customer acquisition cost at its most basic sense is (new customers) divided by marketing dollars spend\n- Started in Canada\n\n[Back to top](#table-of-contents)\n\n## Google Docs\n\n- A ton of people use Google productivity tools but it isn't a great business\n- Finding a good business is sometimes better than finding something that may get more users\n- Theme: **Focusing on your core product is the most imporant thing in a startup**\n- \"If you don't have a struggle you can't have something great\" - something from Pixar\n\n[Back to top](#table-of-contents)\n\n## Spotify\n\n- Founded in Sweden\n- CEO: Daniel Eck\n- Growth hacking strategy: make it invite only with the invites coming from other users _OR_ pay to skip the invite\n- Sean Parker wrote an email to Spotify telling them they had to integrate with Facebook for viral sharing\n  - Iconic email and a masterpiece\n    - Facebook as a distribution vehicle fueled Spotify's growth\n- Have a paid user percentage somewhere in the high 40%\n- Barry McCarthy organized Spotify DL as CFO\n  - Helped lead Netflix too\n- Theme: **Tech companies generally have really high (70-80 ish percent) gross margins since the marginal cost of producing another piece of software is small**\n  - Spotify, however, doesn't have these margins because they have to pay artists. Their gross margins are around 20%\n\n[Back to top](#table-of-contents)\n\n## Nest\n\n- Theme: **If you are building a platform company most of the time you need to resources of a platform company (e.g. Google, Facebook kind of) to succeed**\n- \"People who are really serious about software should make their own hardware\" - Alan Kay\n\n[Back to top](#table-of-contents)\n\n## Lucas Film\n\n- Theme: **successful acquisitions are hands-off** (e.g. Instagram, Pixar)\n  - Preserve the culture of the acquiree as much as possible\n\n[Back to top](#table-of-contents)\n\n## Alibaba\n\n- Theme: **In emerging marketplaces it's not about who has the most market share now, it's about who will have the most marketshare when consumers enter the market**\n\n[Back to top](#table-of-contents)\n\n## ARM\n\n- ARM pioneered the reduced instruction set (RISC)\n  - Less power, more performance\n  - However, Intel had the monopoly with x86 so that was what most computers used\n- Low power chips led to a perfect use case in phones\n  - ARM has 96% market share in all phones, embedded devices, etc.\n- Theme: \\*\\*It's not about what your TAM is today, it's more important what your TAM will be tomorrow\n\n[Back to top](#table-of-contents)\n\n## T-mobile\n\n- Listen to customer service calls to listen to your customers\n- The T-mobile strategy:\n  - Declare victory on an enemy (AT&T), pick on them, then attack them\n- It's a Warren Buffet style business\n  - Cable and predictable cash flow\n\n[Back to top](#table-of-contents)\n\n## Dropbox\n\n- Theme: **stick to your core product**\n  - Dropbox did not always do a great job with this as they grew\n- Theme: **solve a problem people have and make it just work**\n\n[Back to top](#table-of-contents)\n\n## Twitch\n\n- For every one content provider there is like 100 Lurkers\n- Twitch takes half of the subscription take rate\n\n[Back to top](#table-of-contents)\n\n## Siri\n\n- Theme: **more natural computing with voice-based control and interactive technology could be the future**\n\n[Back to top](#table-of-contents)\n\n## Waze\n\n- The right way to advertise on mobile isn't banner ads, it's native, location-sensitive, etc.\n\n[Back to top](#table-of-contents)\n\n## PayPal\n\n- Viral growth hacking: invite a friend and get free money\n- Theme: **Can't start with the end state, start with something really small then rapidly iterate with real market feedback**\n\n[Back to top](#table-of-contents)\n\n## Virgin Airlines\n\n- Theme: **Your moat is one of the most important things when building a business**\n  - The airline industry has little moat\n- Theme: \\*\\*Focus on what you are good at - your product can't be everything to everyone\n\n[Back to top](#table-of-contents)\n\n## Next\n\n- It is a difficult problem to take highly research oriented technology and turn it into a product\n- It's super important to make the products \"just work\"\n\n[Back to top](#table-of-contents)\n\n## Skype\n\n- Dual-track process: file for IPO while simultaneously fielding acquisition offers\n\n[Back to top](#table-of-contents)\n\n## BAMTech\n\n- Stairstep your way into becoming a great company by solving real problems one at a time\n  - You can't solve every problem at once\n\n[Back to top](#table-of-contents)\n\n## Square\n\n- Reinvented founder stories are probably more common than not\n  - The power of stories draws people in\n- One of the founders: Jack Dorsey\n- They got really good at the fraud prevention which is what got Square in the industry and allowed them to stay\n- They sent the card reader for free and took fees on transactions\n  - Business model innovation\n- **Naming a company**: pick an empty word (Expedia, Square, etc.)\n  - This will allow you to fill it with whatever you want and allow for pivots\n  - For example, Square does not constrain you to payments\n- Net 0 churn\n  - The businesses that do churn are netted out by the businesses that don't churn growing with the platform\n\n[Back to top](#table-of-contents)\n\n## AOL + Time Warner\n\n- \"The worst acquisition of all time\"\n- AOL was a sinking ship and grabbed on to Time Warner to try to get some real value with its inflated internet shares\n\n[Back to top](#table-of-contents)\n\n## HP Acquiring Opsware\n\n- HP is Hewlett-Packard\n- There are two types of markets and you **need** to know which one you are in\n  - Emerging and consolidating\n- In the enterprise the best product doesn't always win\n  - Often it's the product with the best sales (or the ones who can sell to the IT department head or CFO)\n- There is a lot of IP in how to sell certain software products\n- Getting the timing right for a product is the absolute most important part of a business\n  - **This is what 10x people have the ability to do**\n\n[Back to top](#table-of-contents)\n\n## Atlassian\n\n- \"Third Wave\" of enterprise software: you don't need huge sales forces anymore, the product sells itself\n  - It is cheap enough and on a per-person basis where individuals can buy the product themselves\n    - Doesn't have to go through the CFO\n- The average SAAS company spends 50-100% of revenue on marketing for growth, Atlassian spends around 20%\n- General growth hacking tip: Referral bonuses are a huge vehicle for growth in consumer facing products\n\n[Back to top](#table-of-contents)\n\n## Stitch Fix\n\n- Opportunities for businesses aren't always created from technological shifts, sometimes it is societal\n  - e.g. It becoming okay to have another person stay in your home - AirBNB\n\n[Back to top](#table-of-contents)\n\n## Beats By Dre\n\n- Disruption: instead of reproducing music exactly as it sounds you want it to be emotional, bass boosted, etc.\n- To get people excited about something: clue them in on it early and ask for their feedback. They will feel like they have skin in the game\n- Random: Monster completely overcharges for cables\n- Apple Music kind of came from Beats Music\n\n[Back to top](#table-of-contents)\n\n## Booking.com\n\n- Accumulated long-tail supply: collected smaller hotels who were not listed on other platforms and were the only platform that had these hotels listed\n- **Getting customers to convert in marketplace businesses is your biggest lever**\n\n[Back to top](#table-of-contents)\n\n## Superhuman\n\n- Landing page: Took 2 hours to make on Squarespace and asked: what email client do you use? And what annoys you about it?\n  - This is value proposition discovery and validation\n- \"The only way to win is to be contrarian and right\"\n- Used to Van Westendorp pricing methodology\n- **The fundamental job of a founder is to create momentum**\n- Paul Graham essay: startup=growth\n- Superhuman founder: Rahul Vohra\n- Measured product-market fit numerically and systematically\n- Used typeform for surveys\n\n[Back to top](#table-of-contents)\n\n## Against Gravity\n\n- **It is much more common for startups to die of indigestion from too much opportunity than starvation of too little**\n- Qualification of investors - making sure they can help you in your venture - is super important for picking the right ones\n- It is a lot easier to put out MVP's for products in emerging markets than markets in which there are already products with product-market fit\n- **You get the investors you ask for - be clear and honest about what you want/what your company is**\n- You have to release something for feedback, you can't just build it in secret for a long time\n  - This is how you build the wrong thing\n\n[Back to top](#table-of-contents)\n\n## Jason Calacalanis\n\n- **How to get the most out of networking: always invite people to dinner, pick up the check, and introduce people to one another without expecting anything out of it**\n\n[Back to top](#table-of-contents)\n",
      "html": "<h1 id=\"table-of-contents\">Table of Contents <!-- omit in toc --> <a class=\"heading-anchor-permalink\" href=\"#table-of-contents\">#</a></h1>\n<ul>\n<li><a href=\"#zoom\">Zoom</a></li>\n<li><a href=\"#spacex\">SpaceX</a></li>\n<li><a href=\"#google-maps\">Google Maps</a></li>\n<li><a href=\"#wework\">WeWork</a></li>\n<li><a href=\"#sequoia-capital\">Sequoia Capital</a></li>\n<li><a href=\"#whatsapp\">WhatsApp</a></li>\n<li><a href=\"#the-lean-startup-and-ltse\">The Lean Startup and LTSE</a></li>\n<li><a href=\"#tiktok\">TikTok</a></li>\n<li><a href=\"#disney-plus\">Disney Plus</a></li>\n<li><a href=\"#venmo\">Venmo</a></li>\n<li><a href=\"#netflix\">Netflix</a></li>\n<li><a href=\"#tesla\">Tesla</a></li>\n<li><a href=\"#uber\">Uber</a></li>\n<li><a href=\"#pinterest\">Pinterest</a></li>\n<li><a href=\"#espn\">ESPN</a></li>\n<li><a href=\"#snap\">Snap</a></li>\n<li><a href=\"#softbank\">Softbank</a></li>\n<li><a href=\"#github\">Github</a></li>\n<li><a href=\"#lyft\">Lyft</a></li>\n<li><a href=\"#slack\">Slack</a></li>\n<li><a href=\"#google-docs\">Google Docs</a></li>\n<li><a href=\"#spotify\">Spotify</a></li>\n<li><a href=\"#nest\">Nest</a></li>\n<li><a href=\"#lucas-film\">Lucas Film</a></li>\n<li><a href=\"#alibaba\">Alibaba</a></li>\n<li><a href=\"#arm\">ARM</a></li>\n<li><a href=\"#t-mobile\">T-mobile</a></li>\n<li><a href=\"#dropbox\">Dropbox</a></li>\n<li><a href=\"#twitch\">Twitch</a></li>\n<li><a href=\"#siri\">Siri</a></li>\n<li><a href=\"#waze\">Waze</a></li>\n<li><a href=\"#paypal\">PayPal</a></li>\n<li><a href=\"#virgin-airlines\">Virgin Airlines</a></li>\n<li><a href=\"#next\">Next</a></li>\n<li><a href=\"#skype\">Skype</a></li>\n<li><a href=\"#bamtech\">BAMTech</a></li>\n<li><a href=\"#square\">Square</a></li>\n<li><a href=\"#aol--time-warner\">AOL + Time Warner</a></li>\n<li><a href=\"#hp-acquiring-opsware\">HP Acquiring Opsware</a></li>\n<li><a href=\"#atlassian\">Atlassian</a></li>\n<li><a href=\"#stitch-fix\">Stitch Fix</a></li>\n<li><a href=\"#beats-by-dre\">Beats By Dre</a></li>\n<li><a href=\"#bookingcom\">Booking.com</a></li>\n<li><a href=\"#superhuman\">Superhuman</a></li>\n<li><a href=\"#against-gravity\">Against Gravity</a></li>\n<li><a href=\"#jason-calacalanis\">Jason Calacalanis</a></li>\n</ul>\n<h2 id=\"zoom\">Zoom <a class=\"heading-anchor-permalink\" href=\"#zoom\">#</a></h2>\n<ul>\n<li>Founder/CEO: Eric Yuan</li>\n<li>Focusing on education allows you to continue to capture that value as students graduate into the workforce and bring your product with it</li>\n<li>Big markets (e.g. video conferencing) go through cycles where a new way of deliverying content/improving the product can unseat incumbents</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"spacex\">SpaceX <a class=\"heading-anchor-permalink\" href=\"#spacex\">#</a></h2>\n<ul>\n<li>Cut all the subcontractors to the subcontractors to the subcontractors out of the aerospace market to remove dead weight and accumulating cost-plus pricing (where everyone takes 30%)\n<ul>\n<li>Reduced cost by a factor of 10</li>\n<li>If you ever see a cost-plus model run: they have an incentive to make something as expensive as possible</li>\n</ul>\n</li>\n<li>Green-lighted falcon 9 (9 Merlin engines) before Falcon 1 even succeeded\n<ul>\n<li>Engine was brilliantly designed to be modular so this could be possible</li>\n</ul>\n</li>\n<li>Investing 10’s of billions into Starlink - a consortium of 12,000 LEO satellites to provide low-cost internet all over the globe\n<ul>\n<li>Traditionally satellite internet has come from GEO satellites and thus is much slower</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"google-maps\">Google Maps <a class=\"heading-anchor-permalink\" href=\"#google-maps\">#</a></h2>\n<h2 id=\"wework\">WeWork <a class=\"heading-anchor-permalink\" href=\"#wework\">#</a></h2>\n<ul>\n<li>Founder/CEO: Adam Neumann\n<ul>\n<li>Refused to give up any control</li>\n<li>Tanked his own company</li>\n</ul>\n</li>\n<li>VC’s - especially Softbank’s vision fund - were willing to dump capital in this because they needed to offload funds and they were securing the assets against office buildings</li>\n<li>Softbank inflated value so much since they were the only ones willing to invest, IPO got canceled, terrible terrible management story</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"sequoia-capital\">Sequoia Capital <a class=\"heading-anchor-permalink\" href=\"#sequoia-capital\">#</a></h2>\n<ul>\n<li>Founder: Don Valentine\n<ul>\n<li>Basically helped revolutionize the VC industry</li>\n</ul>\n</li>\n<li>Focuses on huge market potential and huge ideas, founders kind of second since they can always supplement help</li>\n<li>Refer to investments as <em>partnerships</em> to build great companies with</li>\n<li>In the dot-com crash Sequoia <strong>refused</strong> to let the fund lose money - cutting management fees and devoting a ton of effort to salvaging returns - over a matter of principle\n<ul>\n<li>This developed a ton of customer loyalty and a huge respect for the firm</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"whatsapp\">WhatsApp <a class=\"heading-anchor-permalink\" href=\"#whatsapp\">#</a></h2>\n<ul>\n<li>Founder: Jan Koum</li>\n<li>Nailed product/market fit + value proposition -&gt; send messages to people across the globe for $.99 instead of the ridiculous plans telephone providers offered\n<ul>\n<li>Text messages were actually limited to 120 characters because that was the extra space available in consistent pings from network towers to cell phones. Therefore text messages offered NO additional cost to the telephone providers</li>\n</ul>\n</li>\n<li>$22 billion acquisition that has yet to be monetized but was a great takeout play by Facebook</li>\n<li>Hated advertising on the platform and got in a HUGE fight with Facebook over this, leaving like $800 million on the table</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"the-lean-startup-and-ltse\">The Lean Startup and LTSE <a class=\"heading-anchor-permalink\" href=\"#the-lean-startup-and-ltse\">#</a></h2>\n<h2 id=\"tiktok\">TikTok <a class=\"heading-anchor-permalink\" href=\"#tiktok\">#</a></h2>\n<h2 id=\"disney-plus\">Disney Plus <a class=\"heading-anchor-permalink\" href=\"#disney-plus\">#</a></h2>\n<ul>\n<li>CEO: Bob Iger\n<ul>\n<li>Transformed the way Disney was run and brought them out of their dark days</li>\n<li>Acquired Pixar, Lucas Films, Fox, to bring great animation technology and IP into the studio</li>\n</ul>\n</li>\n<li>The Disney flywheel - centering around content creation - allows them to draw a significant amount of extra revenue from merchandising, parks, etc. from their IP.</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"venmo\">Venmo <a class=\"heading-anchor-permalink\" href=\"#venmo\">#</a></h2>\n<ul>\n<li>Founder/CEO: Andrew Kortina</li>\n<li>There is no business model on peer-to-peer payments since cash is free\n<ul>\n<li>The only business model is attracting peer-to-peer customers to incentivize merchants to use your platform as a payments option and take a cut\n<ul>\n<li>The PayPal business model</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Acquired by Braintree (for not that much) then PayPal and would not have survived without acquisitions</li>\n<li>Did a really weird and random marketing stunt - Brian uses venmo - where people had no idea who Brian was and thus it went viral</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"netflix\">Netflix <a class=\"heading-anchor-permalink\" href=\"#netflix\">#</a></h2>\n<ul>\n<li>CEO: Reid Hastings</li>\n<li>Two separate eras: DVD rental and streaming</li>\n<li>Team mentality - not a family - if you are not performing they will have to let you go because it’s not fair to the rest of the team</li>\n<li>Blockbuster actually had great management but corporate raider Carl Icahn kicked out CEO over comp. dispute and installed new guy who “didn’t believe in internet businesses” and wanted to bring back the hayday of brick and mortar stores lol\n<ul>\n<li>Blockbuster online was going to beat Netflix - Netflix even capitulated and offered to sell to Blockbuster - before this self-inflicted wound happened</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"tesla\">Tesla <a class=\"heading-anchor-permalink\" href=\"#tesla\">#</a></h2>\n<h2 id=\"uber\">Uber <a class=\"heading-anchor-permalink\" href=\"#uber\">#</a></h2>\n<ul>\n<li>Theme of companies IPO’ing in the A+ era (2018-2019 ish) is because companies were staying private longer. Where previously it was 3-4 years post-founding until going public, now it is closer to 10-12 years. Thus companies founded post-2008 recession were all IPO’ing around the same time</li>\n<li>Co-founder/CEO: Travis Kalanick, Co-founder: Garret Camp\n<ul>\n<li>Travis got scorched on lawsuits before Uber thus leading to his personality</li>\n</ul>\n</li>\n<li>Uber for the first couple years was in the black-car market, Lyft came in and did borderline-illegal peer-to-peer ridesharing which blew up the unit economics\n<ul>\n<li>Thus it was a race to outlast each other and raise as much capital as possible so the unit economics could return to profitability</li>\n</ul>\n</li>\n<li>Uber had a massive culture problem in 2017 and Dara Khosrowshahi became CEO and helped fix the culture</li>\n<li>Uber’s A+ possibility is having drivers be 100% occupied between Eats/Rideshare, etc. so then they only use Uber and not a competitor ;like Lyft. This will turn the unit economics in their favor.</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"pinterest\">Pinterest <a class=\"heading-anchor-permalink\" href=\"#pinterest\">#</a></h2>\n<ul>\n<li>Founder/Eventual CEO: Ben Silverman</li>\n<li>Key theme: Pinterest did a great job investing in their growth <em>before</em> they actually grew\n<ul>\n<li>Invested in HR, Ops, executives, culture, etc.</li>\n</ul>\n</li>\n<li>Women drove a lot of the success at the company throughout all stages of its life\n<ul>\n<li>They had a ton of women engineers which matched the demographics of their user base and really pushed the product forward</li>\n</ul>\n</li>\n<li>There is a lot of value in keeping a team together\n<ul>\n<li>You begin to learn everyone’s strengths and weaknesses and get quicker at building things together</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"espn\">ESPN <a class=\"heading-anchor-permalink\" href=\"#espn\">#</a></h2>\n<ul>\n<li>Theme: constantly be analyzing your business model: paying cable providers vs them paying you</li>\n<li>Be the thing that provides value not the commodity</li>\n<li>Capital cities buys ABC worth more than their entire company “minnow swallows whale” -&gt; capital cities then becomes ABC</li>\n<li>ESPN created value then captured it (March Madness, Sunday Night Football, Monday Night Football are all things they essentially created) then captured it with their network</li>\n<li>They didn’t ride the wave, they created it\n<ul>\n<li>Business model innovation coupled with riding/creating a wave is key to creating a massive</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"snap\">Snap <a class=\"heading-anchor-permalink\" href=\"#snap\">#</a></h2>\n<ul>\n<li>Theme: don’t be afraid of a large incumbent launching your feature - it will bring you publicity (like when Facebook launching a Snap competitor)</li>\n<li>Founders originally stopped working on Snapchat until one of Evan Spiegel’s cousins schools started using it to get around high-school messaging restrictions</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"softbank\">Softbank <a class=\"heading-anchor-permalink\" href=\"#softbank\">#</a></h2>\n<ul>\n<li>Founder: Masayoshi Son (Masa)\n<ul>\n<li>He has an incredible story and has done amazingly well in business - even surpassing Bill Gates in wealth at one point during the tech bubble</li>\n<li>Once the tech bubble burst he lost more money than anyone in history - $70 billion</li>\n</ul>\n</li>\n<li>Huge on getting in-person meetings: meeting with McDonald’s businessman, meeting with Steve Jobs for phone idea/becoming the exclusive provider in Japan</li>\n<li>Masa made a $20 million investment in Alibaba which turned into $60 billion\n<ul>\n<li>Could be the most successful investment of all time</li>\n</ul>\n</li>\n<li>Softbank went into broadband, telecommunications, investments, etc. because after the tech bubble burst Masa realized that stable cash flow is <strong>really</strong> important in building sustainable businesses</li>\n<li>Softbank is well-known for its Vision Fund, a $100 billion fund for growth capital\n<ul>\n<li>This is by far the biggest fund ever raised</li>\n<li>Regardless of how successful it ends up being, this will generate $15 billion in management fees by the end of the 12-15 year lockup period -&gt; stable cash flow</li>\n<li>One of the reasons they were so successful in raising this capital is because it is one of the only avenues for massive wealth funds like the Saudi Arabia sovereign wealth fund to generate returns\n<ul>\n<li>You can’t deploy that much capital anywhere else</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"github\">Github <a class=\"heading-anchor-permalink\" href=\"#github\">#</a></h2>\n<ul>\n<li>The original version of Git came after the main distributed version control company revoked its free licenses for the open-source community\n<ul>\n<li>Linus built the first prototype of git in like a week</li>\n</ul>\n</li>\n<li>Theme: the wax and wane of technologies - centralized/decentralized, client-server/local, these go through cycles</li>\n<li>Theme: It is <strong>really</strong> important to nail the line for freemium models at the right point where it benefits the overall product\n<ul>\n<li>Github: free public repos but paid private repos\n<ul>\n<li>The free version which benefits the open-source community and the Github product as a whole. For companies protecting their IP they have to pay. This is a perfect freemium model.</li>\n</ul>\n</li>\n<li>Zoom: free calls up to 40 mins\n<ul>\n<li>Free customers can just start another call</li>\n<li>The ideal business meeting, however, is 45 minutes thus the 40 minute freemium model, encouraging enterprise users to pay</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"lyft\">Lyft <a class=\"heading-anchor-permalink\" href=\"#lyft\">#</a></h2>\n<ul>\n<li>Pioneered the peer-to-peer ridesharing\n<ul>\n<li>It was basically illegal when they started and laws changed to accommodate it\n<ul>\n<li>Uber tried to get Lyft shut down</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Was founded on the mission to reduces emissions by carpooling\n<ul>\n<li>The environmental consciousness is a core tenet of Lyft</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"slack\">Slack <a class=\"heading-anchor-permalink\" href=\"#slack\">#</a></h2>\n<ul>\n<li>When Stewart Butterfield had to lay people off of his game company he made sure they all got jobs\n<ul>\n<li>Built up trust for them to come to work at Slack</li>\n</ul>\n</li>\n<li>Great companies are built at the intersection of cultural, technological, and business model shift</li>\n<li>Slack basically wrapped IRC (internet relay control)</li>\n<li>They used Twitter to amplify the messages of people evanelizing Slack</li>\n<li>Nailed their freemium model\n<ul>\n<li>number of searchable and archivable messages instead of number of users\n<ul>\n<li>This encourages people to show the functionality to coworkers</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>DL (Direct Listing) vs. IPO\n<ul>\n<li>No additional shares issued so there is no dilution</li>\n<li>Great for companies who are profitable and don’t need money</li>\n<li>No lockup period for DPO’s. Employees/people can liquidate stock</li>\n</ul>\n</li>\n<li>There are two ways to make money: “bundling and unbundling”</li>\n<li>They understand the customer funnel really well\n<ul>\n<li>They find triggers where customers won’t churn (2000 messages per team for Slack)</li>\n<li>Therefore they designed the product around having teams reach 2000 messages since they know once they hit that point they won’t churn</li>\n</ul>\n</li>\n<li>They were their own first customer\n<ul>\n<li>This way they learned what the customers wanted</li>\n</ul>\n</li>\n<li>Customer acquisition cost at its most basic sense is (new customers) divided by marketing dollars spend</li>\n<li>Started in Canada</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"google-docs\">Google Docs <a class=\"heading-anchor-permalink\" href=\"#google-docs\">#</a></h2>\n<ul>\n<li>A ton of people use Google productivity tools but it isn’t a great business</li>\n<li>Finding a good business is sometimes better than finding something that may get more users</li>\n<li>Theme: <strong>Focusing on your core product is the most imporant thing in a startup</strong></li>\n<li>“If you don’t have a struggle you can’t have something great” - something from Pixar</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"spotify\">Spotify <a class=\"heading-anchor-permalink\" href=\"#spotify\">#</a></h2>\n<ul>\n<li>Founded in Sweden</li>\n<li>CEO: Daniel Eck</li>\n<li>Growth hacking strategy: make it invite only with the invites coming from other users <em>OR</em> pay to skip the invite</li>\n<li>Sean Parker wrote an email to Spotify telling them they had to integrate with Facebook for viral sharing\n<ul>\n<li>Iconic email and a masterpiece\n<ul>\n<li>Facebook as a distribution vehicle fueled Spotify’s growth</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Have a paid user percentage somewhere in the high 40%</li>\n<li>Barry McCarthy organized Spotify DL as CFO\n<ul>\n<li>Helped lead Netflix too</li>\n</ul>\n</li>\n<li>Theme: <strong>Tech companies generally have really high (70-80 ish percent) gross margins since the marginal cost of producing another piece of software is small</strong>\n<ul>\n<li>Spotify, however, doesn’t have these margins because they have to pay artists. Their gross margins are around 20%</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"nest\">Nest <a class=\"heading-anchor-permalink\" href=\"#nest\">#</a></h2>\n<ul>\n<li>Theme: <strong>If you are building a platform company most of the time you need to resources of a platform company (e.g. Google, Facebook kind of) to succeed</strong></li>\n<li>“People who are really serious about software should make their own hardware” - Alan Kay</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"lucas-film\">Lucas Film <a class=\"heading-anchor-permalink\" href=\"#lucas-film\">#</a></h2>\n<ul>\n<li>Theme: <strong>successful acquisitions are hands-off</strong> (e.g. Instagram, Pixar)\n<ul>\n<li>Preserve the culture of the acquiree as much as possible</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"alibaba\">Alibaba <a class=\"heading-anchor-permalink\" href=\"#alibaba\">#</a></h2>\n<ul>\n<li>Theme: <strong>In emerging marketplaces it’s not about who has the most market share now, it’s about who will have the most marketshare when consumers enter the market</strong></li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"arm\">ARM <a class=\"heading-anchor-permalink\" href=\"#arm\">#</a></h2>\n<ul>\n<li>ARM pioneered the reduced instruction set (RISC)\n<ul>\n<li>Less power, more performance</li>\n<li>However, Intel had the monopoly with x86 so that was what most computers used</li>\n</ul>\n</li>\n<li>Low power chips led to a perfect use case in phones\n<ul>\n<li>ARM has 96% market share in all phones, embedded devices, etc.</li>\n</ul>\n</li>\n<li>Theme: **It’s not about what your TAM is today, it’s more important what your TAM will be tomorrow</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"t-mobile\">T-mobile <a class=\"heading-anchor-permalink\" href=\"#t-mobile\">#</a></h2>\n<ul>\n<li>Listen to customer service calls to listen to your customers</li>\n<li>The T-mobile strategy:\n<ul>\n<li>Declare victory on an enemy (AT&amp;T), pick on them, then attack them</li>\n</ul>\n</li>\n<li>It’s a Warren Buffet style business\n<ul>\n<li>Cable and predictable cash flow</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"dropbox\">Dropbox <a class=\"heading-anchor-permalink\" href=\"#dropbox\">#</a></h2>\n<ul>\n<li>Theme: <strong>stick to your core product</strong>\n<ul>\n<li>Dropbox did not always do a great job with this as they grew</li>\n</ul>\n</li>\n<li>Theme: <strong>solve a problem people have and make it just work</strong></li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"twitch\">Twitch <a class=\"heading-anchor-permalink\" href=\"#twitch\">#</a></h2>\n<ul>\n<li>For every one content provider there is like 100 Lurkers</li>\n<li>Twitch takes half of the subscription take rate</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"siri\">Siri <a class=\"heading-anchor-permalink\" href=\"#siri\">#</a></h2>\n<ul>\n<li>Theme: <strong>more natural computing with voice-based control and interactive technology could be the future</strong></li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"waze\">Waze <a class=\"heading-anchor-permalink\" href=\"#waze\">#</a></h2>\n<ul>\n<li>The right way to advertise on mobile isn’t banner ads, it’s native, location-sensitive, etc.</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"paypal\">PayPal <a class=\"heading-anchor-permalink\" href=\"#paypal\">#</a></h2>\n<ul>\n<li>Viral growth hacking: invite a friend and get free money</li>\n<li>Theme: <strong>Can’t start with the end state, start with something really small then rapidly iterate with real market feedback</strong></li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"virgin-airlines\">Virgin Airlines <a class=\"heading-anchor-permalink\" href=\"#virgin-airlines\">#</a></h2>\n<ul>\n<li>Theme: <strong>Your moat is one of the most important things when building a business</strong>\n<ul>\n<li>The airline industry has little moat</li>\n</ul>\n</li>\n<li>Theme: **Focus on what you are good at - your product can’t be everything to everyone</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"next\">Next <a class=\"heading-anchor-permalink\" href=\"#next\">#</a></h2>\n<ul>\n<li>It is a difficult problem to take highly research oriented technology and turn it into a product</li>\n<li>It’s super important to make the products “just work”</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"skype\">Skype <a class=\"heading-anchor-permalink\" href=\"#skype\">#</a></h2>\n<ul>\n<li>Dual-track process: file for IPO while simultaneously fielding acquisition offers</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"bamtech\">BAMTech <a class=\"heading-anchor-permalink\" href=\"#bamtech\">#</a></h2>\n<ul>\n<li>Stairstep your way into becoming a great company by solving real problems one at a time\n<ul>\n<li>You can’t solve every problem at once</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"square\">Square <a class=\"heading-anchor-permalink\" href=\"#square\">#</a></h2>\n<ul>\n<li>Reinvented founder stories are probably more common than not\n<ul>\n<li>The power of stories draws people in</li>\n</ul>\n</li>\n<li>One of the founders: Jack Dorsey</li>\n<li>They got really good at the fraud prevention which is what got Square in the industry and allowed them to stay</li>\n<li>They sent the card reader for free and took fees on transactions\n<ul>\n<li>Business model innovation</li>\n</ul>\n</li>\n<li><strong>Naming a company</strong>: pick an empty word (Expedia, Square, etc.)\n<ul>\n<li>This will allow you to fill it with whatever you want and allow for pivots</li>\n<li>For example, Square does not constrain you to payments</li>\n</ul>\n</li>\n<li>Net 0 churn\n<ul>\n<li>The businesses that do churn are netted out by the businesses that don’t churn growing with the platform</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"aol-%2B-time-warner\">AOL + Time Warner <a class=\"heading-anchor-permalink\" href=\"#aol-%2B-time-warner\">#</a></h2>\n<ul>\n<li>“The worst acquisition of all time”</li>\n<li>AOL was a sinking ship and grabbed on to Time Warner to try to get some real value with its inflated internet shares</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"hp-acquiring-opsware\">HP Acquiring Opsware <a class=\"heading-anchor-permalink\" href=\"#hp-acquiring-opsware\">#</a></h2>\n<ul>\n<li>HP is Hewlett-Packard</li>\n<li>There are two types of markets and you <strong>need</strong> to know which one you are in\n<ul>\n<li>Emerging and consolidating</li>\n</ul>\n</li>\n<li>In the enterprise the best product doesn’t always win\n<ul>\n<li>Often it’s the product with the best sales (or the ones who can sell to the IT department head or CFO)</li>\n</ul>\n</li>\n<li>There is a lot of IP in how to sell certain software products</li>\n<li>Getting the timing right for a product is the absolute most important part of a business\n<ul>\n<li><strong>This is what 10x people have the ability to do</strong></li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"atlassian\">Atlassian <a class=\"heading-anchor-permalink\" href=\"#atlassian\">#</a></h2>\n<ul>\n<li>“Third Wave” of enterprise software: you don’t need huge sales forces anymore, the product sells itself\n<ul>\n<li>It is cheap enough and on a per-person basis where individuals can buy the product themselves\n<ul>\n<li>Doesn’t have to go through the CFO</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>The average SAAS company spends 50-100% of revenue on marketing for growth, Atlassian spends around 20%</li>\n<li>General growth hacking tip: Referral bonuses are a huge vehicle for growth in consumer facing products</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"stitch-fix\">Stitch Fix <a class=\"heading-anchor-permalink\" href=\"#stitch-fix\">#</a></h2>\n<ul>\n<li>Opportunities for businesses aren’t always created from technological shifts, sometimes it is societal\n<ul>\n<li>e.g. It becoming okay to have another person stay in your home - AirBNB</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"beats-by-dre\">Beats By Dre <a class=\"heading-anchor-permalink\" href=\"#beats-by-dre\">#</a></h2>\n<ul>\n<li>Disruption: instead of reproducing music exactly as it sounds you want it to be emotional, bass boosted, etc.</li>\n<li>To get people excited about something: clue them in on it early and ask for their feedback. They will feel like they have skin in the game</li>\n<li>Random: Monster completely overcharges for cables</li>\n<li>Apple Music kind of came from Beats Music</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"booking.com\"><a href=\"http://Booking.com\">Booking.com</a> <a class=\"heading-anchor-permalink\" href=\"#booking.com\">#</a></h2>\n<ul>\n<li>Accumulated long-tail supply: collected smaller hotels who were not listed on other platforms and were the only platform that had these hotels listed</li>\n<li><strong>Getting customers to convert in marketplace businesses is your biggest lever</strong></li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"superhuman\">Superhuman <a class=\"heading-anchor-permalink\" href=\"#superhuman\">#</a></h2>\n<ul>\n<li>Landing page: Took 2 hours to make on Squarespace and asked: what email client do you use? And what annoys you about it?\n<ul>\n<li>This is value proposition discovery and validation</li>\n</ul>\n</li>\n<li>“The only way to win is to be contrarian and right”</li>\n<li>Used to Van Westendorp pricing methodology</li>\n<li><strong>The fundamental job of a founder is to create momentum</strong></li>\n<li>Paul Graham essay: startup=growth</li>\n<li>Superhuman founder: Rahul Vohra</li>\n<li>Measured product-market fit numerically and systematically</li>\n<li>Used typeform for surveys</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"against-gravity\">Against Gravity <a class=\"heading-anchor-permalink\" href=\"#against-gravity\">#</a></h2>\n<ul>\n<li><strong>It is much more common for startups to die of indigestion from too much opportunity than starvation of too little</strong></li>\n<li>Qualification of investors - making sure they can help you in your venture - is super important for picking the right ones</li>\n<li>It is a lot easier to put out MVP’s for products in emerging markets than markets in which there are already products with product-market fit</li>\n<li><strong>You get the investors you ask for - be clear and honest about what you want/what your company is</strong></li>\n<li>You have to release something for feedback, you can’t just build it in secret for a long time\n<ul>\n<li>This is how you build the wrong thing</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n<h2 id=\"jason-calacalanis\">Jason Calacalanis <a class=\"heading-anchor-permalink\" href=\"#jason-calacalanis\">#</a></h2>\n<ul>\n<li><strong>How to get the most out of networking: always invite people to dinner, pick up the check, and introduce people to one another without expecting anything out of it</strong></li>\n</ul>\n<p><a href=\"#table-of-contents\">Back to top</a></p>\n",
      "id": 12
    },
    {
      "path": "Entrepreneurship/Business_Analysis.md",
      "url": "Entrepreneurship/Business_Analysis.html",
      "content": "# Analysis Methods\n\n## Cohort Analysis\n\n- Group customers by when they are acquired and analyze their purchase behaviors, lifetime value, churn, etc.\n- This is a super powerful analysis method and is becoming more and more widespread\n\n## 2x2 matrix\n\n- There is a 2x2 matrix when analyzing companies\n- You can be right or wrong, and it can be consensus or non-consensus\n- You build successful businesses and make money when you are right **and** non-consensus\n",
      "html": "<h1 id=\"analysis-methods\">Analysis Methods <a class=\"heading-anchor-permalink\" href=\"#analysis-methods\">#</a></h1>\n<h2 id=\"cohort-analysis\">Cohort Analysis <a class=\"heading-anchor-permalink\" href=\"#cohort-analysis\">#</a></h2>\n<ul>\n<li>Group customers by when they are acquired and analyze their purchase behaviors, lifetime value, churn, etc.</li>\n<li>This is a super powerful analysis method and is becoming more and more widespread</li>\n</ul>\n<h2 id=\"2x2-matrix\">2x2 matrix <a class=\"heading-anchor-permalink\" href=\"#2x2-matrix\">#</a></h2>\n<ul>\n<li>There is a 2x2 matrix when analyzing companies</li>\n<li>You can be right or wrong, and it can be consensus or non-consensus</li>\n<li>You build successful businesses and make money when you are right <strong>and</strong> non-consensus</li>\n</ul>\n",
      "id": 13
    },
    {
      "path": "Entrepreneurship/Terminology.md",
      "url": "Entrepreneurship/Terminology.html",
      "content": "### Venture Capital Terminology\n\n- 2 and 20: A management fee structure where VC's take a 2% management fee annually and 20% of the fund profits when the investment is returned\n- carry: profit percentage managers take on funds\n\n### General Terminology\n\n- lockup: the period of time where you cannot access your capital in a fund. E.g. one year lockup.\n- runway: how long a startup will survive at the current revenue and expense rates\n- Copyleft: an open-source paradigm where by using a copyleft software you are obligated to both open-source whatever you are working on and contribute back to the original software\n- s1: The form a company files when going public\n- f1: The foreign version of an s1",
      "html": "<h3 id=\"venture-capital-terminology\">Venture Capital Terminology <a class=\"heading-anchor-permalink\" href=\"#venture-capital-terminology\">#</a></h3>\n<ul>\n<li>2 and 20: A management fee structure where VC’s take a 2% management fee annually and 20% of the fund profits when the investment is returned</li>\n<li>carry: profit percentage managers take on funds</li>\n</ul>\n<h3 id=\"general-terminology\">General Terminology <a class=\"heading-anchor-permalink\" href=\"#general-terminology\">#</a></h3>\n<ul>\n<li>lockup: the period of time where you cannot access your capital in a fund. E.g. one year lockup.</li>\n<li>runway: how long a startup will survive at the current revenue and expense rates</li>\n<li>Copyleft: an open-source paradigm where by using a copyleft software you are obligated to both open-source whatever you are working on and contribute back to the original software</li>\n<li>s1: The form a company files when going public</li>\n<li>f1: The foreign version of an s1</li>\n</ul>\n",
      "id": 14
    },
    {
      "path": "Entrepreneurship/Venture_Capital.md",
      "url": "Entrepreneurship/Venture_Capital.html",
      "content": "# For Companies\n\n## Guidelines\n\n- Each round you generally sell 20-30% of your company\n  - You have to do the math: even if you grow from a $20 million to $150 million business but need to take on more seed rounds, it may have just been more time for the same monetary exit\n- \"Let's keep in touch\" is generally a no\n  - Venture capitalists just want to keep their options open\n\n# For Venture Capitalists\n",
      "html": "<h1 id=\"for-companies\">For Companies <a class=\"heading-anchor-permalink\" href=\"#for-companies\">#</a></h1>\n<h2 id=\"guidelines\">Guidelines <a class=\"heading-anchor-permalink\" href=\"#guidelines\">#</a></h2>\n<ul>\n<li>Each round you generally sell 20-30% of your company\n<ul>\n<li>You have to do the math: even if you grow from a $20 million to $150 million business but need to take on more seed rounds, it may have just been more time for the same monetary exit</li>\n</ul>\n</li>\n<li>“Let’s keep in touch” is generally a no\n<ul>\n<li>Venture capitalists just want to keep their options open</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"for-venture-capitalists\">For Venture Capitalists <a class=\"heading-anchor-permalink\" href=\"#for-venture-capitalists\">#</a></h1>\n",
      "id": 15
    },
    {
      "path": "File_Sharing.md",
      "url": "File_Sharing.html",
      "content": "# BitTorrent\n\n- BitTorrent is a v2 peer-to-peer file sharing protocol\n- It allows the client to \"shard\" files - split them into different chunks and download them piecewise simultaneously from different hosts\n- This technology is the core of a lot of privacy ",
      "html": "<h1 id=\"bittorrent\">BitTorrent <a class=\"heading-anchor-permalink\" href=\"#bittorrent\">#</a></h1>\n<ul>\n<li>BitTorrent is a v2 peer-to-peer file sharing protocol</li>\n<li>It allows the client to “shard” files - split them into different chunks and download them piecewise simultaneously from different hosts</li>\n<li>This technology is the core of a lot of privacy</li>\n</ul>\n",
      "id": 16
    },
    {
      "path": "Frontend.md",
      "url": "Frontend.html",
      "content": "#### Color changes\n\nProper design frameworks have a standard color set. To theme your app you can easily darken and lighten each of the colors with darken or lighten classes. This produces colors that go together well.\n\n### Icons\n\nIcons always act weird in Vue, you cannot toggle their classes dynamically and they weren't appearing when accessing by `wrapper.find` in just\n",
      "html": "<h4 id=\"color-changes\">Color changes <a class=\"heading-anchor-permalink\" href=\"#color-changes\">#</a></h4>\n<p>Proper design frameworks have a standard color set. To theme your app you can easily darken and lighten each of the colors with darken or lighten classes. This produces colors that go together well.</p>\n<h3 id=\"icons\">Icons <a class=\"heading-anchor-permalink\" href=\"#icons\">#</a></h3>\n<p>Icons always act weird in Vue, you cannot toggle their classes dynamically and they weren’t appearing when accessing by <code>wrapper.find</code> in just</p>\n",
      "id": 17
    },
    {
      "path": "HTML.md",
      "url": "HTML.html",
      "content": "## Responsive Tag\n\nTo have the html document itself adust to all viewports you must use\n\n```HTML\n<meta name=\"viewport\" content=\"minimum-scale-1, initial-scale=1, width=device-width\">\n```\n\n- Semantic `HTML` is the foundation of accessibility\n",
      "html": "<h2 id=\"responsive-tag\">Responsive Tag <a class=\"heading-anchor-permalink\" href=\"#responsive-tag\">#</a></h2>\n<p>To have the html document itself adust to all viewports you must use</p>\n<pre><code class=\"language-HTML\">&lt;meta name=&quot;viewport&quot; content=&quot;minimum-scale-1, initial-scale=1, width=device-width&quot;&gt;\n</code></pre>\n<ul>\n<li>Semantic <code>HTML</code> is the foundation of accessibility</li>\n</ul>\n",
      "id": 18
    },
    {
      "path": "JavaScript/Flux.md",
      "url": "JavaScript/Flux.html",
      "content": "# Flux\n\nFlux is a pattern consisting of a singleton dispatcher that emits events (actions) with a `type` and `payload` , triggering callback functions in all stores. The stores then `switch` on the action type and decide if they should respond to the emitted action\n\nData flow is generally as follows:\n\n1. Component calls action creator function\n2. The action creator may make an API call and await the response\n3. The action creator then dispatches an event through the `Dispatcher' singleton\n4. When stores are registered to the `Dispatcher` in their constructor, they register a callback function to execute on every emitted action. Thus, each store will execute its callback\n5. If the store is responsible for the action `type` (as determined by the `switch` statement) it updates its data\n6. A higher order component (HOC) is used to inject store state as props into connected components. Thus, whenever the store state changes so do the props of connected components, thus causing them to re-render\n\nIn general, the `Dispatcher` is simply a registry for callbacks\n",
      "html": "<h1 id=\"flux\">Flux <a class=\"heading-anchor-permalink\" href=\"#flux\">#</a></h1>\n<p>Flux is a pattern consisting of a singleton dispatcher that emits events (actions) with a <code>type</code> and <code>payload</code> , triggering callback functions in all stores. The stores then <code>switch</code> on the action type and decide if they should respond to the emitted action</p>\n<p>Data flow is generally as follows:</p>\n<ol>\n<li>Component calls action creator function</li>\n<li>The action creator may make an API call and await the response</li>\n<li>The action creator then dispatches an event through the `Dispatcher’ singleton</li>\n<li>When stores are registered to the <code>Dispatcher</code> in their constructor, they register a callback function to execute on every emitted action. Thus, each store will execute its callback</li>\n<li>If the store is responsible for the action <code>type</code> (as determined by the <code>switch</code> statement) it updates its data</li>\n<li>A higher order component (HOC) is used to inject store state as props into connected components. Thus, whenever the store state changes so do the props of connected components, thus causing them to re-render</li>\n</ol>\n<p>In general, the <code>Dispatcher</code> is simply a registry for callbacks</p>\n",
      "id": 19
    },
    {
      "path": "JavaScript/JavaScript.md",
      "url": "JavaScript/JavaScript.html",
      "content": "### Rendering Engines vs. Javascript Engine\n\nA Javascript engine, like `v8` is the engine that processes and runs the webpage JavaScript. \"Hot\" code paths are optimized for quicker execution (e.g. looking up a property in an object directly). The browser JavaScript engine queries the rendering engine for displaying things.\n\nA browser rendering engine, e.g. `Gecko` and `Webkit` displays the webpages written in the markup language. This interprets `HTML`, `CSS`, `XML`, images, etc. and produces the final webpage for the browser.\n\n### General Language Tips\n\n- When you inherit a class and it does not override the constructor it calls the parent constructor by default\n- `Array.slice()` returns a shallow copy of an array\n- The spread operator `...` was originally added for arrays in es6. However, a later change enabled the spread operator to be used with objects too, e.g. `const newObj = {...obj}`\n- You can compress bundles with `gzip`, `bzip`, etc. to greatly reduce bundle size\n- Wrapping code that spans multiple lines with `()` prevents the pitfalls of automatic semicolon insertion\n- In JavaScript, class methods are not bound by default. That means that the class method's `this` keyword will not always refer to the class itself - it will refer to whatever called the function\n  - To bind the function to the class you can do `this.myFunc = this.myFunc.bind(this)` in the class constructor\n- Computed property syntax: `[varName]` -> will result in the string value of `varName`\n\ne.g.\n\n```JavaScript\nmyVar = \"computedPropName\"\n{\n    [myVar]: \"computedPropValue\n}\n```\n\nwill result in \n\n```JavaScript\n{\n    computedPropName: \"computedPropValue\n}\n```",
      "html": "<h3 id=\"rendering-engines-vs.-javascript-engine\">Rendering Engines vs. Javascript Engine <a class=\"heading-anchor-permalink\" href=\"#rendering-engines-vs.-javascript-engine\">#</a></h3>\n<p>A Javascript engine, like <code>v8</code> is the engine that processes and runs the webpage JavaScript. “Hot” code paths are optimized for quicker execution (e.g. looking up a property in an object directly). The browser JavaScript engine queries the rendering engine for displaying things.</p>\n<p>A browser rendering engine, e.g. <code>Gecko</code> and <code>Webkit</code> displays the webpages written in the markup language. This interprets <code>HTML</code>, <code>CSS</code>, <code>XML</code>, images, etc. and produces the final webpage for the browser.</p>\n<h3 id=\"general-language-tips\">General Language Tips <a class=\"heading-anchor-permalink\" href=\"#general-language-tips\">#</a></h3>\n<ul>\n<li>When you inherit a class and it does not override the constructor it calls the parent constructor by default</li>\n<li><code>Array.slice()</code> returns a shallow copy of an array</li>\n<li>The spread operator <code>...</code> was originally added for arrays in es6. However, a later change enabled the spread operator to be used with objects too, e.g. <code>const newObj = {...obj}</code></li>\n<li>You can compress bundles with <code>gzip</code>, <code>bzip</code>, etc. to greatly reduce bundle size</li>\n<li>Wrapping code that spans multiple lines with <code>()</code> prevents the pitfalls of automatic semicolon insertion</li>\n<li>In JavaScript, class methods are not bound by default. That means that the class method’s <code>this</code> keyword will not always refer to the class itself - it will refer to whatever called the function\n<ul>\n<li>To bind the function to the class you can do <code>this.myFunc = this.myFunc.bind(this)</code> in the class constructor</li>\n</ul>\n</li>\n<li>Computed property syntax: <code>[varName]</code> -&gt; will result in the string value of <code>varName</code></li>\n</ul>\n<p>e.g.</p>\n<pre><code class=\"language-JavaScript\">myVar = &quot;computedPropName&quot;\n{\n    [myVar]: &quot;computedPropValue\n}\n</code></pre>\n<p>will result in</p>\n<pre><code class=\"language-JavaScript\">{\n    computedPropName: &quot;computedPropValue\n}\n</code></pre>\n",
      "id": 20
    },
    {
      "path": "JavaScript/React/Hooks.md",
      "url": "JavaScript/React/Hooks.html",
      "content": "# Hooks\n\n- They really are an improvement to class based components\n\n- New in version `16.8` and are completely backwards compatible\n- **Hooks allow you to split up your components based on pieces of functionality instead of by lifecycle methods**\n- They let you \"hook\" in to `React` lifecycle methods in functional components\n  - They don't work inside classes\n\n## useState\n\n- Takes an initial state as an argument and returns the state variable and a function used to update it\n\n## useEffect\n\n- Replaces `componentDidMount`, `componentWillUnmount` and `componentDidUpdate`\n- **Both the hook and it's cleanup code runs every rerender**\n  - This handles `componentDidUpdate` for you, leading to fewer bugs\n- You can pass it a cleanup function to run (essentially `componentWillUnmount`)\n- **Only** call hooks at the top level of your function, **never** in if statements or other conditionals\n  - Hooks depend on being called in the proper order to maintain state across re-renders and conditionals can throw this out of order and break everything\n- Hooks can replace HOCs and render props by giving you a way to reuse stateful logic\n  - Custom hooks, etc.\n\nQuick demonstration of why hooks are cool:\n\nClass-based\n\n```JavaScript\ncomponentDidMount(){\n    setupSubscriptions()\n    getData()\n}\n\ncomponentDidUnmount(){\n    clearSubscriptions()\n}\n\n```\n\nhere, we are forced to group functions by lifecycle methods, not by functionality\n\nUsing hooks, however, this becomes\n\n```JavaScript\n\nuseEffect(getData)\nuseEffect(setupSubscriptions, clearSubscriptions)\n```\n\nAllowing us to group related functionality\n\n- Hooks \"hook\" into lifecycle methods, you wouldn't use them for something like an API call when a user clicks a button\n- since `useEffect` runs cleanup code every re-render it handles `componentDidUpdate` by default\n- You can specify when not to run cleanup code by passing an array of vars to shallow compare to `useEffect`\n- There is a `react-hooks` `eslint` plugin to enforce these hook rules in your code\n  - No calling hooks in conditionals, etc.\n- `React` matches local variable state to `useState`/`useEffect` in the order in which they were called\n  - This is how `React` knows which variable to read for current state for each `useState` call and preserve state on every re-render\n    - Recall: for [ myState, setState ] =`useState(0)` `0` is just the initial state. Every subsequent call to that `useState` method grabs the value from `myState`\n- If you need a hook to run conditionally you put the conditional inside the hook\n- State is completely isolated per component in hooks\n- There are other hooks besides `useState` and `useEffect` in the `React` API and you can also write your own as a combination of the API's primitives (`useState`, `useEffect`, etc.)",
      "html": "<h1 id=\"hooks\">Hooks <a class=\"heading-anchor-permalink\" href=\"#hooks\">#</a></h1>\n<ul>\n<li>\n<p>They really are an improvement to class based components</p>\n</li>\n<li>\n<p>New in version <code>16.8</code> and are completely backwards compatible</p>\n</li>\n<li>\n<p><strong>Hooks allow you to split up your components based on pieces of functionality instead of by lifecycle methods</strong></p>\n</li>\n<li>\n<p>They let you “hook” in to <code>React</code> lifecycle methods in functional components</p>\n<ul>\n<li>They don’t work inside classes</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"usestate\">useState <a class=\"heading-anchor-permalink\" href=\"#usestate\">#</a></h2>\n<ul>\n<li>Takes an initial state as an argument and returns the state variable and a function used to update it</li>\n</ul>\n<h2 id=\"useeffect\">useEffect <a class=\"heading-anchor-permalink\" href=\"#useeffect\">#</a></h2>\n<ul>\n<li>Replaces <code>componentDidMount</code>, <code>componentWillUnmount</code> and <code>componentDidUpdate</code></li>\n<li><strong>Both the hook and it’s cleanup code runs every rerender</strong>\n<ul>\n<li>This handles <code>componentDidUpdate</code> for you, leading to fewer bugs</li>\n</ul>\n</li>\n<li>You can pass it a cleanup function to run (essentially <code>componentWillUnmount</code>)</li>\n<li><strong>Only</strong> call hooks at the top level of your function, <strong>never</strong> in if statements or other conditionals\n<ul>\n<li>Hooks depend on being called in the proper order to maintain state across re-renders and conditionals can throw this out of order and break everything</li>\n</ul>\n</li>\n<li>Hooks can replace HOCs and render props by giving you a way to reuse stateful logic\n<ul>\n<li>Custom hooks, etc.</li>\n</ul>\n</li>\n</ul>\n<p>Quick demonstration of why hooks are cool:</p>\n<p>Class-based</p>\n<pre><code class=\"language-JavaScript\">componentDidMount(){\n    setupSubscriptions()\n    getData()\n}\n\ncomponentDidUnmount(){\n    clearSubscriptions()\n}\n\n</code></pre>\n<p>here, we are forced to group functions by lifecycle methods, not by functionality</p>\n<p>Using hooks, however, this becomes</p>\n<pre><code class=\"language-JavaScript\">\nuseEffect(getData)\nuseEffect(setupSubscriptions, clearSubscriptions)\n</code></pre>\n<p>Allowing us to group related functionality</p>\n<ul>\n<li>Hooks “hook” into lifecycle methods, you wouldn’t use them for something like an API call when a user clicks a button</li>\n<li>since <code>useEffect</code> runs cleanup code every re-render it handles <code>componentDidUpdate</code> by default</li>\n<li>You can specify when not to run cleanup code by passing an array of vars to shallow compare to <code>useEffect</code></li>\n<li>There is a <code>react-hooks</code> <code>eslint</code> plugin to enforce these hook rules in your code\n<ul>\n<li>No calling hooks in conditionals, etc.</li>\n</ul>\n</li>\n<li><code>React</code> matches local variable state to <code>useState</code>/<code>useEffect</code> in the order in which they were called\n<ul>\n<li>This is how <code>React</code> knows which variable to read for current state for each <code>useState</code> call and preserve state on every re-render\n<ul>\n<li>Recall: for [ myState, setState ] =<code>useState(0)</code> <code>0</code> is just the initial state. Every subsequent call to that <code>useState</code> method grabs the value from <code>myState</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>If you need a hook to run conditionally you put the conditional inside the hook</li>\n<li>State is completely isolated per component in hooks</li>\n<li>There are other hooks besides <code>useState</code> and <code>useEffect</code> in the <code>React</code> API and you can also write your own as a combination of the API’s primitives (<code>useState</code>, <code>useEffect</code>, etc.)</li>\n</ul>\n",
      "id": 21
    },
    {
      "path": "JavaScript/React/Material-ui.md",
      "url": "JavaScript/React/Material-ui.html",
      "content": "# Material-ui\n\n- To use spacing utilities you wrap components in a `Box` component\n  - Only fully in `v4`\n- Designed on the font `Roboto`\n  - Must include this yourself\n- Colors can be imported and modified with `blue[500]` for example\n- You can configure the theme through `createMuiTheme`\n- Icon names are in PascalCase\n  - Should use default exports if you don't have tree-shaking configured (though webpack in production should do this for you)\n\n## Component Details\n\n- `Typography`: A container component that you can put sub-components inside. This is used to set the font characteristics of the children\n- `Hidden`: A component that allows you to hide components based on breakpoints\n- `Popover` and `Popper`: Open popup menus\n- `ClickAwayListener`: Listen to click events _not_ on the component\n\n#### Transitions\n\nMaterial UI provides transition components that you wrap around the components you want to apply the transition to\n\n- `Fade`\n- `Collapse`\n- `Grow`\n- `Slide`\n- `Zoom`\n\n## Layout\n\n- `<Grid>`: Responsive UI is based on a 12 column grid layout\n  - Has `xs`, `sm`, `md`, `lg`, and `xl` breakpoints\n  - Spacing is automatically taken into account when setting the number of columns\n  - Can define multiple widths on a `<Grid item>` for resizing at different breakpoints\n  - Built on Flexbox\n  - Split into two types: `container` and `item` but you can have both, e.g. `<Grid container item>` for it to be a flex container and flex item\n\n#### Breakpoints\n\n##### Values\n\n- `xs`: 0-599px\n- `sm`: 600-959px\n- `md`: 960-1279px\n- `lg`: 1280-1919px\n- `xl`: 1920px or larger\n\n##### API\n\n- `useMediaQuery`: CSS media Query hook for React\n\n## Styling\n\n- Inline styling vs classes:\n  - Only use inline style for dynamic styling\n  - Classes are much faster, have auto-prefixing, media queries, better debugging, keyframes, etc.\n- `withStyles`, `withTheme`, are HOC's for styling\n- CSS in JS is the current standard\n  - 3 different APIs for this:\n    - Hook API (`makeStyles`)\n    - Styled Components API\n    - Higher order component (HOC) API (`withStyles`)\n- To modify/obfuscate class names in production you can use a class name generator\n- `ThemeProvider` takes a theme property and makes the theme available down the React tree\n- `useTheme()`: A hook to return the theme of the stylesheet in a functional component\n- `withStyles()`: Link a stylesheet with a component using HOCs\n- `withTheme()(Component): Class-based API for providing the theme to a component as a prop\n\n#### Classes\n\n- Can use with withStyles and className\n- Class names follow the pattern `Mui[<component_name>]-[<style_rule_name>]-UUID`\n- Can use the `classnames` library to apply multiple class names to an element or just use string interpolation\n- All components accept a `classes` property for customization\n  - I need to read more about this\n\n## Interesting/Appealing Components (For Potential Design Use)\n\n- `Breadcrumbs` with icons\n- `ToggleButton`\n- `Avatar`\n- `Badges`\n- `Tabs` for navbar navigation\n- `IconButtons`\n- `Button` with `component={Link}`\n- `Chips`\n- `Dialog`\n  -  A modal like components that interrupts the user and prompts them to make a decision\n- `Divider`\n- `Drawer` for a side nav\n- `ExpansionPanel` for an accordian like expansion effect\n- `Menu` For profile, login/logout account avatar\n- `Paper`\n  - A flat, opaque component representing paper\n- `Progress`\n- `FormGroup`\n- `Switch`\n- `Snackbar`\n- `Steppers`\n- `Tables` and `TablePagination`\n- `TextField`\n  - Wraps `Label`, `Input`, and `HelpText` components to make it easier to display a nice field\n- `Input` with adornments (prepended and appended text/icons)\n  - Can pass the adornments in to `TextField` as well\n- `Tooltip`\n  - Must pass props down to child elements if it is a custom react component\n  - Otherwise, it will handle the hovering and subsequent activation for you\n\n## Customization\n\n- Inject theme with `MuiThemeProvider`\n- The overrides object in `createMuiTheme` allows you to override every instance of a material-ui component\n- You can also apply properties on all instances of a given component with the `props` keyword in `crateMuiTheme`\n\n## Testing\n- `createShallow()`: Shallow render a component\n- `createMount()`: Fully mount the component on the DOM\n- `createRender()`: Render component to string\n\n## General Tips\n\n- In general, material-ui is a library implementing Google's material design\n- You can code split by moving CSS and JS into different files\n- Property spread: Properties flow down from Mui components to their children.\n\ne.g.\n```HTML\n<MenuItem disableRipple>\n```\n\n`disableRipple` will flow from `MenuItem` -> `ListItem` -> `ButtonBase` thus disabling the ripple at `ButtonBase`\n- The `component` property of material-ui components allows you to change what the root node renders as. This is how you can integrate with something like `react-router`\n  - `component` as a prop should always be passed statically, not with an arrow function directly in the prop, otherwise a new component will have to be created and rendered on every re-render, regardless of whether it changes\n\n",
      "html": "<h1 id=\"material-ui\">Material-ui <a class=\"heading-anchor-permalink\" href=\"#material-ui\">#</a></h1>\n<ul>\n<li>To use spacing utilities you wrap components in a <code>Box</code> component\n<ul>\n<li>Only fully in <code>v4</code></li>\n</ul>\n</li>\n<li>Designed on the font <code>Roboto</code>\n<ul>\n<li>Must include this yourself</li>\n</ul>\n</li>\n<li>Colors can be imported and modified with <code>blue[500]</code> for example</li>\n<li>You can configure the theme through <code>createMuiTheme</code></li>\n<li>Icon names are in PascalCase\n<ul>\n<li>Should use default exports if you don’t have tree-shaking configured (though webpack in production should do this for you)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"component-details\">Component Details <a class=\"heading-anchor-permalink\" href=\"#component-details\">#</a></h2>\n<ul>\n<li><code>Typography</code>: A container component that you can put sub-components inside. This is used to set the font characteristics of the children</li>\n<li><code>Hidden</code>: A component that allows you to hide components based on breakpoints</li>\n<li><code>Popover</code> and <code>Popper</code>: Open popup menus</li>\n<li><code>ClickAwayListener</code>: Listen to click events <em>not</em> on the component</li>\n</ul>\n<h4 id=\"transitions\">Transitions <a class=\"heading-anchor-permalink\" href=\"#transitions\">#</a></h4>\n<p>Material UI provides transition components that you wrap around the components you want to apply the transition to</p>\n<ul>\n<li><code>Fade</code></li>\n<li><code>Collapse</code></li>\n<li><code>Grow</code></li>\n<li><code>Slide</code></li>\n<li><code>Zoom</code></li>\n</ul>\n<h2 id=\"layout\">Layout <a class=\"heading-anchor-permalink\" href=\"#layout\">#</a></h2>\n<ul>\n<li><code>&lt;Grid&gt;</code>: Responsive UI is based on a 12 column grid layout\n<ul>\n<li>Has <code>xs</code>, <code>sm</code>, <code>md</code>, <code>lg</code>, and <code>xl</code> breakpoints</li>\n<li>Spacing is automatically taken into account when setting the number of columns</li>\n<li>Can define multiple widths on a <code>&lt;Grid item&gt;</code> for resizing at different breakpoints</li>\n<li>Built on Flexbox</li>\n<li>Split into two types: <code>container</code> and <code>item</code> but you can have both, e.g. <code>&lt;Grid container item&gt;</code> for it to be a flex container and flex item</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"breakpoints\">Breakpoints <a class=\"heading-anchor-permalink\" href=\"#breakpoints\">#</a></h4>\n<h5 id=\"values\">Values <a class=\"heading-anchor-permalink\" href=\"#values\">#</a></h5>\n<ul>\n<li><code>xs</code>: 0-599px</li>\n<li><code>sm</code>: 600-959px</li>\n<li><code>md</code>: 960-1279px</li>\n<li><code>lg</code>: 1280-1919px</li>\n<li><code>xl</code>: 1920px or larger</li>\n</ul>\n<h5 id=\"api\">API <a class=\"heading-anchor-permalink\" href=\"#api\">#</a></h5>\n<ul>\n<li><code>useMediaQuery</code>: CSS media Query hook for React</li>\n</ul>\n<h2 id=\"styling\">Styling <a class=\"heading-anchor-permalink\" href=\"#styling\">#</a></h2>\n<ul>\n<li>Inline styling vs classes:\n<ul>\n<li>Only use inline style for dynamic styling</li>\n<li>Classes are much faster, have auto-prefixing, media queries, better debugging, keyframes, etc.</li>\n</ul>\n</li>\n<li><code>withStyles</code>, <code>withTheme</code>, are HOC’s for styling</li>\n<li>CSS in JS is the current standard\n<ul>\n<li>3 different APIs for this:\n<ul>\n<li>Hook API (<code>makeStyles</code>)</li>\n<li>Styled Components API</li>\n<li>Higher order component (HOC) API (<code>withStyles</code>)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>To modify/obfuscate class names in production you can use a class name generator</li>\n<li><code>ThemeProvider</code> takes a theme property and makes the theme available down the React tree</li>\n<li><code>useTheme()</code>: A hook to return the theme of the stylesheet in a functional component</li>\n<li><code>withStyles()</code>: Link a stylesheet with a component using HOCs</li>\n<li>`withTheme()(Component): Class-based API for providing the theme to a component as a prop</li>\n</ul>\n<h4 id=\"classes\">Classes <a class=\"heading-anchor-permalink\" href=\"#classes\">#</a></h4>\n<ul>\n<li>Can use with withStyles and className</li>\n<li>Class names follow the pattern <code>Mui[&lt;component_name&gt;]-[&lt;style_rule_name&gt;]-UUID</code></li>\n<li>Can use the <code>classnames</code> library to apply multiple class names to an element or just use string interpolation</li>\n<li>All components accept a <code>classes</code> property for customization\n<ul>\n<li>I need to read more about this</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"interesting%2Fappealing-components-(for-potential-design-use)\">Interesting/Appealing Components (For Potential Design Use) <a class=\"heading-anchor-permalink\" href=\"#interesting%2Fappealing-components-(for-potential-design-use)\">#</a></h2>\n<ul>\n<li><code>Breadcrumbs</code> with icons</li>\n<li><code>ToggleButton</code></li>\n<li><code>Avatar</code></li>\n<li><code>Badges</code></li>\n<li><code>Tabs</code> for navbar navigation</li>\n<li><code>IconButtons</code></li>\n<li><code>Button</code> with <code>component={Link}</code></li>\n<li><code>Chips</code></li>\n<li><code>Dialog</code>\n<ul>\n<li>A modal like components that interrupts the user and prompts them to make a decision</li>\n</ul>\n</li>\n<li><code>Divider</code></li>\n<li><code>Drawer</code> for a side nav</li>\n<li><code>ExpansionPanel</code> for an accordian like expansion effect</li>\n<li><code>Menu</code> For profile, login/logout account avatar</li>\n<li><code>Paper</code>\n<ul>\n<li>A flat, opaque component representing paper</li>\n</ul>\n</li>\n<li><code>Progress</code></li>\n<li><code>FormGroup</code></li>\n<li><code>Switch</code></li>\n<li><code>Snackbar</code></li>\n<li><code>Steppers</code></li>\n<li><code>Tables</code> and <code>TablePagination</code></li>\n<li><code>TextField</code>\n<ul>\n<li>Wraps <code>Label</code>, <code>Input</code>, and <code>HelpText</code> components to make it easier to display a nice field</li>\n</ul>\n</li>\n<li><code>Input</code> with adornments (prepended and appended text/icons)\n<ul>\n<li>Can pass the adornments in to <code>TextField</code> as well</li>\n</ul>\n</li>\n<li><code>Tooltip</code>\n<ul>\n<li>Must pass props down to child elements if it is a custom react component</li>\n<li>Otherwise, it will handle the hovering and subsequent activation for you</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"customization\">Customization <a class=\"heading-anchor-permalink\" href=\"#customization\">#</a></h2>\n<ul>\n<li>Inject theme with <code>MuiThemeProvider</code></li>\n<li>The overrides object in <code>createMuiTheme</code> allows you to override every instance of a material-ui component</li>\n<li>You can also apply properties on all instances of a given component with the <code>props</code> keyword in <code>crateMuiTheme</code></li>\n</ul>\n<h2 id=\"testing\">Testing <a class=\"heading-anchor-permalink\" href=\"#testing\">#</a></h2>\n<ul>\n<li><code>createShallow()</code>: Shallow render a component</li>\n<li><code>createMount()</code>: Fully mount the component on the DOM</li>\n<li><code>createRender()</code>: Render component to string</li>\n</ul>\n<h2 id=\"general-tips\">General Tips <a class=\"heading-anchor-permalink\" href=\"#general-tips\">#</a></h2>\n<ul>\n<li>In general, material-ui is a library implementing Google’s material design</li>\n<li>You can code split by moving CSS and JS into different files</li>\n<li>Property spread: Properties flow down from Mui components to their children.</li>\n</ul>\n<p>e.g.</p>\n<pre><code class=\"language-HTML\">&lt;MenuItem disableRipple&gt;\n</code></pre>\n<p><code>disableRipple</code> will flow from <code>MenuItem</code> -&gt; <code>ListItem</code> -&gt; <code>ButtonBase</code> thus disabling the ripple at <code>ButtonBase</code></p>\n<ul>\n<li>The <code>component</code> property of material-ui components allows you to change what the root node renders as. This is how you can integrate with something like <code>react-router</code>\n<ul>\n<li><code>component</code> as a prop should always be passed statically, not with an arrow function directly in the prop, otherwise a new component will have to be created and rendered on every re-render, regardless of whether it changes</li>\n</ul>\n</li>\n</ul>\n",
      "id": 22
    },
    {
      "path": "JavaScript/React/React-router.md",
      "url": "JavaScript/React/React-router.html",
      "content": "# React Router\n\n- Generally you wrap the top-level component of your app with `<Router>`\n- Anywhere in your app you can then have a\n\n```HTML\n<Switch>\n    <Route path=\"/path\">\n        <ComponentToRenderIfPathIsMatched />\n    </Router>\n</Switch>\n```\n\nto match a path and render a compoonent\n\n- While there is a way to have a route configuration like in `vue-router` you generally do conditional rendering with `Switch` and nested `Switch` statements\n\n- To nest switches you put them in other components but still have to use the full path (e.g. `/accounts/add`)",
      "html": "<h1 id=\"react-router\">React Router <a class=\"heading-anchor-permalink\" href=\"#react-router\">#</a></h1>\n<ul>\n<li>Generally you wrap the top-level component of your app with <code>&lt;Router&gt;</code></li>\n<li>Anywhere in your app you can then have a</li>\n</ul>\n<pre><code class=\"language-HTML\">&lt;Switch&gt;\n    &lt;Route path=&quot;/path&quot;&gt;\n        &lt;ComponentToRenderIfPathIsMatched /&gt;\n    &lt;/Router&gt;\n&lt;/Switch&gt;\n</code></pre>\n<p>to match a path and render a compoonent</p>\n<ul>\n<li>\n<p>While there is a way to have a route configuration like in <code>vue-router</code> you generally do conditional rendering with <code>Switch</code> and nested <code>Switch</code> statements</p>\n</li>\n<li>\n<p>To nest switches you put them in other components but still have to use the full path (e.g. <code>/accounts/add</code>)</p>\n</li>\n</ul>\n",
      "id": 23
    },
    {
      "path": "JavaScript/React/React.md",
      "url": "JavaScript/React/React.html",
      "content": "### Syntax Basics\n\n- Curly braces in `JSX` execute a JavaScript expression at compile time\n- `<Component {...obj}/>` to pass all the attributes of `obj` in as props to `Component`\n  - To pass all props of one component down to another `<NestedComponent {...props}/>`\n- Every component provides a `className` property that applies the given class name to the root element in its render function\n- String attributes can be written in quotes `myAttribute=\"value\"` while any other types need to be written as an expression `myAttribute={10}`\n- Property names that come from `HTML` attributes are supported and camel cased in `React`\n- Conditional rendering\n  - Save condition in a variable then use an `if` statement OR\n  - `{ condition && <elements> }`\n\n\n### General Knowledge\n\n- React compares the desired next render of a component against the current one, and only re-renders the pieces that changed\n- Always make component names captilized\n  - Otherwise React will assume your component is a DOM element\n- React elements are immutable\n- Children get passed in as `props.children` -> this is React's way of handling slots\n- Always start components with a capital letter\n  - If it starts with a lowercase letter `React` will assume it is a DOM element\n  - Recommended: name props from the component's point of view rather than the context it is being used in\n- You don't need a constructor in a class based component if you aren't doing anything with state, etc. in it\n- In apps with many components it is important to free up resources taken by components when they are destroyed\n  - Clean up `setInterval`, stuff in `componentWillUnmount` etc.\n- You can set other attributes on `this`, not just `this.state`\n  - It is best to do this if the attribute doesn't belong in the standard data flow\n- The only place you can assign `this.state` is in the constructor\n- `setState` is asynchronous\n  - `React` may batch state updates for performance reasons\n  - When updating previous state to compute the next state, you need to use the overloaded function version of `setState`\n- Generally if you refer to a method by name and not invocation you should bind it\n- Generally binding is better than arrow functions since a new function isn't created on every render, whereas it is with arrow function\n- To prevent a component from rendering return null in the render function\n- For lists every element in the array needs a key\n  - You should avoid using index until a last resort because `React` will not be able to efficiently render reorderings\n- keys are not passed as props to components\n- Shared state between sibling components is shared by \"lifting\" it up to the closest common ancestor\n- There should always be **a single source of truth in your data**\n  - This way it is easier to track down bugs and there are fewer of them\n- `React` components are composable by design -> you don't ever need inheritance\n- You can use a babel plugin for component and line number debugging\n- hocFunction(args)(Component)\n  - This syntax represents when `hocFunction(args)` returns another function that is a HOC that wraps `Component`\n- Generally try and use the spread syntax for passing props sparingly because it allows you to pass extraneous data\n- `Booleans`, `Null`, and `Undefined` don't render\n  - make sure expressions are truly Boolean when using them in JSX\n    - falsy expressions in JSX can still render (e.g. `messages.length` if messages has 0 length)\n- Extending `React.PureComponent` implements a shallow comparison in `shouldComponentUpdate` of previous props with the next props\n- Remember: **Always replace state, not mutate it**\n  - Use `Object.assign`, `concat`, `...` syntax to set new state\n- `React` has portals\n  - This can allow you to render a component outside the current component tree\n- `React` has a `Profiler` component that allows you to measure the cost of rendering that part of a tree\n- You can't use `refs` on functional components because they don't have instances\n- `<React.StrictMode>` doesn't render any UI but activates additional checks and warnings\n  - You can use this at any point in your component tree\n- **Component lifecycle methods should not have side effects**\n- `AJAX` calls generally go in the `componentDidMount` lifecycle method\n- General: Debouncing - ensure a method will not execute until a certain amount of time since it was last called\n- When passing a component as a prop you need to instantiate it (e.g. `prop={<MyComponent/>}`) rather than just representing the component class (`prop={MyComponent}` **wrong**)\n\n### JSX\n\n- Since `JSX` compiles to `React.createElement` you need to have `React` in scope\n- You can render component types dynamically but first need to assign the type to an uppercase variable before using computed property syntax is `JSX`\n- You can pass any `JavaScript` expression as a prop by surrounding it with {}\n  - if/for are not expressions so they can't be used directly\n- No value with a prop defaults to a `true` boolean\n  - e.g. `<MyTextBox autocomplete>`\n    - This is generally not recommended since it can be confused with `es6` destructuring\n- Comments in JSX `{/* comment */}`\n\n### Events\n\n- Events are all camelCased in `React`\n- There are two main ways to pass args to event handlers\n  - 1. `onClick={(e) => this.handleClick(id)}`\n  - 2. `onClick={this.handleClick.bind(this, id)}`\n    - This works because with `bind` any further arguments are automatically forwarded\n- DOM events bubble up by default\n- Synthetic Event: a cross-browser event wrapper to the `NativeEvent`\n\n### Optimizing Performance\n\n- If optimizing for performance **make sure you are testing with the production build**\n- Webpack `v4` minimizes code in production mode\n- See `React` official docs for a good example on profiling components\n- `Virtualize` or `window` long lists: `react-window` and `react-virtualized` for a big performance boost\n\n### Code Splitting\n\n- Can be used to \"lazy-load\" just the things currently needed by the user\n- Can use `React.lazy` rendered in a `<Suspense>` component to dynamically load in components\n- `react-loadable` handles this all for you\n- A good practice would be to lazy load each main route container in bigger applications\n\n### Supporting Libraries\n\n- `styled-components`: A React library that lets you style the components with CSS directly in React\n- `react-loadable`: For code splitting\n- `test-renderer`: Get JSON representation of components\n\n### Slots\n\n- Can be accomplished by using `props.children`\n- Can also have effectively named slots by using named props (e.g.)\n\n```JavaScript\n<Comp1\n    myFirstSlot={<h2>In props.myFirstSlot</h2>}\n>\n<h1>In props.children</h1>\n</Comp1>\n\n```\n\n### Terminology\n\n- Controlled component: A component whose value is controlled by `React` state\n- Higher Order Component (HOC): A function that takes a component and returns a new component\n  - It wraps the input component in another component\n  - It is important to set a proper `displayName` for easier debugging\n- Reconciliation: the process of updating the state of the DOM to match the state in `React`\n\n### Error Handling\n\n- Error Boundaries: A component that catches all errors anywhere in its child component tree, logs them, then displays a fallback UI when an error occurs\n- You generally just define one Error Boundary component then use it throughout the application\n  - The granularity of component trees you use it on is up to you\n- Uncaught errors result in unmounting the whole tree\n- Error boundaries do not catch errors in event handlers since they don't have to do with UI\n\n### PropTypes\n\n- Set the `propType` attribute on a class\n- Can add custom validators\n- `props.element` refers to child DOM components\n\n### Default Props\n\n- Set the `defaultProps` attribute on a class\n\n### Ref Forwarding\n\n- Allows you to take the `ref={ref}` and pass it down to child components\n- You need to use `React.forwardRef` for this, because the ref doesn't appear in props. Otherwise there is no way to access it\n- This is really useful for HOCs\n- Without `forwardRef`, the ref will refer to the outermost component you place it on, _not_ the child one\n- Can set a `displayName` for the component to be seen in dev tools as a variable on the class\n\n### Render props\n\n- A render props is a function that you pass in to a child component that gets called during the child's `render` method. This can allow you to add code to be called in the child `render` without it caring about what it is\n  - This essentially does what a HOC does\n\n### Advanced Guides\n\n- `aria-*` attributes are hyphen-cased in `React`\n- You can use `React.Fragment` to wrap sibling components in something that won't render in the DOM. Shorthand syntax `<> </>. This is useful when you need to wrap a group of components together to satisfy the one root element requirement\n- `refs`: Can create a ref with `React.createRef` and pass it in as the ref param to a component\n  - **`refs`** are not passed in and available in `props`\n  - When you use HOCs you should pass in the refs to the wrapped component. You can do this with `React.forwardRef`\n- Context: Allows you to pass values down to all child components _without_ having to pass props manually every time\n  - Used for global data, e.g. theme\n  - Component composition is often a much better solution since it keeps components reusable\n  - You should not abuse this as well and expose a bunch of data to props that don't need it\n- Static Type Checking: identify problems in your code, add autocomplete, etc.\n  - This is why `Flow` or `TypeScript` are better than `PropTypes` for large apps\n\n### API Reference\n\n#### React\n\n- `React.memo` - returns a memoized result of a Component. It's a HOC. This is similar to `React.PureComponent` but for functional components\n\n#### ReactDOM\n\n- `unmountComponentAtNode`\n- `findDOMNode(Component)`\n- `createPortal`\n- See DOM elements documentation for available `HTML` attributes\n  - Almost all are the same as regular `HTML` but in camelCase",
      "html": "<h3 id=\"syntax-basics\">Syntax Basics <a class=\"heading-anchor-permalink\" href=\"#syntax-basics\">#</a></h3>\n<ul>\n<li>Curly braces in <code>JSX</code> execute a JavaScript expression at compile time</li>\n<li><code>&lt;Component {...obj}/&gt;</code> to pass all the attributes of <code>obj</code> in as props to <code>Component</code>\n<ul>\n<li>To pass all props of one component down to another <code>&lt;NestedComponent {...props}/&gt;</code></li>\n</ul>\n</li>\n<li>Every component provides a <code>className</code> property that applies the given class name to the root element in its render function</li>\n<li>String attributes can be written in quotes <code>myAttribute=&quot;value&quot;</code> while any other types need to be written as an expression <code>myAttribute={10}</code></li>\n<li>Property names that come from <code>HTML</code> attributes are supported and camel cased in <code>React</code></li>\n<li>Conditional rendering\n<ul>\n<li>Save condition in a variable then use an <code>if</code> statement OR</li>\n<li><code>{ condition &amp;&amp; &lt;elements&gt; }</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"general-knowledge\">General Knowledge <a class=\"heading-anchor-permalink\" href=\"#general-knowledge\">#</a></h3>\n<ul>\n<li>React compares the desired next render of a component against the current one, and only re-renders the pieces that changed</li>\n<li>Always make component names captilized\n<ul>\n<li>Otherwise React will assume your component is a DOM element</li>\n</ul>\n</li>\n<li>React elements are immutable</li>\n<li>Children get passed in as <code>props.children</code> -&gt; this is React’s way of handling slots</li>\n<li>Always start components with a capital letter\n<ul>\n<li>If it starts with a lowercase letter <code>React</code> will assume it is a DOM element</li>\n<li>Recommended: name props from the component’s point of view rather than the context it is being used in</li>\n</ul>\n</li>\n<li>You don’t need a constructor in a class based component if you aren’t doing anything with state, etc. in it</li>\n<li>In apps with many components it is important to free up resources taken by components when they are destroyed\n<ul>\n<li>Clean up <code>setInterval</code>, stuff in <code>componentWillUnmount</code> etc.</li>\n</ul>\n</li>\n<li>You can set other attributes on <code>this</code>, not just <code>this.state</code>\n<ul>\n<li>It is best to do this if the attribute doesn’t belong in the standard data flow</li>\n</ul>\n</li>\n<li>The only place you can assign <code>this.state</code> is in the constructor</li>\n<li><code>setState</code> is asynchronous\n<ul>\n<li><code>React</code> may batch state updates for performance reasons</li>\n<li>When updating previous state to compute the next state, you need to use the overloaded function version of <code>setState</code></li>\n</ul>\n</li>\n<li>Generally if you refer to a method by name and not invocation you should bind it</li>\n<li>Generally binding is better than arrow functions since a new function isn’t created on every render, whereas it is with arrow function</li>\n<li>To prevent a component from rendering return null in the render function</li>\n<li>For lists every element in the array needs a key\n<ul>\n<li>You should avoid using index until a last resort because <code>React</code> will not be able to efficiently render reorderings</li>\n</ul>\n</li>\n<li>keys are not passed as props to components</li>\n<li>Shared state between sibling components is shared by “lifting” it up to the closest common ancestor</li>\n<li>There should always be <strong>a single source of truth in your data</strong>\n<ul>\n<li>This way it is easier to track down bugs and there are fewer of them</li>\n</ul>\n</li>\n<li><code>React</code> components are composable by design -&gt; you don’t ever need inheritance</li>\n<li>You can use a babel plugin for component and line number debugging</li>\n<li>hocFunction(args)(Component)\n<ul>\n<li>This syntax represents when <code>hocFunction(args)</code> returns another function that is a HOC that wraps <code>Component</code></li>\n</ul>\n</li>\n<li>Generally try and use the spread syntax for passing props sparingly because it allows you to pass extraneous data</li>\n<li><code>Booleans</code>, <code>Null</code>, and <code>Undefined</code> don’t render\n<ul>\n<li>make sure expressions are truly Boolean when using them in JSX\n<ul>\n<li>falsy expressions in JSX can still render (e.g. <code>messages.length</code> if messages has 0 length)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Extending <code>React.PureComponent</code> implements a shallow comparison in <code>shouldComponentUpdate</code> of previous props with the next props</li>\n<li>Remember: <strong>Always replace state, not mutate it</strong>\n<ul>\n<li>Use <code>Object.assign</code>, <code>concat</code>, <code>...</code> syntax to set new state</li>\n</ul>\n</li>\n<li><code>React</code> has portals\n<ul>\n<li>This can allow you to render a component outside the current component tree</li>\n</ul>\n</li>\n<li><code>React</code> has a <code>Profiler</code> component that allows you to measure the cost of rendering that part of a tree</li>\n<li>You can’t use <code>refs</code> on functional components because they don’t have instances</li>\n<li><code>&lt;React.StrictMode&gt;</code> doesn’t render any UI but activates additional checks and warnings\n<ul>\n<li>You can use this at any point in your component tree</li>\n</ul>\n</li>\n<li><strong>Component lifecycle methods should not have side effects</strong></li>\n<li><code>AJAX</code> calls generally go in the <code>componentDidMount</code> lifecycle method</li>\n<li>General: Debouncing - ensure a method will not execute until a certain amount of time since it was last called</li>\n<li>When passing a component as a prop you need to instantiate it (e.g. <code>prop={&lt;MyComponent/&gt;}</code>) rather than just representing the component class (<code>prop={MyComponent}</code> <strong>wrong</strong>)</li>\n</ul>\n<h3 id=\"jsx\">JSX <a class=\"heading-anchor-permalink\" href=\"#jsx\">#</a></h3>\n<ul>\n<li>Since <code>JSX</code> compiles to <code>React.createElement</code> you need to have <code>React</code> in scope</li>\n<li>You can render component types dynamically but first need to assign the type to an uppercase variable before using computed property syntax is <code>JSX</code></li>\n<li>You can pass any <code>JavaScript</code> expression as a prop by surrounding it with {}\n<ul>\n<li>if/for are not expressions so they can’t be used directly</li>\n</ul>\n</li>\n<li>No value with a prop defaults to a <code>true</code> boolean\n<ul>\n<li>e.g. <code>&lt;MyTextBox autocomplete&gt;</code>\n<ul>\n<li>This is generally not recommended since it can be confused with <code>es6</code> destructuring</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Comments in JSX <code>{/* comment */}</code></li>\n</ul>\n<h3 id=\"events\">Events <a class=\"heading-anchor-permalink\" href=\"#events\">#</a></h3>\n<ul>\n<li>Events are all camelCased in <code>React</code></li>\n<li>There are two main ways to pass args to event handlers\n<ul>\n<li>\n<ol>\n<li><code>onClick={(e) =&gt; this.handleClick(id)}</code></li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li><code>onClick={this.handleClick.bind(this, id)}</code></li>\n</ol>\n<ul>\n<li>This works because with <code>bind</code> any further arguments are automatically forwarded</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>DOM events bubble up by default</li>\n<li>Synthetic Event: a cross-browser event wrapper to the <code>NativeEvent</code></li>\n</ul>\n<h3 id=\"optimizing-performance\">Optimizing Performance <a class=\"heading-anchor-permalink\" href=\"#optimizing-performance\">#</a></h3>\n<ul>\n<li>If optimizing for performance <strong>make sure you are testing with the production build</strong></li>\n<li>Webpack <code>v4</code> minimizes code in production mode</li>\n<li>See <code>React</code> official docs for a good example on profiling components</li>\n<li><code>Virtualize</code> or <code>window</code> long lists: <code>react-window</code> and <code>react-virtualized</code> for a big performance boost</li>\n</ul>\n<h3 id=\"code-splitting\">Code Splitting <a class=\"heading-anchor-permalink\" href=\"#code-splitting\">#</a></h3>\n<ul>\n<li>Can be used to “lazy-load” just the things currently needed by the user</li>\n<li>Can use <code>React.lazy</code> rendered in a <code>&lt;Suspense&gt;</code> component to dynamically load in components</li>\n<li><code>react-loadable</code> handles this all for you</li>\n<li>A good practice would be to lazy load each main route container in bigger applications</li>\n</ul>\n<h3 id=\"supporting-libraries\">Supporting Libraries <a class=\"heading-anchor-permalink\" href=\"#supporting-libraries\">#</a></h3>\n<ul>\n<li><code>styled-components</code>: A React library that lets you style the components with CSS directly in React</li>\n<li><code>react-loadable</code>: For code splitting</li>\n<li><code>test-renderer</code>: Get JSON representation of components</li>\n</ul>\n<h3 id=\"slots\">Slots <a class=\"heading-anchor-permalink\" href=\"#slots\">#</a></h3>\n<ul>\n<li>Can be accomplished by using <code>props.children</code></li>\n<li>Can also have effectively named slots by using named props (e.g.)</li>\n</ul>\n<pre><code class=\"language-JavaScript\">&lt;Comp1\n    myFirstSlot={&lt;h2&gt;In props.myFirstSlot&lt;/h2&gt;}\n&gt;\n&lt;h1&gt;In props.children&lt;/h1&gt;\n&lt;/Comp1&gt;\n\n</code></pre>\n<h3 id=\"terminology\">Terminology <a class=\"heading-anchor-permalink\" href=\"#terminology\">#</a></h3>\n<ul>\n<li>Controlled component: A component whose value is controlled by <code>React</code> state</li>\n<li>Higher Order Component (HOC): A function that takes a component and returns a new component\n<ul>\n<li>It wraps the input component in another component</li>\n<li>It is important to set a proper <code>displayName</code> for easier debugging</li>\n</ul>\n</li>\n<li>Reconciliation: the process of updating the state of the DOM to match the state in <code>React</code></li>\n</ul>\n<h3 id=\"error-handling\">Error Handling <a class=\"heading-anchor-permalink\" href=\"#error-handling\">#</a></h3>\n<ul>\n<li>Error Boundaries: A component that catches all errors anywhere in its child component tree, logs them, then displays a fallback UI when an error occurs</li>\n<li>You generally just define one Error Boundary component then use it throughout the application\n<ul>\n<li>The granularity of component trees you use it on is up to you</li>\n</ul>\n</li>\n<li>Uncaught errors result in unmounting the whole tree</li>\n<li>Error boundaries do not catch errors in event handlers since they don’t have to do with UI</li>\n</ul>\n<h3 id=\"proptypes\">PropTypes <a class=\"heading-anchor-permalink\" href=\"#proptypes\">#</a></h3>\n<ul>\n<li>Set the <code>propType</code> attribute on a class</li>\n<li>Can add custom validators</li>\n<li><code>props.element</code> refers to child DOM components</li>\n</ul>\n<h3 id=\"default-props\">Default Props <a class=\"heading-anchor-permalink\" href=\"#default-props\">#</a></h3>\n<ul>\n<li>Set the <code>defaultProps</code> attribute on a class</li>\n</ul>\n<h3 id=\"ref-forwarding\">Ref Forwarding <a class=\"heading-anchor-permalink\" href=\"#ref-forwarding\">#</a></h3>\n<ul>\n<li>Allows you to take the <code>ref={ref}</code> and pass it down to child components</li>\n<li>You need to use <code>React.forwardRef</code> for this, because the ref doesn’t appear in props. Otherwise there is no way to access it</li>\n<li>This is really useful for HOCs</li>\n<li>Without <code>forwardRef</code>, the ref will refer to the outermost component you place it on, <em>not</em> the child one</li>\n<li>Can set a <code>displayName</code> for the component to be seen in dev tools as a variable on the class</li>\n</ul>\n<h3 id=\"render-props\">Render props <a class=\"heading-anchor-permalink\" href=\"#render-props\">#</a></h3>\n<ul>\n<li>A render props is a function that you pass in to a child component that gets called during the child’s <code>render</code> method. This can allow you to add code to be called in the child <code>render</code> without it caring about what it is\n<ul>\n<li>This essentially does what a HOC does</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"advanced-guides\">Advanced Guides <a class=\"heading-anchor-permalink\" href=\"#advanced-guides\">#</a></h3>\n<ul>\n<li><code>aria-*</code> attributes are hyphen-cased in <code>React</code></li>\n<li>You can use <code>React.Fragment</code> to wrap sibling components in something that won’t render in the DOM. Shorthand syntax `&lt;&gt; &lt;/&gt;. This is useful when you need to wrap a group of components together to satisfy the one root element requirement</li>\n<li><code>refs</code>: Can create a ref with <code>React.createRef</code> and pass it in as the ref param to a component\n<ul>\n<li><strong><code>refs</code></strong> are not passed in and available in <code>props</code></li>\n<li>When you use HOCs you should pass in the refs to the wrapped component. You can do this with <code>React.forwardRef</code></li>\n</ul>\n</li>\n<li>Context: Allows you to pass values down to all child components <em>without</em> having to pass props manually every time\n<ul>\n<li>Used for global data, e.g. theme</li>\n<li>Component composition is often a much better solution since it keeps components reusable</li>\n<li>You should not abuse this as well and expose a bunch of data to props that don’t need it</li>\n</ul>\n</li>\n<li>Static Type Checking: identify problems in your code, add autocomplete, etc.\n<ul>\n<li>This is why <code>Flow</code> or <code>TypeScript</code> are better than <code>PropTypes</code> for large apps</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"api-reference\">API Reference <a class=\"heading-anchor-permalink\" href=\"#api-reference\">#</a></h3>\n<h4 id=\"react\">React <a class=\"heading-anchor-permalink\" href=\"#react\">#</a></h4>\n<ul>\n<li><code>React.memo</code> - returns a memoized result of a Component. It’s a HOC. This is similar to <code>React.PureComponent</code> but for functional components</li>\n</ul>\n<h4 id=\"reactdom\">ReactDOM <a class=\"heading-anchor-permalink\" href=\"#reactdom\">#</a></h4>\n<ul>\n<li><code>unmountComponentAtNode</code></li>\n<li><code>findDOMNode(Component)</code></li>\n<li><code>createPortal</code></li>\n<li>See DOM elements documentation for available <code>HTML</code> attributes\n<ul>\n<li>Almost all are the same as regular <code>HTML</code> but in camelCase</li>\n</ul>\n</li>\n</ul>\n",
      "id": 24
    },
    {
      "path": "JavaScript/React/Testing.md",
      "url": "JavaScript/React/Testing.html",
      "content": "# Testing\n\n- end-to-end test: Test the entire flow of the application - both frontend and backend together\n  \n### Jest\n\n- Jest is a test runner that allows you to access the DOM via `jsdom`, an approximation of the browser\n- You can mock anything with `jest.spyOn` for API calls\n\n### Snapshot Testing\n\n- Allows you to save rendered component output and ensure a change to the component is explicitly committed\n\n",
      "html": "<h1 id=\"testing\">Testing <a class=\"heading-anchor-permalink\" href=\"#testing\">#</a></h1>\n<ul>\n<li>end-to-end test: Test the entire flow of the application - both frontend and backend together</li>\n</ul>\n<h3 id=\"jest\">Jest <a class=\"heading-anchor-permalink\" href=\"#jest\">#</a></h3>\n<ul>\n<li>Jest is a test runner that allows you to access the DOM via <code>jsdom</code>, an approximation of the browser</li>\n<li>You can mock anything with <code>jest.spyOn</code> for API calls</li>\n</ul>\n<h3 id=\"snapshot-testing\">Snapshot Testing <a class=\"heading-anchor-permalink\" href=\"#snapshot-testing\">#</a></h3>\n<ul>\n<li>Allows you to save rendered component output and ensure a change to the component is explicitly committed</li>\n</ul>\n",
      "id": 25
    },
    {
      "path": "JavaScript/SPAs.md",
      "url": "JavaScript/SPAs.html",
      "content": "## Documentation\n\n- Can use `Storybook` to have an elegant documentation solution for all of your components",
      "html": "<h2 id=\"documentation\">Documentation <a class=\"heading-anchor-permalink\" href=\"#documentation\">#</a></h2>\n<ul>\n<li>Can use <code>Storybook</code> to have an elegant documentation solution for all of your components</li>\n</ul>\n",
      "id": 26
    },
    {
      "path": "JavaScript/Vue.md",
      "url": "JavaScript/Vue.html",
      "content": "### Vue Tidbits\n\nVue supports passing invoked methods into event handlers like `@click=myFunc(myVal)` because `myFunc` is not actually being executed until the click event is registered.\n\n- Vue does not bubble up events through multiple layers of parent components. For native events you can listen to the native browser event (which will bubble) with `@<event>.native`\n\n## Vue Material Design Frameworks\n\nAfter much chagrin messing around with `flexbox` and UI/UX design over the past however many months I have finally decided to use a design framework - it is vastly superior to anything I could come up with.\n\n### Vuetify\n\nMore complex, great documentation, and more of a sacrifice in control over your app. E.g. using `<v-col col=8 lg=12>` instead of `<div class=\"col col-lg-8\">`. However, much of the bootstrap API is implemented. Beautiful UI components available. Probably going to use `Vuetify` in the future.\n\n#### Vue Material\n\nRelatively simple component framework for `google material design`. Implements much of the `boostrap` display, margin, and padding classes. Easy to use but lacks somewhat in configuration.\n\n### Testing with Vuetify\n\nYou can access `Vuetify` components specifically with `wrapper.find({name: <ComponentName>})` but this seems to not work sometimes. It may be a much better practice to just put a `.v-<component>-test` class on the `Vuetify component` for matching\n\nAfter trying it out this is a **much** better approach\n\nTest for CI/CD!\n",
      "html": "<h3 id=\"vue-tidbits\">Vue Tidbits <a class=\"heading-anchor-permalink\" href=\"#vue-tidbits\">#</a></h3>\n<p>Vue supports passing invoked methods into event handlers like <code>@click=myFunc(myVal)</code> because <code>myFunc</code> is not actually being executed until the click event is registered.</p>\n<ul>\n<li>Vue does not bubble up events through multiple layers of parent components. For native events you can listen to the native browser event (which will bubble) with <code>@&lt;event&gt;.native</code></li>\n</ul>\n<h2 id=\"vue-material-design-frameworks\">Vue Material Design Frameworks <a class=\"heading-anchor-permalink\" href=\"#vue-material-design-frameworks\">#</a></h2>\n<p>After much chagrin messing around with <code>flexbox</code> and UI/UX design over the past however many months I have finally decided to use a design framework - it is vastly superior to anything I could come up with.</p>\n<h3 id=\"vuetify\">Vuetify <a class=\"heading-anchor-permalink\" href=\"#vuetify\">#</a></h3>\n<p>More complex, great documentation, and more of a sacrifice in control over your app. E.g. using <code>&lt;v-col col=8 lg=12&gt;</code> instead of <code>&lt;div class=&quot;col col-lg-8&quot;&gt;</code>. However, much of the bootstrap API is implemented. Beautiful UI components available. Probably going to use <code>Vuetify</code> in the future.</p>\n<h4 id=\"vue-material\">Vue Material <a class=\"heading-anchor-permalink\" href=\"#vue-material\">#</a></h4>\n<p>Relatively simple component framework for <code>google material design</code>. Implements much of the <code>boostrap</code> display, margin, and padding classes. Easy to use but lacks somewhat in configuration.</p>\n<h3 id=\"testing-with-vuetify\">Testing with Vuetify <a class=\"heading-anchor-permalink\" href=\"#testing-with-vuetify\">#</a></h3>\n<p>You can access <code>Vuetify</code> components specifically with <code>wrapper.find({name: &lt;ComponentName&gt;})</code> but this seems to not work sometimes. It may be a much better practice to just put a <code>.v-&lt;component&gt;-test</code> class on the <code>Vuetify component</code> for matching</p>\n<p>After trying it out this is a <strong>much</strong> better approach</p>\n<p>Test for CI/CD!</p>\n",
      "id": 27
    },
    {
      "path": "Python.md",
      "url": "Python.html",
      "content": "# Python Basics\n\n### Meta Classes\n\nMeta Classes are classes where instances are of a class, rather than an instance of a class. Instances of meta classes can be used to define class behavior. Not a ton of languages support meta classes and the implementations differ (Python does).\n\n### Keyword Arguments\n\nPython3 (and 2) supports keyword arguments e.g. `myFunc(b=2, a=1)` where the order of the parameters passed doesn't matter. The above is equivalent to `myFunc(a=1, b=2)`. You can mandate arguments be passed as keywords\n\n### Python \\* Operator\n\n\\*args unpacks an iteratable object into its individual items. For example, if args = [ 1, 2, 3, 4 ], \\*args will become 1,2,3,4. This is the same as the spread operator `...` in Javascript. This is argument `unpacking` it unpacks an iterable object into its individual components\n\n### Python \\*\\* Operator\n\nSimilar to the \\* operator \\*\\* unpacks a dictionary into keyword arguments. If `dict = {a: 1, b: 2}` then `**dict` turns into a=1, b=2. Thus in a function myFunc(\\*\\*dict) this is transformed into named keyword arguments with `myFunc(a=1, b=2)`\n\n### Decorators\n\n### Function Basics\n\nFunctions are first class objects in python. This means they can be passed around as arguments, etc. In general, a first class object is an object that has all the rights and abilities as other variables in the programming languages. Things that can't be passed as arguments, e.g. functions in `C` are called second-class arguments.\n\nYou can define functions inside other functions - these are called `inner functions`. Inner functions are not defined until their parent function is called. They are locally scoped to the parent function.\n\nYou can also return functions from other functions. Just like in JavaScript, the function name refers to the function itself where invoking it returns the value\n\nDecorators just wrap a function and modify its behavior. What this does is calls a function by passing in a function which then returns a new modified function. The `@` symbol is syntactic sugar for this entire thing. So `@<decorator_function>` above another function will pass the function that is below it into `<decorator_function>` and the function below it will then have the modified behavior when called.\n\nThis may not have been worded the best so here is an example:\n\n```python\ndef do_twice(func):\n    def wrapper_do_twice(*args, **kwargs):\n        func(*args, **kwargs)\n        func(*args, **kwargs)\n    return wrapper_do_twice\n\n@do_twice\ndef printWord(word):\n    print(word)\n```\n\nCalling `printWord` will now print the word twice. You always want to include `*args, **kwargs` in decorators so you can pass in an arbitrary number of arguments.\n\n### Introspection vs Reflection\n\n`Introspection` is the ability for an object to know about itself at runtime. `Reflection` is one step further: the ability to modify itself at runtime.\n\n### General Tips\n\n- To get a value from a tuple you can convert to a dictionary and then use the get method\n- Set: A collection that is unordered, unindexed, and unique\n- Python 3.5+ supports type hints\n  - `def my_func(num: int) -> str:`",
      "html": "<h1 id=\"python-basics\">Python Basics <a class=\"heading-anchor-permalink\" href=\"#python-basics\">#</a></h1>\n<h3 id=\"meta-classes\">Meta Classes <a class=\"heading-anchor-permalink\" href=\"#meta-classes\">#</a></h3>\n<p>Meta Classes are classes where instances are of a class, rather than an instance of a class. Instances of meta classes can be used to define class behavior. Not a ton of languages support meta classes and the implementations differ (Python does).</p>\n<h3 id=\"keyword-arguments\">Keyword Arguments <a class=\"heading-anchor-permalink\" href=\"#keyword-arguments\">#</a></h3>\n<p>Python3 (and 2) supports keyword arguments e.g. <code>myFunc(b=2, a=1)</code> where the order of the parameters passed doesn’t matter. The above is equivalent to <code>myFunc(a=1, b=2)</code>. You can mandate arguments be passed as keywords</p>\n<h3 id=\"python-*-operator\">Python * Operator <a class=\"heading-anchor-permalink\" href=\"#python-*-operator\">#</a></h3>\n<p>*args unpacks an iteratable object into its individual items. For example, if args = [ 1, 2, 3, 4 ], *args will become 1,2,3,4. This is the same as the spread operator <code>...</code> in Javascript. This is argument <code>unpacking</code> it unpacks an iterable object into its individual components</p>\n<h3 id=\"python-**-operator\">Python ** Operator <a class=\"heading-anchor-permalink\" href=\"#python-**-operator\">#</a></h3>\n<p>Similar to the * operator ** unpacks a dictionary into keyword arguments. If <code>dict = {a: 1, b: 2}</code> then <code>**dict</code> turns into a=1, b=2. Thus in a function myFunc(**dict) this is transformed into named keyword arguments with <code>myFunc(a=1, b=2)</code></p>\n<h3 id=\"decorators\">Decorators <a class=\"heading-anchor-permalink\" href=\"#decorators\">#</a></h3>\n<h3 id=\"function-basics\">Function Basics <a class=\"heading-anchor-permalink\" href=\"#function-basics\">#</a></h3>\n<p>Functions are first class objects in python. This means they can be passed around as arguments, etc. In general, a first class object is an object that has all the rights and abilities as other variables in the programming languages. Things that can’t be passed as arguments, e.g. functions in <code>C</code> are called second-class arguments.</p>\n<p>You can define functions inside other functions - these are called <code>inner functions</code>. Inner functions are not defined until their parent function is called. They are locally scoped to the parent function.</p>\n<p>You can also return functions from other functions. Just like in JavaScript, the function name refers to the function itself where invoking it returns the value</p>\n<p>Decorators just wrap a function and modify its behavior. What this does is calls a function by passing in a function which then returns a new modified function. The <code>@</code> symbol is syntactic sugar for this entire thing. So <code>@&lt;decorator_function&gt;</code> above another function will pass the function that is below it into <code>&lt;decorator_function&gt;</code> and the function below it will then have the modified behavior when called.</p>\n<p>This may not have been worded the best so here is an example:</p>\n<pre><code class=\"language-python\">def do_twice(func):\n    def wrapper_do_twice(*args, **kwargs):\n        func(*args, **kwargs)\n        func(*args, **kwargs)\n    return wrapper_do_twice\n\n@do_twice\ndef printWord(word):\n    print(word)\n</code></pre>\n<p>Calling <code>printWord</code> will now print the word twice. You always want to include <code>*args, **kwargs</code> in decorators so you can pass in an arbitrary number of arguments.</p>\n<h3 id=\"introspection-vs-reflection\">Introspection vs Reflection <a class=\"heading-anchor-permalink\" href=\"#introspection-vs-reflection\">#</a></h3>\n<p><code>Introspection</code> is the ability for an object to know about itself at runtime. <code>Reflection</code> is one step further: the ability to modify itself at runtime.</p>\n<h3 id=\"general-tips\">General Tips <a class=\"heading-anchor-permalink\" href=\"#general-tips\">#</a></h3>\n<ul>\n<li>To get a value from a tuple you can convert to a dictionary and then use the get method</li>\n<li>Set: A collection that is unordered, unindexed, and unique</li>\n<li>Python 3.5+ supports type hints\n<ul>\n<li><code>def my_func(num: int) -&gt; str:</code></li>\n</ul>\n</li>\n</ul>\n",
      "id": 28
    },
    {
      "path": "SCSS.md",
      "url": "SCSS.html",
      "content": "## General\n\n- `&` refers to the parent element\n- `>`, `+`, `~`, all refer to sibling elements one way or another\n",
      "html": "<h2 id=\"general\">General <a class=\"heading-anchor-permalink\" href=\"#general\">#</a></h2>\n<ul>\n<li><code>&amp;</code> refers to the parent element</li>\n<li><code>&gt;</code>, <code>+</code>, <code>~</code>, all refer to sibling elements one way or another</li>\n</ul>\n",
      "id": 29
    },
    {
      "path": "SoftwareDev_BestPractices.md",
      "url": "SoftwareDev_BestPractices.html",
      "content": "# General\n\n- Semantic versioning:\n  - e.g. `16.5.2`\n    - The `16` refers to the major version\n    - The `5` gets updated on a feature release\n    - The `2` gets incremented on a bug fix\n\n- When overriding a base class it is often best to stub out methods that need to be overriden on the base class and have them raise a `NotImplemented` error or something similar",
      "html": "<h1 id=\"general\">General <a class=\"heading-anchor-permalink\" href=\"#general\">#</a></h1>\n<ul>\n<li>\n<p>Semantic versioning:</p>\n<ul>\n<li>e.g. <code>16.5.2</code>\n<ul>\n<li>The <code>16</code> refers to the major version</li>\n<li>The <code>5</code> gets updated on a feature release</li>\n<li>The <code>2</code> gets incremented on a bug fix</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>When overriding a base class it is often best to stub out methods that need to be overriden on the base class and have them raise a <code>NotImplemented</code> error or something similar</p>\n</li>\n</ul>\n",
      "id": 30
    },
    {
      "path": "TCP-IP/ARP-RARP.md",
      "url": "TCP-IP/ARP-RARP.html",
      "content": "## ARP (Address Resolution Protocol)\n\nARP is the protocol used to translate an IP address to a physical hardware (MAC) address. To do this, the questioning machine sends out a broadcast frame to every device on the network with the IP address in question, asking for the hardware address corresponding to the given IP address. The device with the given IP address then responds with its hardware address.\n\nThese hardware addresses are needed because the link layer works with hardware addresses and knows nothing about the IP protocol. Thus, the sending of frames uses the hardware addresses between machines. ARP results are cached and can be viewed with `arp -a`.\n\n## RARP (Reverse Address Resolution Protocol)\n\nRARP is used less and is a way to map hardware addresses to IP addresses. This can be used when bootstrapping a system, when the system does not yet know its IP address. It will send out a frame to devices on the network asking for the IP address corresponding to its hardware address.",
      "html": "<h2 id=\"arp-(address-resolution-protocol)\">ARP (Address Resolution Protocol) <a class=\"heading-anchor-permalink\" href=\"#arp-(address-resolution-protocol)\">#</a></h2>\n<p>ARP is the protocol used to translate an IP address to a physical hardware (MAC) address. To do this, the questioning machine sends out a broadcast frame to every device on the network with the IP address in question, asking for the hardware address corresponding to the given IP address. The device with the given IP address then responds with its hardware address.</p>\n<p>These hardware addresses are needed because the link layer works with hardware addresses and knows nothing about the IP protocol. Thus, the sending of frames uses the hardware addresses between machines. ARP results are cached and can be viewed with <code>arp -a</code>.</p>\n<h2 id=\"rarp-(reverse-address-resolution-protocol)\">RARP (Reverse Address Resolution Protocol) <a class=\"heading-anchor-permalink\" href=\"#rarp-(reverse-address-resolution-protocol)\">#</a></h2>\n<p>RARP is used less and is a way to map hardware addresses to IP addresses. This can be used when bootstrapping a system, when the system does not yet know its IP address. It will send out a frame to devices on the network asking for the IP address corresponding to its hardware address.</p>\n",
      "id": 31
    },
    {
      "path": "TCP-IP/ICMP.md",
      "url": "TCP-IP/ICMP.html",
      "content": "# ICMP (Internet Control Message Protocol)\n\nICMP provides a protocol for systems to pass messages between one another using IP, even avoiding the TCP/UDP transport layer. `ping` uses ICMP echo request and response messages to check connectivity between systems without the transport layer.\n\nThe ping server - what replies with ICMP echo responses - is usually implemented within the kernel.\n",
      "html": "<h1 id=\"icmp-(internet-control-message-protocol)\">ICMP (Internet Control Message Protocol) <a class=\"heading-anchor-permalink\" href=\"#icmp-(internet-control-message-protocol)\">#</a></h1>\n<p>ICMP provides a protocol for systems to pass messages between one another using IP, even avoiding the TCP/UDP transport layer. <code>ping</code> uses ICMP echo request and response messages to check connectivity between systems without the transport layer.</p>\n<p>The ping server - what replies with ICMP echo responses - is usually implemented within the kernel.</p>\n",
      "id": 32
    },
    {
      "path": "TCP-IP/IP_Addresses.md",
      "url": "TCP-IP/IP_Addresses.html",
      "content": "### IP Addresses\n\nIPv4 addresses are 4 byte (32 bit) values that describe a host machine. The four bytes are written in dotted notation, e.g. `140.2.1.12`. Each set of 8 bits can range from 0 to 255: `0.0.0.0` to `255.255.255.255`. \n\nThere are different classes of IP addresses which detail how many of the 32 bits correspond to the `Network ID` and how many of the 32 bits correspond to the `Host ID`. Class B IP addresses which are probably the most common have 16 bits for the `Network ID` (the first 2 dotted stanzas) and `16 bits` for the `Host ID`. E.g. `140.2.1.12` has a `Network ID` of `140.2` and a `Host ID` of `1.12` if divided up this way.",
      "html": "<h3 id=\"ip-addresses\">IP Addresses <a class=\"heading-anchor-permalink\" href=\"#ip-addresses\">#</a></h3>\n<p>IPv4 addresses are 4 byte (32 bit) values that describe a host machine. The four bytes are written in dotted notation, e.g. <code>140.2.1.12</code>. Each set of 8 bits can range from 0 to 255: <code>0.0.0.0</code> to <code>255.255.255.255</code>.</p>\n<p>There are different classes of IP addresses which detail how many of the 32 bits correspond to the <code>Network ID</code> and how many of the 32 bits correspond to the <code>Host ID</code>. Class B IP addresses which are probably the most common have 16 bits for the <code>Network ID</code> (the first 2 dotted stanzas) and <code>16 bits</code> for the <code>Host ID</code>. E.g. <code>140.2.1.12</code> has a <code>Network ID</code> of <code>140.2</code> and a <code>Host ID</code> of <code>1.12</code> if divided up this way.</p>\n",
      "id": 33
    },
    {
      "path": "TCP-IP/IP_Fragmentation.md",
      "url": "TCP-IP/IP_Fragmentation.html",
      "content": "# IP Fragmentation\n\n- IP fragmentation (splitting up a stream of data into multiple IP packets) occurs at the IP layer and thus is transparent to TCP/UDP\n- However, in order to reduce bugs, TCP generally doesn't send packets to the IP layer requiring fragmentation, handling the breaking up of the packets itself instead\n- Datagram: A datagram is the entire unit of end-to-end transmission sent\n- Packet: The data (potentially fragmented) that is actually sent",
      "html": "<h1 id=\"ip-fragmentation\">IP Fragmentation <a class=\"heading-anchor-permalink\" href=\"#ip-fragmentation\">#</a></h1>\n<ul>\n<li>IP fragmentation (splitting up a stream of data into multiple IP packets) occurs at the IP layer and thus is transparent to TCP/UDP</li>\n<li>However, in order to reduce bugs, TCP generally doesn’t send packets to the IP layer requiring fragmentation, handling the breaking up of the packets itself instead</li>\n<li>Datagram: A datagram is the entire unit of end-to-end transmission sent</li>\n<li>Packet: The data (potentially fragmented) that is actually sent</li>\n</ul>\n",
      "id": 34
    },
    {
      "path": "TCP-IP/IP_Subnets.md",
      "url": "TCP-IP/IP_Subnets.html",
      "content": "\n[[IP_Addresses]]\t]]\n\n### Subnets\n\nSubnets allow you to divide the 16 bits of `Host ID` even further into a `Subnet ID` and a smaller `Host ID`. For example, 8 of these 16 bits can then become a `Subnet ID` with the last 8 being the `Host ID`. This allows network administrators to divide up the IP address (`Network ID`) they are assigned into 254 subnets with a maximum of 254 subnets per host. In this case `140.2.1.12` would be broken up as follows: `140.2` for the `Network ID`, `1` for the `Subnet ID` and `12` for the `Host ID`.\n\n### Subnet Masks\n\nWhile in the previous examles the `Subnet ID` only occupied 8 bits and the `Host ID` occupied the last 8 bits, this is not always true. The `Subnet Mask` determines which bits correspond to the `Network ID` and `Subnet ID` and which bits corresond for the `Host ID`. It is represented as follows: for each bit NOT corresponding to a `Host ID` it is set to one. For each bit corresponding to the `Host ID` it is set to 0. In the above example, the `Subnet Mask` would be 24 1's followed by 8 0's. \n\nThis case would be represented in dotted notation as `255.255.255.0` or in Hex as `0xffffff00`. Different breaks between `Subnet ID` and `Host ID` can be described by different subnet masks. Subnets and Subnet Masks allow IP routing tables to be much smaller as only one entry is needed for the router to each subnet instead of a list of all machines on the network. ",
      "html": "<p>[[IP_Addresses]]\t]]</p>\n<h3 id=\"subnets\">Subnets <a class=\"heading-anchor-permalink\" href=\"#subnets\">#</a></h3>\n<p>Subnets allow you to divide the 16 bits of <code>Host ID</code> even further into a <code>Subnet ID</code> and a smaller <code>Host ID</code>. For example, 8 of these 16 bits can then become a <code>Subnet ID</code> with the last 8 being the <code>Host ID</code>. This allows network administrators to divide up the IP address (<code>Network ID</code>) they are assigned into 254 subnets with a maximum of 254 subnets per host. In this case <code>140.2.1.12</code> would be broken up as follows: <code>140.2</code> for the <code>Network ID</code>, <code>1</code> for the <code>Subnet ID</code> and <code>12</code> for the <code>Host ID</code>.</p>\n<h3 id=\"subnet-masks\">Subnet Masks <a class=\"heading-anchor-permalink\" href=\"#subnet-masks\">#</a></h3>\n<p>While in the previous examles the <code>Subnet ID</code> only occupied 8 bits and the <code>Host ID</code> occupied the last 8 bits, this is not always true. The <code>Subnet Mask</code> determines which bits correspond to the <code>Network ID</code> and <code>Subnet ID</code> and which bits corresond for the <code>Host ID</code>. It is represented as follows: for each bit NOT corresponding to a <code>Host ID</code> it is set to one. For each bit corresponding to the <code>Host ID</code> it is set to 0. In the above example, the <code>Subnet Mask</code> would be 24 1’s followed by 8 0’s.</p>\n<p>This case would be represented in dotted notation as <code>255.255.255.0</code> or in Hex as <code>0xffffff00</code>. Different breaks between <code>Subnet ID</code> and <code>Host ID</code> can be described by different subnet masks. Subnets and Subnet Masks allow IP routing tables to be much smaller as only one entry is needed for the router to each subnet instead of a list of all machines on the network.</p>\n",
      "id": 35
    },
    {
      "path": "TCP-IP/Network_Layers.md",
      "url": "TCP-IP/Network_Layers.html",
      "content": "# Layers\n\nThere are four main layers working for these protocols. In order of decreasing abstraction:\n\n- application\n- Transport (TCP/UDP)\n- Network (IP)\n- Link (Device Drivers)\n\nThe application is typically a user process while the other three layers are typically kernel functions. \n\n**As data is passed down throughout the layers, each layer adds information to the data by prepending headers or adding trailing information until the packet gets to the link layer and is sent**\n\n",
      "html": "<h1 id=\"layers\">Layers <a class=\"heading-anchor-permalink\" href=\"#layers\">#</a></h1>\n<p>There are four main layers working for these protocols. In order of decreasing abstraction:</p>\n<ul>\n<li>application</li>\n<li>Transport (TCP/UDP)</li>\n<li>Network (IP)</li>\n<li>Link (Device Drivers)</li>\n</ul>\n<p>The application is typically a user process while the other three layers are typically kernel functions.</p>\n<p><strong>As data is passed down throughout the layers, each layer adds information to the data by prepending headers or adding trailing information until the packet gets to the link layer and is sent</strong></p>\n",
      "id": 36
    },
    {
      "path": "TCP-IP/Routing.md",
      "url": "TCP-IP/Routing.html",
      "content": "# Establishing Packet Routes\n\nHistorically a portion of the IP datagram can be used to record the routers a packet hits along the way in the IP headers. However, IP headers are a fixed size, and thus you can only record up to 9 IPv4 addresses in a single packet. As the internet grew, this quickly became too few to record all of the hops. Thus, `traceroute` was written to find all the hops a packet takes between destinations.\n\nAdditionally, each IP datagram has a `TTL` (Time to life) field that is used to prevent packets from getting into routing loops. Traditionally this starts at 64 and is decremented at every hop. When `TTL` gets to 1, if the router cannot forward the packet to its finally destination it discards the packet and sends a timeout error with its IP address to the original packet source address.\n\n# Traceroute\n\n`traceroute` takes advantage of this `TTL` expiration by creating packets with incrementing `TTL's`, starting at 1. Therefore, each successive packet reaches one further hop and gets the router IP address at which the `TTL` expired. So by creating and sending packets with `TTL's` of 1,2,3...,n where n is the unknown number of hops to get to the end destination (you know it reached the end destination because the destination system will send back a port unreachable error because `traceroute` picks a destination port of 30000+ which the destination system is very unlikely to have a program running on), you can map the entire route a packet takes.\n\n# Routing\n\n- Routing tables define where packets should be sent based on destination addresses. For most internet packets they go through a default entry which is a router connected to the internet. The packet then goes through multiple hops in this same fashion, until the last router has a matching entry for the destination address\n- Hosts build up routing knowledge through ICMP redirects being returned to them (and then adding the corresponding routes as shown by netstat). The rest of the routing knowledge is contained in routers",
      "html": "<h1 id=\"establishing-packet-routes\">Establishing Packet Routes <a class=\"heading-anchor-permalink\" href=\"#establishing-packet-routes\">#</a></h1>\n<p>Historically a portion of the IP datagram can be used to record the routers a packet hits along the way in the IP headers. However, IP headers are a fixed size, and thus you can only record up to 9 IPv4 addresses in a single packet. As the internet grew, this quickly became too few to record all of the hops. Thus, <code>traceroute</code> was written to find all the hops a packet takes between destinations.</p>\n<p>Additionally, each IP datagram has a <code>TTL</code> (Time to life) field that is used to prevent packets from getting into routing loops. Traditionally this starts at 64 and is decremented at every hop. When <code>TTL</code> gets to 1, if the router cannot forward the packet to its finally destination it discards the packet and sends a timeout error with its IP address to the original packet source address.</p>\n<h1 id=\"traceroute\">Traceroute <a class=\"heading-anchor-permalink\" href=\"#traceroute\">#</a></h1>\n<p><code>traceroute</code> takes advantage of this <code>TTL</code> expiration by creating packets with incrementing <code>TTL's</code>, starting at 1. Therefore, each successive packet reaches one further hop and gets the router IP address at which the <code>TTL</code> expired. So by creating and sending packets with <code>TTL's</code> of 1,2,3…,n where n is the unknown number of hops to get to the end destination (you know it reached the end destination because the destination system will send back a port unreachable error because <code>traceroute</code> picks a destination port of 30000+ which the destination system is very unlikely to have a program running on), you can map the entire route a packet takes.</p>\n<h1 id=\"routing\">Routing <a class=\"heading-anchor-permalink\" href=\"#routing\">#</a></h1>\n<ul>\n<li>Routing tables define where packets should be sent based on destination addresses. For most internet packets they go through a default entry which is a router connected to the internet. The packet then goes through multiple hops in this same fashion, until the last router has a matching entry for the destination address</li>\n<li>Hosts build up routing knowledge through ICMP redirects being returned to them (and then adding the corresponding routes as shown by netstat). The rest of the routing knowledge is contained in routers</li>\n</ul>\n",
      "id": 37
    },
    {
      "path": "TCP-IP/TCP-IP.md",
      "url": "TCP-IP/TCP-IP.html",
      "content": "[[Network_Layers]]\n[[Unix_Specific]]\n[[IP_Subnets]]\n[[IP_Addresses]]\n[[ARP-RARP]]\n",
      "html": "<p>[[Network_Layers]]\n[[Unix_Specific]]\n[[IP_Subnets]]\n[[IP_Addresses]]\n[[ARP-RARP]]</p>\n",
      "id": 38
    },
    {
      "path": "TCP-IP/Unix_Specific.md",
      "url": "TCP-IP/Unix_Specific.html",
      "content": "- `/etc/services`\n\t- This file lists all well-known port numbers for applications (e.g. ssh on port 22, etc.)\n\n- network `bridge`\n\t- A `bridge` is a connection between two network interfaces in the link layer. Thus the two interfaces will appear as one to the network layer. Docker uses this",
      "html": "<ul>\n<li>\n<p><code>/etc/services</code></p>\n<ul>\n<li>This file lists all well-known port numbers for applications (e.g. ssh on port 22, etc.)</li>\n</ul>\n</li>\n<li>\n<p>network <code>bridge</code></p>\n<ul>\n<li>A <code>bridge</code> is a connection between two network interfaces in the link layer. Thus the two interfaces will appear as one to the network layer. Docker uses this</li>\n</ul>\n</li>\n</ul>\n",
      "id": 39
    },
    {
      "path": "docker-compose.md",
      "url": "docker-compose.html",
      "content": "### docker-compose Quick Tips\n\n- run `docker-compose run <service> <command>` to run a service with a one-time command. E.g. `docker-compose run backend bash` to run `backend` interactively without actually starting Django\n",
      "html": "<h3 id=\"docker-compose-quick-tips\">docker-compose Quick Tips <a class=\"heading-anchor-permalink\" href=\"#docker-compose-quick-tips\">#</a></h3>\n<ul>\n<li>run <code>docker-compose run &lt;service&gt; &lt;command&gt;</code> to run a service with a one-time command. E.g. <code>docker-compose run backend bash</code> to run <code>backend</code> interactively without actually starting Django</li>\n</ul>\n",
      "id": 40
    }
  ]
}